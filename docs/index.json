{
  "api/Ampere.Base.html": {
    "href": "api/Ampere.Base.html",
    "title": "Namespace Ampere.Base",
    "keywords": "Namespace Ampere.Base Classes ImmutableRange<T> The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. IntRange The range class represents a range of int values. Unlike other IRangify<T> implementing classes, IntRange contains an System.Collections.Generic.IEnumerator<T> of type int to enumerate through all of the values between the minimum and maximum ranges. By convention, both sides of the range should be inclusive values. Range<T> The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Interfaces IIndexable<TKey, TVal> Specifies an indexer with one dimension. IIndexableDouble<TKey, TVal> Specifies an indexer with two dimensions. IIndexableDoubleReadOnly<TKey, TVal> Specifies a read-only indexer with two dimensions. IIndexableReadOnly<TKey, TVal> Specifies a read-only indexer with one dimension. IIndexableTriple<TKey, TVal> Specifies an indexer with three dimensions. IIndexableTripleReadOnly<TKey, TVal> Specifies a read-only indexer with three dimensions. IRangify<T> The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values."
  },
  "api/Ampere.Base.IIndexable-2.html": {
    "href": "api/Ampere.Base.IIndexable-2.html",
    "title": "Interface IIndexable<TKey, TVal>",
    "keywords": "Interface IIndexable<TKey, TVal> Specifies an indexer with one dimension. Namespace : Ampere.Base Assembly : Ampere.dll Syntax public interface IIndexable<in TKey, TVal> Type Parameters Name Description TKey The element type of the key TVal The element type of the value Properties | Improve this Doc View Source Item[TKey] The one dimension read/write indexer. Declaration TVal this[TKey key] { get; set; } Parameters Type Name Description TKey key The key to assign to the indexer Property Value Type Description TVal The TVal generic type"
  },
  "api/Ampere.Base.IIndexableDouble-2.html": {
    "href": "api/Ampere.Base.IIndexableDouble-2.html",
    "title": "Interface IIndexableDouble<TKey, TVal>",
    "keywords": "Interface IIndexableDouble<TKey, TVal> Specifies an indexer with two dimensions. Namespace : Ampere.Base Assembly : Ampere.dll Syntax public interface IIndexableDouble<in TKey, TVal> Type Parameters Name Description TKey The element type of the key TVal The element type of the value Properties | Improve this Doc View Source Item[TKey, TKey] The two dimension read/write indexer. Declaration TVal this[TKey key, TKey key2] { get; set; } Parameters Type Name Description TKey key The first key to assign to the indexer TKey key2 The second key to assign to the indexer Property Value Type Description TVal The TVal generic type"
  },
  "api/Ampere.Base.IIndexableDoubleReadOnly-2.html": {
    "href": "api/Ampere.Base.IIndexableDoubleReadOnly-2.html",
    "title": "Interface IIndexableDoubleReadOnly<TKey, TVal>",
    "keywords": "Interface IIndexableDoubleReadOnly<TKey, TVal> Specifies a read-only indexer with two dimensions. Namespace : Ampere.Base Assembly : Ampere.dll Syntax public interface IIndexableDoubleReadOnly<in TKey, out TVal> Type Parameters Name Description TKey The element type of the key TVal The element type of the value Properties | Improve this Doc View Source Item[TKey, TKey] The two dimension readonly indexer. Declaration TVal this[TKey key, TKey key2] { get; } Parameters Type Name Description TKey key The first key to assign to the indexer TKey key2 The second key to assign to the indexer Property Value Type Description TVal The TVal generic type"
  },
  "api/Ampere.Base.IIndexableReadOnly-2.html": {
    "href": "api/Ampere.Base.IIndexableReadOnly-2.html",
    "title": "Interface IIndexableReadOnly<TKey, TVal>",
    "keywords": "Interface IIndexableReadOnly<TKey, TVal> Specifies a read-only indexer with one dimension. Namespace : Ampere.Base Assembly : Ampere.dll Syntax public interface IIndexableReadOnly<in TKey, out TVal> Type Parameters Name Description TKey The element type of the key TVal The element type of the value Properties | Improve this Doc View Source Item[TKey] The one dimension readonly indexer. Declaration TVal this[TKey key] { get; } Parameters Type Name Description TKey key The key to assign to the indexer Property Value Type Description TVal The TVal generic type"
  },
  "api/Ampere.Base.IIndexableTriple-2.html": {
    "href": "api/Ampere.Base.IIndexableTriple-2.html",
    "title": "Interface IIndexableTriple<TKey, TVal>",
    "keywords": "Interface IIndexableTriple<TKey, TVal> Specifies an indexer with three dimensions. Namespace : Ampere.Base Assembly : Ampere.dll Syntax public interface IIndexableTriple<in TKey, TVal> Type Parameters Name Description TKey The element type of the key TVal The element type of the value Properties | Improve this Doc View Source Item[TKey, TKey, TKey] The two dimension read/write indexer. Declaration TVal this[TKey key, TKey key2, TKey key3] { get; set; } Parameters Type Name Description TKey key The first key to assign to the indexer TKey key2 The second key to assign to the indexer TKey key3 The third key to assign to the indexer Property Value Type Description TVal The TVal generic type"
  },
  "api/Ampere.Base.IIndexableTripleReadOnly-2.html": {
    "href": "api/Ampere.Base.IIndexableTripleReadOnly-2.html",
    "title": "Interface IIndexableTripleReadOnly<TKey, TVal>",
    "keywords": "Interface IIndexableTripleReadOnly<TKey, TVal> Specifies a read-only indexer with three dimensions. Namespace : Ampere.Base Assembly : Ampere.dll Syntax public interface IIndexableTripleReadOnly<in TKey, out TVal> Type Parameters Name Description TKey The element type of the key TVal The element type of the value Properties | Improve this Doc View Source Item[TKey, TKey, TKey] The third dimension readonly indexer. Declaration TVal this[TKey key, TKey key2, TKey key3] { get; } Parameters Type Name Description TKey key The first key to assign to the indexer TKey key2 The second key to assign to the indexer TKey key3 The third key to assign to the indexer Property Value Type Description TVal The TVal generic type"
  },
  "api/Ampere.Base.ImmutableRange-1.html": {
    "href": "api/Ampere.Base.ImmutableRange-1.html",
    "title": "Class ImmutableRange<T>",
    "keywords": "Class ImmutableRange<T> The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Inheritance System.Object ImmutableRange<T> Implements IRangify <T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Ampere.Base Assembly : Ampere.dll Syntax public class ImmutableRange<T> : IRangify<T> where T : IComparable<T> Type Parameters Name Description T The generic parameter Constructors | Improve this Doc View Source ImmutableRange(T, T) Creates a new instance of the ImmutableRange class. This class is immutable - for the mutable version, see Range<T> Declaration protected ImmutableRange(T minimum, T maximum) Parameters Type Name Description T minimum The minimum value T maximum The maximum value Properties | Improve this Doc View Source Maximum The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public T Maximum { get; } Property Value Type Description T | Improve this Doc View Source Minimum The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public T Minimum { get; } Property Value Type Description T Methods | Improve this Doc View Source ContainsRange(IRangify<T>) The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public bool ContainsRange(IRangify<T> range) Parameters Type Name Description IRangify <T> range Returns Type Description System.Boolean | Improve this Doc View Source ContainsValue(T) The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public bool ContainsValue(T value) Parameters Type Name Description T value The value to test Returns Type Description System.Boolean True if the value is inside Range, else false | Improve this Doc View Source IsInsideRange(IRangify<T>) The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public bool IsInsideRange(IRangify<T> range) Parameters Type Name Description IRangify <T> range Returns Type Description System.Boolean True if range is inclusive, else false | Improve this Doc View Source IsValid() The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public bool IsValid() Returns Type Description System.Boolean True if range is valid, else false | Improve this Doc View Source ToString() The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IRangify<T>"
  },
  "api/Ampere.Base.IntRange.html": {
    "href": "api/Ampere.Base.IntRange.html",
    "title": "Class IntRange",
    "keywords": "Class IntRange The range class represents a range of int values. Unlike other IRangify<T> implementing classes, IntRange contains an System.Collections.Generic.IEnumerator<T> of type int to enumerate through all of the values between the minimum and maximum ranges. By convention, both sides of the range should be inclusive values. Inheritance System.Object Range < System.Int32 > IntRange Implements IRangify < System.Int32 > System.Collections.Generic.IEnumerable < System.Int32 > System.Collections.IEnumerable Inherited Members Range<Int32>.Minimum Range<Int32>.Maximum Range<Int32>.ToString() Range<Int32>.IsValid() Range<Int32>.ContainsValue(Int32) Range<Int32>.IsInsideRange(IRangify<Int32>) Range<Int32>.ContainsRange(IRangify<Int32>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Ampere.Base Assembly : Ampere.dll Syntax public class IntRange : Range<int>, IRangify<int>, IEnumerable<int>, IEnumerable Constructors | Improve this Doc View Source IntRange(Int32, Int32) Creates a new instance of IntRange, specifying the minimum and maximum values. Declaration public IntRange(int minimum, int maximum) Parameters Type Name Description System.Int32 minimum System.Int32 maximum Methods | Improve this Doc View Source GetEnumerator() Returns an instance of the IntRangeEnumerator that's used to enumerate through the range values of this instance. Declaration public IEnumerator<int> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Int32 > An instance of the IntRangeEnumerator class Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Returns an instance of the IntRangeEnumerator that's used to enumerate through the range values of this instance. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator An instance of the IntRangeEnumerator class Implements IRangify<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods EnumerableUtils.IsNullOrEmpty<T>(IEnumerable<T>) EnumerableUtils.Shuffle<T>(IEnumerable<T>) EnumerableUtils.ToString<T>(IEnumerable<T>, String, Boolean) EnumerableStats.Mean<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.Median<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.Mode<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.SampleVariance<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.PopulationVariance<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.SampleStandardDeviation<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.PopulationStandardDeviation<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.Range<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.LowerQuartile<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.UpperQuartile<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.InterQuartileRange<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.IsNormalProportion<T>(IEnumerable<T>, Func<T, Double>, Double) EnumerableStats.IsNormalMean<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.StandardizedScore<T>(IEnumerable<T>, Func<T, Double>, Double)"
  },
  "api/Ampere.Base.IRangify-1.html": {
    "href": "api/Ampere.Base.IRangify-1.html",
    "title": "Interface IRangify<T>",
    "keywords": "Interface IRangify<T> The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Namespace : Ampere.Base Assembly : Ampere.dll Syntax public interface IRangify<T> where T : IComparable<T> Type Parameters Name Description T The generic parameter Properties | Improve this Doc View Source Maximum The maximum value of this range Declaration T Maximum { get; } Property Value Type Description T | Improve this Doc View Source Minimum The minimum value of this range Declaration T Minimum { get; } Property Value Type Description T Methods | Improve this Doc View Source ContainsValue(T) Determines if the provided value is inside the range. Declaration bool ContainsValue(T value) Parameters Type Name Description T value The value to test Returns Type Description System.Boolean True if the value is inside Range, else false | Improve this Doc View Source IsInsideRange(IRangify<T>) Determines if this Range is inside the bounds of another range. Declaration bool IsInsideRange(IRangify<T> range) Parameters Type Name Description IRangify <T> range The parent range to test on Returns Type Description System.Boolean True if range is inclusive, else false | Improve this Doc View Source IsValid() Determines if the range is valid. Declaration bool IsValid() Returns Type Description System.Boolean True if range is valid, else false"
  },
  "api/Ampere.Base.Range-1.html": {
    "href": "api/Ampere.Base.Range-1.html",
    "title": "Class Range<T>",
    "keywords": "Class Range<T> The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Inheritance System.Object Range<T> IntRange Implements IRangify <T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Ampere.Base Assembly : Ampere.dll Syntax public class Range<T> : IRangify<T> where T : IComparable<T> Type Parameters Name Description T The generic parameter Constructors | Improve this Doc View Source Range(T, T) Creates a new instance of the Range class. This class is mutable - for the immutable version, see ImmutableRange<T> Declaration protected Range(T minimum, T maximum) Parameters Type Name Description T minimum The minimum value T maximum The maximum value Properties | Improve this Doc View Source Maximum The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public T Maximum { get; set; } Property Value Type Description T | Improve this Doc View Source Minimum The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public T Minimum { get; set; } Property Value Type Description T Methods | Improve this Doc View Source ContainsRange(IRangify<T>) The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public bool ContainsRange(IRangify<T> range) Parameters Type Name Description IRangify <T> range Returns Type Description System.Boolean | Improve this Doc View Source ContainsValue(T) The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public bool ContainsValue(T value) Parameters Type Name Description T value The value to test Returns Type Description System.Boolean True if the value is inside Range, else false | Improve this Doc View Source IsInsideRange(IRangify<T>) The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public bool IsInsideRange(IRangify<T> range) Parameters Type Name Description IRangify <T> range Returns Type Description System.Boolean True if range is inclusive, else false | Improve this Doc View Source IsValid() The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public bool IsValid() Returns Type Description System.Boolean True if range is valid, else false | Improve this Doc View Source ToString() The range class represents a range of values of a generic type. The Range class which was modified from user @drharris on StackOverflow. By convention, both sides of the range should be inclusive values. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IRangify<T>"
  },
  "api/Ampere.EnumerableUtils.EnumerableUtils.html": {
    "href": "api/Ampere.EnumerableUtils.EnumerableUtils.html",
    "title": "Class EnumerableUtils",
    "keywords": "Class EnumerableUtils A static utility class for .NET System.Collections.Generic.IEnumerable<T> Inheritance System.Object EnumerableUtils Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Ampere.EnumerableUtils Assembly : Ampere.dll Syntax public static class EnumerableUtils Methods | Improve this Doc View Source Concat<T>(IEnumerable<T>[]) Concatenates all IEnumerables which are specified in in the parameter. The concatenation occurs in the order specified in the parameter. Declaration public static IEnumerable<T> Concat<T>(params IEnumerable<T>[] ie) Parameters Type Name Description System.Collections.Generic.IEnumerable <T>[] ie An enumerable of all one dimensional arrays to be concatenated Returns Type Description System.Collections.Generic.IEnumerable <T> A single enumerable with all of the concatenated elements Type Parameters Name Description T The enumerable type to be used Examples This simple example shows how to call the Concat<T>(IEnumerable<T>[]) method. Exceptions Type Condition System.ArgumentNullException Is thrown if any enumerable, which is a candidate to be concatenated, is null | Improve this Doc View Source Insert<T>(ref IEnumerable<T>, Int32, Int32, T[]) Inserts the specified element at the specified index in the enumerable (modifying the original enumerable). If element at that position exits, If shifts that element and any subsequent elements to the right, adding one to their indices. The method also allows for inserting more than one element into the enumerable at one time given that they are specified. This Insert method is functionally similar to the Insert method of the List class. System.Collections.IList.Insert(System.Int32,System.Object) for information about the add method of the List class. Declaration public static IEnumerable<T> Insert<T>(ref IEnumerable<T> src, int startIdx, int amtToIns, params T[] valuesToIns) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> src The IEnumerable to be used System.Int32 startIdx The index to start insertion System.Int32 amtToIns The amount of elements to insert into the enumerable T[] valuesToIns Optionally, the values to insert into the empty indices of the new enumerable Returns Type Description System.Collections.Generic.IEnumerable <T> An enumerable of the elements inserted into the enumerable, if any Type Parameters Name Description T The type of the enumerable Examples This sample shows how to call the Insert<T>(ref IEnumerable<T>, Int32, Int32, T[]) method. Exceptions Type Condition System.IndexOutOfRangeException Thrown when the valuesToIns enumerable does not match the amount to insert (if it is greater than 0) System.IndexOutOfRangeException Thrown when the amtToIns or the startIdx is less than 0 See Also System.Collections.IList.Insert(System.Int32,System.Object) | Improve this Doc View Source IsNullOrEmpty<T>(IEnumerable<T>) Returns whether an IEnumerable is null or empty Declaration public static bool IsNullOrEmpty<T>(this IEnumerable<T> ie) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> ie The IEnumerable to be used Returns Type Description System.Boolean The truth Type Parameters Name Description T The type of the IEnumerable | Improve this Doc View Source Range(Int32, Int32) Enables python style for-loop for easier readability. This loop begins at the starting value and loops until the end - 1, Declaration public static IEnumerable<int> Range(int start, int end) Parameters Type Name Description System.Int32 start The starting counter for the loop (inclusive) System.Int32 end The ending counter for the loop (exclusive) Returns Type Description System.Collections.Generic.IEnumerable < System.Int32 > An IEnumerable representing the current index Examples This example shows how to use the Range(Int32, Int32) method. | Improve this Doc View Source Shuffle<T>(IEnumerable<T>) Cryptographically shuffles an enumerable. Declaration public static IEnumerable<T> Shuffle<T>(this IEnumerable<T> src) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> src The IEnumerable Returns Type Description System.Collections.Generic.IEnumerable <T> The Shuffled IEnumerable Type Parameters Name Description T The element type of the IEnumerable | Improve this Doc View Source Span(Int32, Int32) Enables python style for-loop for easier readability. This loop begins at the starting value and loops until the end. Declaration public static IEnumerable<int> Span(int start, int end) Parameters Type Name Description System.Int32 start The starting counter for the loop (inclusive) System.Int32 end The ending counter for the loop (inclusive) Returns Type Description System.Collections.Generic.IEnumerable < System.Int32 > An IEnumerable representing the current index Examples This example shows how to use the Span(Int32, Int32) method. | Improve this Doc View Source ToString<T>(IEnumerable<T>, String, Boolean) Prints a string representation of an enumerable. There are 4 supported lengths for the fmtExp. The default length is 0 and the default behavior depends on the type of the enumerable. If the type is primitive (based on the System.IsPrimitive property) including decimal and string, then it prints the enumerable with a space as a separator between each element. If the enumerable is not primitive, it prints the enumerable with no separator. A fmtExp of length 1 specifies a character to separate each element. The enumerable is printed out, following a default behavior, except with the specified separator rather than the default separator. A fmtExp of length 2 specifies a two characters to mark the left and right outer bounds of the enumerable, A fmtExp of length 3 specifies a character for the left outer bound of the enumerable, followed by a separator character, followed by a character for the right outer bound of the enumerable. If no separator is desired, the \"/0+\" expression can be specified.The evenlySpacedSeparator parameter specifies whether an even number of spaces should be on both sides of the separator. This parameter ignores Object type enumerables excluding decimal and string. Declaration public static string ToString<T>(this IEnumerable<T> src, string fmtExp = \"\", bool evenlySpacedSeparator = false) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> src The IEnumerable to be used System.String fmtExp The defined expression to be optionally used System.Boolean evenlySpacedSeparator Determines whether the spacing between each element should be the same Returns Type Description System.String The string representation of the enumerable Type Parameters Name Description T The type of the enumerable Examples This sample shows how to call the ToString<T>(IEnumerable<T>, String, Boolean) method. Exceptions Type Condition System.ArgumentNullException If arr is null System.FormatException If the formatting expression length is neither 0 or 3"
  },
  "api/Ampere.EnumerableUtils.html": {
    "href": "api/Ampere.EnumerableUtils.html",
    "title": "Namespace Ampere.EnumerableUtils",
    "keywords": "Namespace Ampere.EnumerableUtils Classes EnumerableUtils A static utility class for .NET System.Collections.Generic.IEnumerable<T>"
  },
  "api/Ampere.FileUtils.FileUtils.html": {
    "href": "api/Ampere.FileUtils.FileUtils.html",
    "title": "Class FileUtils",
    "keywords": "Class FileUtils A static class for File utility functions Inheritance System.Object FileUtils Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Ampere.FileUtils Assembly : Ampere.dll Syntax public static class FileUtils Methods | Improve this Doc View Source FindInFile(FileInfo, Func<String, Boolean>) Returns the line of the matched predicate in the file. If the predicate is not found, -1 is returned. Declaration public static int FindInFile(FileInfo fileInfo, Func<string, bool> predicate) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to read from System.Func < System.String , System.Boolean > predicate The function predicate to find in the file Returns Type Description System.Int32 | Improve this Doc View Source GetDirectorySize(String) Returns the size of a directory in bytes, given an abstract file path. Declaration public static long GetDirectorySize(this string dirPath) Parameters Type Name Description System.String dirPath The path to the directory Returns Type Description System.Int64 The size of the directory in bytes | Improve this Doc View Source GetFileSize(String) Returns the size of file in bytes, given an abstract file path. Declaration public static long GetFileSize(this string filePath) Parameters Type Name Description System.String filePath The path to the file Returns Type Description System.Int64 The size of the file in bytes | Improve this Doc View Source GetRootPath() Returns a pathname to the root directory of the System. Declaration public static string GetRootPath() Returns Type Description System.String A pathname to the root directory of the System | Improve this Doc View Source GetUserPath() Returns a pathname to the user's profile folder. Declaration public static string GetUserPath() Returns Type Description System.String A pathname to the user's profile folder | Improve this Doc View Source GetValueAtLine(FileInfo, Int32) Returns the value found at a line number. Declaration public static string GetValueAtLine(FileInfo fileInfo, int line) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to read from System.Int32 line The line number to find Returns Type Description System.String | Improve this Doc View Source RemoveFromEachLine(FileInfo, String) Removes all instances of a specific value from a file if and only if the value is solely in one line. Declaration public static void RemoveFromEachLine(FileInfo fileInfo, string valToRemove) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to write the value to System.String valToRemove The value to remove | Improve this Doc View Source RemoveLine(FileInfo, Int32) Removes a specific line number from a file. Declaration public static void RemoveLine(FileInfo fileInfo, int line) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to write the value to System.Int32 line The line number to remove | Improve this Doc View Source RemoveLines(FileInfo, Int32[]) Removes a variable argument number of lines from a file. Declaration public static void RemoveLines(FileInfo fileInfo, params int[] lines) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to write the value to System.Int32 [] lines The line numbers to remove | Improve this Doc View Source ReplaceAll(FileInfo, String, String) Replaces all instances of a specific value from a file with another replacement value. Declaration public static void ReplaceAll(FileInfo fileInfo, string oldValue, string replacementValue) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to write the value to System.String oldValue The value to replace System.String replacementValue The replacement value | Improve this Doc View Source ReplaceAllByLine(FileInfo, String, String) Replaces all instances of a specific value from a file with another replacement value if and only if the old value is solely in one line. Declaration public static void ReplaceAllByLine(FileInfo fileInfo, string oldValue, string replacementValue) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to write the value to System.String oldValue The value to replace System.String replacementValue The replacement value | Improve this Doc View Source ReplaceAllInLine(FileInfo, String, String, Int32) Replaces all instances of a specific value from a file with another replacement value from a specified line Declaration public static void ReplaceAllInLine(FileInfo fileInfo, string oldValue, string replacementValue, int line) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to write the value to System.String oldValue The value to replace System.String replacementValue The replacement value System.Int32 line The line number to replace from | Improve this Doc View Source ReplaceInLines(FileInfo, Dictionary<KeyValuePair<String, String>, Int32>) Replaces all instances of a specific value from a file with another replacement value from a specified line. This overload facilitates the replacement through a Dictionary where the key's is an instance of System.Collections.Generic.KeyValuePair`2 and the value is an int. This allows for unique replacements to occur in more than one line Declaration public static void ReplaceInLines(FileInfo fileInfo, Dictionary<KeyValuePair<string, string>, int> replacementDict) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to write the value to System.Collections.Generic.Dictionary < System.Collections.Generic.KeyValuePair < System.String , System.String >, System.Int32 > replacementDict A Dictionary of replacement values and line numbers | Improve this Doc View Source ReplaceLine(FileInfo, String, Int32) Replaces an entire line with a replacement value. Declaration public static void ReplaceLine(FileInfo fileInfo, string replacementValue, int line) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to write the value to System.String replacementValue The replacement value System.Int32 line The line number to replace from | Improve this Doc View Source ReplaceLines(FileInfo, Dictionary<String, Int32>) Replace an entire line with a replacement value. This overload uses a Dictionary of replacement values and line numbers to replace more than one line. Declaration public static void ReplaceLines(FileInfo fileInfo, Dictionary<string, int> replacementValueLine) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to write the value to System.Collections.Generic.Dictionary < System.String , System.Int32 > replacementValueLine A Dictionary of replacement values and line number | Improve this Doc View Source WriteLine(FileInfo, String) Appends a string value into the file. Declaration public static void WriteLine(FileInfo fileInfo, string value) Parameters Type Name Description System.IO.FileInfo fileInfo The FileInfo instance to write the value to System.String value The string value to write"
  },
  "api/Ampere.FileUtils.html": {
    "href": "api/Ampere.FileUtils.html",
    "title": "Namespace Ampere.FileUtils",
    "keywords": "Namespace Ampere.FileUtils Classes FileUtils A static class for File utility functions"
  },
  "api/Ampere.MathUtils.html": {
    "href": "api/Ampere.MathUtils.html",
    "title": "Namespace Ampere.MathUtils",
    "keywords": "Namespace Ampere.MathUtils Classes Matrix A class representing a mathematical Matrix. Creates a rectangular array of rows and columns with numbers as elements. The Matrix class includes mathematical matrix operations to manipulate it. MatrixPropertyException An exception that occurs if a Matrix property is violated when examining certain properties at runtime. Interfaces IMatrixer Represents the minimum requirements to create a Matrix."
  },
  "api/Ampere.MathUtils.IMatrixer.html": {
    "href": "api/Ampere.MathUtils.IMatrixer.html",
    "title": "Interface IMatrixer",
    "keywords": "Interface IMatrixer Represents the minimum requirements to create a Matrix. Inherited Members System.Collections.Generic.IEnumerable<System.Double>.GetEnumerator() Namespace : Ampere.MathUtils Assembly : Ampere.dll Syntax public interface IMatrixer : IEnumerable<double>, IEnumerable Properties | Improve this Doc View Source Cols Property for the number of columns in an IMatrixer. Declaration int Cols { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Rows Property for the number of Rows in and IMatrixer. Declaration int Rows { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Values Property representing the values of the IMatrixer as a generic 2D array. Declaration double[, ] Values { get; } Property Value Type Description System.Double [,] Methods | Improve this Doc View Source EqualDimension(IMatrixer) Returns whether this instance is the same dimension as another IMatrixer instance. Same dimension means that the rows and the columns of both instances are the same. Declaration bool EqualDimension(IMatrixer otherMatrix) Parameters Type Name Description IMatrixer otherMatrix Returns Type Description System.Boolean A new Matrix containing the transposed version of the original | Improve this Doc View Source EqualDimension(IMatrixer, IMatrixer) Returns whether two Matrix instances are of the same dimension. Same dimension means that the rows and the columns of both instances are the same. Declaration static bool EqualDimension(IMatrixer one, IMatrixer two) Parameters Type Name Description IMatrixer one The first IMatrixer instance IMatrixer two The second IMatrixer instance Returns Type Description System.Boolean | Improve this Doc View Source IsColumnVector() Returns whether the number of Columns equals 1. Declaration bool IsColumnVector() Returns Type Description System.Boolean A bool specifying whether the number of Columns equals 1 | Improve this Doc View Source IsRowVector() Returns whether the number of Rows equals 1 Declaration bool IsRowVector() Returns Type Description System.Boolean A bool specifying whether the number of Rows equals 1 | Improve this Doc View Source IsSquareVector() Returns whether the number of Rows equals the number of Columns. Declaration bool IsSquareVector() Returns Type Description System.Boolean A bool specifying whether the number of Rows equals the number of columns | Improve this Doc View Source ToString() Returns a string representation of an IMatrixer. Declaration string ToString() Returns Type Description System.String A string representation of the IMatrixer | Improve this Doc View Source Transpose() Transposes the contents of the Matrix and returns a new Matrix. Declaration Matrix Transpose() Returns Type Description Matrix A new Matrix containing the transposed version of the original Extension Methods EnumerableUtils.IsNullOrEmpty<T>(IEnumerable<T>) EnumerableUtils.Shuffle<T>(IEnumerable<T>) EnumerableUtils.ToString<T>(IEnumerable<T>, String, Boolean) EnumerableStats.Mean<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.Median<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.Mode(IEnumerable<Double>) EnumerableStats.Mode<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.SampleVariance(IEnumerable<Double>) EnumerableStats.SampleVariance<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.PopulationVariance(IEnumerable<Double>) EnumerableStats.PopulationVariance<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.SampleStandardDeviation(IEnumerable<Double>) EnumerableStats.SampleStandardDeviation<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.PopulationStandardDeviation(IEnumerable<Double>) EnumerableStats.PopulationStandardDeviation<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.Range(IEnumerable<Double>) EnumerableStats.Range<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.LowerQuartile(IEnumerable<Double>) EnumerableStats.LowerQuartile<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.UpperQuartile(IEnumerable<Double>) EnumerableStats.UpperQuartile<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.InterQuartileRange(IEnumerable<Double>) EnumerableStats.InterQuartileRange<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.IsNormalProportion(IEnumerable<Double>, Double) EnumerableStats.IsNormalProportion<T>(IEnumerable<T>, Func<T, Double>, Double) EnumerableStats.IsNormalMean(IEnumerable<Double>) EnumerableStats.IsNormalMean<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.StandardizedScore(IEnumerable<Double>, Double) EnumerableStats.StandardizedScore<T>(IEnumerable<T>, Func<T, Double>, Double)"
  },
  "api/Ampere.MathUtils.Matrix.html": {
    "href": "api/Ampere.MathUtils.Matrix.html",
    "title": "Class Matrix",
    "keywords": "Class Matrix A class representing a mathematical Matrix. Creates a rectangular array of rows and columns with numbers as elements. The Matrix class includes mathematical matrix operations to manipulate it. Inheritance System.Object Matrix Implements IMatrixer System.Collections.Generic.IEnumerable < System.Double > System.Collections.IEnumerable IIndexableDouble < System.Int32 , System.Double > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Ampere.MathUtils Assembly : Ampere.dll Syntax public class Matrix : IMatrixer, IEnumerable<double>, IEnumerable, IIndexableDouble<int, double> Constructors | Improve this Doc View Source Matrix(Double[,]) Creates an instance of a Matrix given a 2D array. Declaration public Matrix(double[, ] matrix) Parameters Type Name Description System.Double [,] matrix A 2D array of doubles | Improve this Doc View Source Matrix(Int32, Int32) Creates an instance of a Matrix given rows and columns. Declaration public Matrix(int rows, int cols) Parameters Type Name Description System.Int32 rows The number of rows in this Matrix System.Int32 cols The number of columns in this Matrix Properties | Improve this Doc View Source Cols Represents the minimum requirements to create a Matrix. Declaration public int Cols { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Item[Int32, Int32] The indexer to add values for each row and column. Declaration public double this[int row, int col] { get; set; } Parameters Type Name Description System.Int32 row The row to insert the value System.Int32 col The column to insert the value Property Value Type Description System.Double | Improve this Doc View Source Rows Represents the minimum requirements to create a Matrix. Declaration public int Rows { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Values Represents the minimum requirements to create a Matrix. Declaration public double[, ] Values { get; } Property Value Type Description System.Double [,] Methods | Improve this Doc View Source Add(Matrix, Matrix) A wrapper for the operator method to add two Matrix instances. Declaration public static Matrix Add(Matrix one, Matrix two) Parameters Type Name Description Matrix one The first Matrix instance Matrix two The second Matrix instance Returns Type Description Matrix A new Matrix instance containing the added values | Improve this Doc View Source Add(Matrix, Double) A wrapper for the operator method to add a matrix instance with a scalar. Declaration public static Matrix Add(Matrix m, double scalar) Parameters Type Name Description Matrix m The Matrix instance System.Double scalar The scalar value Returns Type Description Matrix The Matrix after the scalar has been applied | Improve this Doc View Source Divide(Matrix, Double) A wrapper for the operator method to divide a matrix instance with a scalar. This may result in a Divide By Zero exception if the matrix contains a value of 0. Declaration public static Matrix Divide(Matrix m, double scalar) Parameters Type Name Description Matrix m The Matrix instance System.Double scalar The scalar value Returns Type Description Matrix The Matrix after the scalar has been applied | Improve this Doc View Source DotProduct(Matrix, Matrix) A wrapper for the operator method to compute the dot product of two Matrix instances. Declaration public static Matrix DotProduct(Matrix one, Matrix two) Parameters Type Name Description Matrix one The first Matrix instance Matrix two The second Matrix instance Returns Type Description Matrix A new Matrix instance containing dot product | Improve this Doc View Source EqualDimension(IMatrixer) Returns whether two Matrix instances are of the same dimension. Same dimension means that the rows and the columns of both instances are the same. This overload is an instance method of the Matrix class. Declaration public bool EqualDimension(IMatrixer otherMatrix) Parameters Type Name Description IMatrixer otherMatrix Returns Type Description System.Boolean | Improve this Doc View Source Equals(Matrix) A wrapper method for operator== method. Declaration public bool Equals(Matrix other) Parameters Type Name Description Matrix other The Matrix instance to check for equality Returns Type Description System.Boolean A bool representing whether the Matrix instance is equal | Improve this Doc View Source Equals(Object) Compares an object to a Matrix instance. This will check for type first then calls the Equals(Matrix) method. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare Returns Type Description System.Boolean A bool representing whether the object is equal Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetEnumerator() Returns an enumerator this Matrix containing every value. The iteration occurs through each row in the matrix. Declaration public IEnumerator<double> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Double > An System.Collections.Generic.IEnumerator<T> instance for the Matrix | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source IsColumnVector() Represents the minimum requirements to create a Matrix. Declaration public bool IsColumnVector() Returns Type Description System.Boolean A bool specifying whether the number of Columns equals 1 | Improve this Doc View Source IsRowVector() Represents the minimum requirements to create a Matrix. Declaration public bool IsRowVector() Returns Type Description System.Boolean A bool specifying whether the number of Rows equals 1 | Improve this Doc View Source IsSquareVector() Represents the minimum requirements to create a Matrix. Declaration public bool IsSquareVector() Returns Type Description System.Boolean A bool specifying whether the number of Rows equals the number of columns | Improve this Doc View Source Mod(Matrix, Double) A wrapper for the operator method to mod a matrix instance with a scalar. Declaration public static Matrix Mod(Matrix m, double scalar) Parameters Type Name Description Matrix m The Matrix instance System.Double scalar The scalar value Returns Type Description Matrix The Matrix after the scalar has been applied | Improve this Doc View Source Multiply(Matrix, Double) A wrapper for the operator method to multiply a matrix instance with a scalar. Declaration public static Matrix Multiply(Matrix m, double scalar) Parameters Type Name Description Matrix m The Matrix instance System.Double scalar The scalar value Returns Type Description Matrix The Matrix after the scalar has been applied | Improve this Doc View Source Negate(Matrix) A wrapper for the operator method to negate a matrix. Every value in the Matrix provided will be negated. Declaration public static Matrix Negate(Matrix m) Parameters Type Name Description Matrix m The Matrix instance Returns Type Description Matrix The Matrix after the scalar has been applied | Improve this Doc View Source Subtract(Matrix, Matrix) A wrapper for the operator method to subtract two Matrix instances. Declaration public static Matrix Subtract(Matrix one, Matrix two) Parameters Type Name Description Matrix one The first Matrix instance Matrix two The second Matrix instance Returns Type Description Matrix A new Matrix instance containing the added values | Improve this Doc View Source Subtract(Matrix, Double) A wrapper for the operator method to subtract a matrix instance with a scalar. Declaration public static Matrix Subtract(Matrix m, double scalar) Parameters Type Name Description Matrix m The Matrix instance System.Double scalar The scalar value Returns Type Description Matrix The Matrix after the scalar has been applied | Improve this Doc View Source ToString() Represents the minimum requirements to create a Matrix. Declaration public override string ToString() Returns Type Description System.String A string representation of the IMatrixer Overrides System.Object.ToString() | Improve this Doc View Source Transpose() Represents the minimum requirements to create a Matrix. Declaration public Matrix Transpose() Returns Type Description Matrix A new Matrix containing the transposed version of the original Operators | Improve this Doc View Source Addition(Matrix, Matrix) An operator method to add two Matrix instances. Declaration public static Matrix operator +(Matrix one, Matrix two) Parameters Type Name Description Matrix one The first Matrix instance Matrix two The second Matrix instance Returns Type Description Matrix A new Matrix instance containing the added values | Improve this Doc View Source Addition(Matrix, Double) An operator method to add a matrix instance with a scalar. Declaration public static Matrix operator +(Matrix m, double scalar) Parameters Type Name Description Matrix m The Matrix instance System.Double scalar The scalar value Returns Type Description Matrix The Matrix after the scalar has been applied | Improve this Doc View Source Addition(Double, Matrix) An operator method to add a matrix instance with a scalar. Declaration public static Matrix operator +(double scalar, Matrix m) Parameters Type Name Description System.Double scalar The scalar value Matrix m The Matrix instance Returns Type Description Matrix The Matrix after the scalar has been applied | Improve this Doc View Source Division(Matrix, Double) An operator method to divide a matrix instance with a scalar. This may result in a Divide By Zero exception if the matrix contains a value of 0. Declaration public static Matrix operator /(Matrix m, double scalar) Parameters Type Name Description Matrix m The Matrix instance System.Double scalar The scalar value Returns Type Description Matrix The Matrix after the scalar has been applied | Improve this Doc View Source Division(Double, Matrix) An operator method to divide a matrix instance with a scalar. This may result in a Divide By Zero exception if the matrix contains a value of 0. Declaration public static Matrix operator /(double scalar, Matrix m) Parameters Type Name Description System.Double scalar The scalar value Matrix m The Matrix instance Returns Type Description Matrix The Matrix after the scalar has been applied | Improve this Doc View Source Equality(Matrix, Matrix) An operator method to compare two Matrix instances for equality. Equality is defined by structure and values, meaning that both matrices must have an equal dimension and every value in both matrices must be equal. Declaration public static bool operator ==(Matrix one, Matrix two) Parameters Type Name Description Matrix one The first Matrix instance Matrix two The second Matrix instance Returns Type Description System.Boolean A bool representing whether the two Matrix instances are equal | Improve this Doc View Source Inequality(Matrix, Matrix) An operator method to compare two Matrix instances for equality. Equality is defined by structure and values, meaning that both matrices must have an equal dimension and every value in both matrices must be equal. Declaration public static bool operator !=(Matrix one, Matrix two) Parameters Type Name Description Matrix one The first Matrix instance Matrix two The second Matrix instance Returns Type Description System.Boolean A new Matrix instance containing the added values | Improve this Doc View Source LogicalNot(Matrix) An operator method to negate a matrix. Every value in the Matrix provided will be negated. Declaration public static Matrix operator !(Matrix m) Parameters Type Name Description Matrix m The Matrix instance Returns Type Description Matrix The Matrix after the scalar has been applied | Improve this Doc View Source Modulus(Matrix, Double) An operator method to mod a matrix instance with a scalar. Declaration public static Matrix operator %(Matrix m, double scalar) Parameters Type Name Description Matrix m The Matrix instance System.Double scalar The scalar value Returns Type Description Matrix The Matrix after the scalar has been applied | Improve this Doc View Source Modulus(Double, Matrix) An operator method to mod a matrix instance with a scalar. Declaration public static Matrix operator %(double scalar, Matrix m) Parameters Type Name Description System.Double scalar The scalar value Matrix m The Matrix instance Returns Type Description Matrix The Matrix after the scalar has been applied | Improve this Doc View Source Multiply(Matrix, Matrix) An operator method to compute the dot product of two Matrix instances. Declaration public static Matrix operator *(Matrix one, Matrix two) Parameters Type Name Description Matrix one The first Matrix instance Matrix two The second Matrix instance Returns Type Description Matrix A new Matrix instance containing dot product | Improve this Doc View Source Multiply(Matrix, Double) An operator method to multiply a matrix instance with a scalar. Declaration public static Matrix operator *(Matrix m, double scalar) Parameters Type Name Description Matrix m The Matrix instance System.Double scalar The scalar value Returns Type Description Matrix The Matrix after the scalar has been applied | Improve this Doc View Source Multiply(Double, Matrix) An operator method to multiply a matrix instance with a scalar. Declaration public static Matrix operator *(double scalar, Matrix m) Parameters Type Name Description System.Double scalar The scalar value Matrix m The Matrix instance Returns Type Description Matrix The Matrix after the scalar has been applied | Improve this Doc View Source Subtraction(Matrix, Matrix) An operator method to subtract two Matrix instances. Declaration public static Matrix operator -(Matrix one, Matrix two) Parameters Type Name Description Matrix one The first Matrix instance Matrix two The second Matrix instance Returns Type Description Matrix A new Matrix instance containing the added values | Improve this Doc View Source Subtraction(Matrix, Double) An operator method to subtract a matrix instance with a scalar. Declaration public static Matrix operator -(Matrix m, double scalar) Parameters Type Name Description Matrix m The Matrix instance System.Double scalar The scalar value Returns Type Description Matrix The Matrix after the scalar has been applied | Improve this Doc View Source Subtraction(Double, Matrix) An operator method to subtract a matrix instance with a scalar. Declaration public static Matrix operator -(double scalar, Matrix m) Parameters Type Name Description System.Double scalar The scalar value Matrix m The Matrix instance Returns Type Description Matrix The Matrix after the scalar has been applied Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Returns the non-generic Enumerator for the Matrix. This returns the generic GetEnumerator() method under the hood. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator An System.Collections.IEnumerator instance for the Matrix Implements IMatrixer System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable IIndexableDouble<TKey, TVal> Extension Methods EnumerableUtils.IsNullOrEmpty<T>(IEnumerable<T>) EnumerableUtils.Shuffle<T>(IEnumerable<T>) EnumerableUtils.ToString<T>(IEnumerable<T>, String, Boolean) EnumerableStats.Mean<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.Median<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.Mode(IEnumerable<Double>) EnumerableStats.Mode<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.SampleVariance(IEnumerable<Double>) EnumerableStats.SampleVariance<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.PopulationVariance(IEnumerable<Double>) EnumerableStats.PopulationVariance<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.SampleStandardDeviation(IEnumerable<Double>) EnumerableStats.SampleStandardDeviation<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.PopulationStandardDeviation(IEnumerable<Double>) EnumerableStats.PopulationStandardDeviation<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.Range(IEnumerable<Double>) EnumerableStats.Range<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.LowerQuartile(IEnumerable<Double>) EnumerableStats.LowerQuartile<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.UpperQuartile(IEnumerable<Double>) EnumerableStats.UpperQuartile<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.InterQuartileRange(IEnumerable<Double>) EnumerableStats.InterQuartileRange<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.IsNormalProportion(IEnumerable<Double>, Double) EnumerableStats.IsNormalProportion<T>(IEnumerable<T>, Func<T, Double>, Double) EnumerableStats.IsNormalMean(IEnumerable<Double>) EnumerableStats.IsNormalMean<T>(IEnumerable<T>, Func<T, Double>) EnumerableStats.StandardizedScore(IEnumerable<Double>, Double) EnumerableStats.StandardizedScore<T>(IEnumerable<T>, Func<T, Double>, Double)"
  },
  "api/Ampere.MathUtils.MatrixPropertyException.html": {
    "href": "api/Ampere.MathUtils.MatrixPropertyException.html",
    "title": "Class MatrixPropertyException",
    "keywords": "Class MatrixPropertyException An exception that occurs if a Matrix property is violated when examining certain properties at runtime. Inheritance System.Object System.Exception MatrixPropertyException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Ampere.MathUtils Assembly : Ampere.dll Syntax [Serializable] public class MatrixPropertyException : Exception, ISerializable Constructors | Improve this Doc View Source MatrixPropertyException() Creates a new MatrixPropertyException. Declaration public MatrixPropertyException() | Improve this Doc View Source MatrixPropertyException(SerializationInfo, StreamingContext) Creates a new overloaded MatrixPropertyException containing a System.Runtime.Serialization.SerializationInfo instance and a System.Runtime.Serialization.StreamingContext instance. Declaration protected MatrixPropertyException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The SerializationInfo instance System.Runtime.Serialization.StreamingContext context The StreamingContext instance | Improve this Doc View Source MatrixPropertyException(String) Creates a new overloaded MatrixPropertyException containing a message. Declaration public MatrixPropertyException(string message) Parameters Type Name Description System.String message The message of this exception type | Improve this Doc View Source MatrixPropertyException(String, Exception) Creates a new overloaded MatrixPropertyException containing a message and an inner Exception. Declaration public MatrixPropertyException(string message, Exception inner) Parameters Type Name Description System.String message The message of this exception type System.Exception inner The inner Exception Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Ampere.Statistics.EnumerableStats.html": {
    "href": "api/Ampere.Statistics.EnumerableStats.html",
    "title": "Class EnumerableStats",
    "keywords": "Class EnumerableStats A static utility class for calculating a variety of statistics based on IEnumerables. Moreover, generic overload methods exist to simplify calculating statistics of object enumerables containing numeric properties. Inheritance System.Object EnumerableStats Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Ampere.Statistics Assembly : Ampere.dll Syntax public static class EnumerableStats Methods | Improve this Doc View Source ConstructTValue(Double, Double, Double, Double) Returns whether if the data set is normally distributed for a mean. Declaration public static double ConstructTValue(double mean, double popMean, double stdDev, double size) Parameters Type Name Description System.Double mean The mean of the data set System.Double popMean The population mean System.Double stdDev The standard deviation of the data set System.Double size The size of the data set Returns Type Description System.Double Constructs the t-critical value | Improve this Doc View Source CreateConfidenceInterval(Double, Double, Double) Creates confidence interval for the given data set. Declaration public static IEnumerable<double> CreateConfidenceInterval(double mean, double cv, double se) Parameters Type Name Description System.Double mean The mean of the data set System.Double cv The critical value of the data set System.Double se The standard error of the data set Returns Type Description System.Collections.Generic.IEnumerable < System.Double > Returns a confidence interval of the data set. | Improve this Doc View Source InterQuartileRange(IEnumerable<Double>) Finds the inter-quartile range of the enumerable. Declaration public static double InterQuartileRange(this IEnumerable<double> src) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Double > src The IEnumerable of type double Returns Type Description System.Double The inter-quartile range of the source Exceptions Type Condition System.ArgumentNullException Thrown when the source is null System.InvalidOperationException Thrown when the source is of length 0 | Improve this Doc View Source InterQuartileRange<T>(IEnumerable<T>, Func<T, Double>) A generic overload of the InterQuartileRange(IEnumerable<Double>) method. This method will call the InterQuartileRange(IEnumerable<Double>) overload. Declaration public static double InterQuartileRange<T>(this IEnumerable<T> numbers, Func<T, double> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> numbers The specified enumerable System.Func <T, System.Double > selector The numeral specifier Returns Type Description System.Double The inter-quartile range of the source Type Parameters Name Description T The type of the enumerable | Improve this Doc View Source IsNormalMean(IEnumerable<Double>) Returns whether if the data set is normally distributed for a mean. Declaration public static bool IsNormalMean(this IEnumerable<double> src) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Double > src The IEnumerable of type double Returns Type Description System.Boolean Returns whether if the data set is normally distributed for a mean. Exceptions Type Condition System.ArgumentNullException Thrown when the source is null System.InvalidOperationException Thrown when the source is of length 0 | Improve this Doc View Source IsNormalMean<T>(IEnumerable<T>, Func<T, Double>) A generic overload of the IsNormalMean(IEnumerable<Double>) method. This method will call the IsNormalMean(IEnumerable<Double>) overload. Declaration public static bool IsNormalMean<T>(this IEnumerable<T> numbers, Func<T, double> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> numbers The specified enumerable System.Func <T, System.Double > selector The numeral specifier Returns Type Description System.Boolean Returns if the data set is normally distributed for a proportion. Type Parameters Name Description T The type of the enumerable | Improve this Doc View Source IsNormalProportion(IEnumerable<Double>, Double) Returns whether if the data set is normally distributed for a proportion. Declaration public static bool IsNormalProportion(this IEnumerable<double> src, double samstat) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Double > src The IEnumerable of type double System.Double samstat The sample statistic Returns Type Description System.Boolean Returns if the data set is normally distributed for a proportion. Exceptions Type Condition System.ArgumentNullException Thrown when the source is null System.InvalidOperationException Thrown when the source is of length 0 | Improve this Doc View Source IsNormalProportion<T>(IEnumerable<T>, Func<T, Double>, Double) A generic overload of the IsNormalProportion(IEnumerable<Double>, Double) method. This method will call the IsNormalProportion(IEnumerable<Double>, Double) overload. Declaration public static bool IsNormalProportion<T>(this IEnumerable<T> numbers, Func<T, double> selector, double samstat) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> numbers The specified enumerable System.Func <T, System.Double > selector The numeral specifier System.Double samstat The sample statistic> Returns Type Description System.Boolean Returns if the data set is normally distributed for a proportion. Type Parameters Name Description T The type of the enumerable | Improve this Doc View Source LowerQuartile(IEnumerable<Double>) Finds the lower quartile of the enumerable. Declaration public static double LowerQuartile(this IEnumerable<double> src) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Double > src The IEnumerable of type double Returns Type Description System.Double The lower quartile of the source Exceptions Type Condition System.ArgumentNullException Thrown when the source is null System.InvalidOperationException Thrown when the source is of size 0 InsufficientDataSetException Thrown when the data set is not large enough to calculate a lower quartile | Improve this Doc View Source LowerQuartile<T>(IEnumerable<T>, Func<T, Double>) A generic overload of the LowerQuartile(IEnumerable<Double>) method. This method will call the LowerQuartile(IEnumerable<Double>) overload. Declaration public static double LowerQuartile<T>(this IEnumerable<T> numbers, Func<T, double> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> numbers The specified enumerable System.Func <T, System.Double > selector The numeral specifier Returns Type Description System.Double The lower quartile of the source Type Parameters Name Description T The type of the enumerable | Improve this Doc View Source Mean<T>(IEnumerable<T>, Func<T, Double>) A generic overload of the Ampere.Statistics.EnumerableStats.Mean(System.Collections.Generic.IEnumerable{System.Double}) method. This method will call the Ampere.Statistics.EnumerableStats.Mean(System.Collections.Generic.IEnumerable{System.Double}) overload. Declaration public static double Mean<T>(this IEnumerable<T> numbers, Func<T, double> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> numbers The specified enumerable System.Func <T, System.Double > selector The numeral specifier Returns Type Description System.Double The average of all the elements in the source Type Parameters Name Description T The type of the enumerable | Improve this Doc View Source Median<T>(IEnumerable<T>, Func<T, Double>) A generic overload of the Ampere.Statistics.EnumerableStats.Median(System.Collections.Generic.IEnumerable{System.Double}) method. This method will call the Ampere.Statistics.EnumerableStats.Median(System.Collections.Generic.IEnumerable{System.Double}) overload. Declaration public static double Median<T>(this IEnumerable<T> numbers, Func<T, double> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> numbers The specified enumerable System.Func <T, System.Double > selector The numeral specifier Returns Type Description System.Double The median of the source Type Parameters Name Description T The type of the enumerable | Improve this Doc View Source Mode(IEnumerable<Double>) Finds the mode of all the elements in the enumerable. Declaration public static double Mode(this IEnumerable<double> src) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Double > src The IEnumerable of type double Returns Type Description System.Double The mode of the source Exceptions Type Condition System.ArgumentNullException Thrown when the source is null System.InvalidOperationException Thrown when the source is of length 0 NoModeException Thrown when no mode exists for the source | Improve this Doc View Source Mode<T>(IEnumerable<T>, Func<T, Double>) A generic overload of the Mode(IEnumerable<Double>) method. This method will call the Mode(IEnumerable<Double>) overload. Declaration public static double Mode<T>(this IEnumerable<T> numbers, Func<T, double> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> numbers The specified enumerable System.Func <T, System.Double > selector The numeral specifier Returns Type Description System.Double The mode of the source Type Parameters Name Description T The type of the enumerable | Improve this Doc View Source PopulationStandardDeviation(IEnumerable<Double>) Finds the population standard deviation of the enumerable. Declaration public static double PopulationStandardDeviation(this IEnumerable<double> src) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Double > src The IEnumerable of type double Returns Type Description System.Double The population standard deviation of the source Exceptions Type Condition System.ArgumentNullException Thrown when the source is null System.InvalidOperationException Thrown when the source is of length 0 | Improve this Doc View Source PopulationStandardDeviation<T>(IEnumerable<T>, Func<T, Double>) A generic overload of the PopulationStandardDeviation(IEnumerable<Double>) method. This method will call the PopulationStandardDeviation(IEnumerable<Double>) overload. Declaration public static double PopulationStandardDeviation<T>(this IEnumerable<T> numbers, Func<T, double> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> numbers The specified enumerable System.Func <T, System.Double > selector The numeral specifier Returns Type Description System.Double The population standard deviation of the source Type Parameters Name Description T The type of the enumerable | Improve this Doc View Source PopulationVariance(IEnumerable<Double>) Finds the population variance of the enumerable. Declaration public static double PopulationVariance(this IEnumerable<double> src) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Double > src The IEnumerable of type double Returns Type Description System.Double The population variance of the source Exceptions Type Condition System.ArgumentNullException Thrown when the source is null System.InvalidOperationException Thrown when the source is of length 0 | Improve this Doc View Source PopulationVariance<T>(IEnumerable<T>, Func<T, Double>) A generic overload of the PopulationVariance(IEnumerable<Double>) method. This method will call the PopulationVariance(IEnumerable<Double>) overload. Declaration public static double PopulationVariance<T>(this IEnumerable<T> numbers, Func<T, double> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> numbers The specified enumerable System.Func <T, System.Double > selector The numeral specifier Returns Type Description System.Double The populationvariance of the source Type Parameters Name Description T The type of the enumerable | Improve this Doc View Source Range(IEnumerable<Double>) Finds the range of the enumerable. Declaration public static double Range(this IEnumerable<double> src) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Double > src The IEnumerable of type double Returns Type Description System.Double The range of the source Exceptions Type Condition System.ArgumentNullException Thrown when the source is null System.InvalidOperationException Thrown when the source is of size 0 | Improve this Doc View Source Range<T>(IEnumerable<T>, Func<T, Double>) A generic overload of the Range(IEnumerable<Double>) method. This method will call the Range(IEnumerable<Double>) overload. Declaration public static double Range<T>(this IEnumerable<T> numbers, Func<T, double> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> numbers The specified enumerable System.Func <T, System.Double > selector The numeral specifier Returns Type Description System.Double The range of the source Type Parameters Name Description T The type of the enumerable | Improve this Doc View Source SampleStandardDeviation(IEnumerable<Double>) Finds the sample standard deviation of the enumerable. Declaration public static double SampleStandardDeviation(this IEnumerable<double> src) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Double > src The IEnumerable of type double Returns Type Description System.Double The sample standard deviation of the source Exceptions Type Condition System.ArgumentNullException Thrown when the source is null System.InvalidOperationException Thrown when the source is of length 0 | Improve this Doc View Source SampleStandardDeviation<T>(IEnumerable<T>, Func<T, Double>) A generic overload of the SampleStandardDeviation(IEnumerable<Double>) method. This method will call the SampleStandardDeviation(IEnumerable<Double>) overload. Declaration public static double SampleStandardDeviation<T>(this IEnumerable<T> numbers, Func<T, double> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> numbers The specified enumerable System.Func <T, System.Double > selector The numeral specifier Returns Type Description System.Double The sample standard deviation of the source Type Parameters Name Description T The type of the enumerable | Improve this Doc View Source SampleVariance(IEnumerable<Double>) Finds the sample variance of the enumerable. Declaration public static double SampleVariance(this IEnumerable<double> src) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Double > src The IEnumerable of type double Returns Type Description System.Double The sample variance of the source Exceptions Type Condition System.ArgumentNullException Thrown when the source is null System.InvalidOperationException Thrown when the source if of length 0 | Improve this Doc View Source SampleVariance<T>(IEnumerable<T>, Func<T, Double>) A generic overload of the SampleVariance(IEnumerable<Double>) method. This method will call the SampleVariance(IEnumerable<Double>) overload. Declaration public static double SampleVariance<T>(this IEnumerable<T> numbers, Func<T, double> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> numbers The specified enumerable System.Func <T, System.Double > selector The numeral specifier Returns Type Description System.Double The sample variance of the source Type Parameters Name Description T The type of the enumerable | Improve this Doc View Source StandardizedScore(IEnumerable<Double>, Double) Calculates the standardized score (z-score or standard score) of the enumerable. Declaration public static double StandardizedScore(this IEnumerable<double> src, double elem) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Double > src The IEnumerable of type double System.Double elem The value of the element Returns Type Description System.Double The standardized score of the source Exceptions Type Condition System.ArgumentNullException Thrown when the source is null System.InvalidOperationException Thrown when the source if of length 0 | Improve this Doc View Source StandardizedScore<T>(IEnumerable<T>, Func<T, Double>, Double) A generic overload of the StandardizedScore(IEnumerable<Double>, Double) method. This method will call the StandardizedScore(IEnumerable<Double>, Double) overload. Declaration public static double StandardizedScore<T>(this IEnumerable<T> numbers, Func<T, double> selector, double elem) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> numbers The specified enumerable System.Func <T, System.Double > selector The numeral specifier System.Double elem The value of the element Returns Type Description System.Double The standardized score of the source Type Parameters Name Description T The type of the enumerable | Improve this Doc View Source UpperQuartile(IEnumerable<Double>) Finds the upper quartile of the enumerable. Declaration public static double UpperQuartile(this IEnumerable<double> src) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Double > src The IEnumerable of type double Returns Type Description System.Double The upper quartile of the source Exceptions Type Condition System.ArgumentNullException Thrown when the source is null System.InvalidOperationException Thrown when the source is of size 0 InsufficientDataSetException Thrown when the data set is not large enough to calculate an upper quartile | Improve this Doc View Source UpperQuartile<T>(IEnumerable<T>, Func<T, Double>) A generic overload of the UpperQuartile(IEnumerable<Double>) method. This method will call the UpperQuartile(IEnumerable<Double>) overload. Declaration public static double UpperQuartile<T>(this IEnumerable<T> numbers, Func<T, double> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> numbers The specified enumerable System.Func <T, System.Double > selector The numeral specifier Returns Type Description System.Double The upper quartile of the source Type Parameters Name Description T The type of the enumerable"
  },
  "api/Ampere.Statistics.html": {
    "href": "api/Ampere.Statistics.html",
    "title": "Namespace Ampere.Statistics",
    "keywords": "Namespace Ampere.Statistics Classes EnumerableStats A static utility class for calculating a variety of statistics based on IEnumerables. Moreover, generic overload methods exist to simplify calculating statistics of object enumerables containing numeric properties. InsufficientDataSetException An exception that is thrown when the data set is not large enough to compute a statistic. NoModeException An exception that is thrown when no Mode exists in the data set."
  },
  "api/Ampere.Statistics.InsufficientDataSetException.html": {
    "href": "api/Ampere.Statistics.InsufficientDataSetException.html",
    "title": "Class InsufficientDataSetException",
    "keywords": "Class InsufficientDataSetException An exception that is thrown when the data set is not large enough to compute a statistic. Inheritance System.Object System.Exception InsufficientDataSetException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Ampere.Statistics Assembly : Ampere.dll Syntax [Serializable] public class InsufficientDataSetException : Exception, ISerializable Constructors | Improve this Doc View Source InsufficientDataSetException() Creates a new InsufficientDataSetException. Declaration public InsufficientDataSetException() | Improve this Doc View Source InsufficientDataSetException(SerializationInfo, StreamingContext) Creates a new overloaded InsufficientDataSetException containing a System.Runtime.Serialization.SerializationInfo instance and a System.Runtime.Serialization.StreamingContext instance. Declaration protected InsufficientDataSetException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The SerializationInfo instance System.Runtime.Serialization.StreamingContext context The StreamingContext instance | Improve this Doc View Source InsufficientDataSetException(String) Creates a new overloaded InsufficientDataSetException containing a message. Declaration public InsufficientDataSetException(string message) Parameters Type Name Description System.String message The message of this exception type | Improve this Doc View Source InsufficientDataSetException(String, Exception) Creates a new overloaded InsufficientDataSetException containing a message and an inner Exception. Declaration public InsufficientDataSetException(string message, Exception inner) Parameters Type Name Description System.String message The message of this exception type System.Exception inner The inner Exception Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Ampere.Statistics.NoModeException.html": {
    "href": "api/Ampere.Statistics.NoModeException.html",
    "title": "Class NoModeException",
    "keywords": "Class NoModeException An exception that is thrown when no Mode exists in the data set. Inheritance System.Object System.Exception NoModeException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Ampere.Statistics Assembly : Ampere.dll Syntax [Serializable] public class NoModeException : Exception, ISerializable Constructors | Improve this Doc View Source NoModeException() Creates a new NoModeException. Declaration public NoModeException() | Improve this Doc View Source NoModeException(SerializationInfo, StreamingContext) Creates a new overloaded NoModeException containing a System.Runtime.Serialization.SerializationInfo instance and a System.Runtime.Serialization.StreamingContext instance. Declaration protected NoModeException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The SerializationInfo instance System.Runtime.Serialization.StreamingContext context The StreamingContext instance | Improve this Doc View Source NoModeException(String) Creates a new overloaded NoModeException containing a message. Declaration public NoModeException(string message) Parameters Type Name Description System.String message The message of this exception type | Improve this Doc View Source NoModeException(String, Exception) Creates a new overloaded NoModeException containing a message and an inner Exception. Declaration public NoModeException(string message, Exception inner) Parameters Type Name Description System.String message The message of this exception type System.Exception inner The inner Exception Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Ampere.StringUtils.html": {
    "href": "api/Ampere.StringUtils.html",
    "title": "Namespace Ampere.StringUtils",
    "keywords": "Namespace Ampere.StringUtils Classes StringUtils A static utility class for string extension methods including other string manipulation classes such as StringBuilder and StringBuffer."
  },
  "api/Ampere.StringUtils.StringUtils.html": {
    "href": "api/Ampere.StringUtils.StringUtils.html",
    "title": "Class StringUtils",
    "keywords": "Class StringUtils A static utility class for string extension methods including other string manipulation classes such as StringBuilder and StringBuffer. Inheritance System.Object StringUtils Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Ampere.StringUtils Assembly : Ampere.dll Syntax public static class StringUtils Methods | Improve this Doc View Source AppendFromEnumerable(StringBuilder, IEnumerable<String>) Appends the contents of a string enumerable. Declaration public static StringBuilder AppendFromEnumerable(this StringBuilder sb, IEnumerable<string> enumerable) Parameters Type Name Description System.Text.StringBuilder sb The StringBuilder instance System.Collections.Generic.IEnumerable < System.String > enumerable The enumerable to append from Returns Type Description System.Text.StringBuilder The StringBuilder instance | Improve this Doc View Source AppendFromEnumerable<T>(StringBuilder, IEnumerable<T>, Func<T, String>) Appends the contents of an enumerable of generic objects provided a delegate to identify the string property. Declaration public static StringBuilder AppendFromEnumerable<T>(this StringBuilder sb, IEnumerable<T> enumerable, Func<T, string> func) Parameters Type Name Description System.Text.StringBuilder sb The StringBuilder instance System.Collections.Generic.IEnumerable <T> enumerable The enumerable to append from System.Func <T, System.String > func The function specifying what item should be appended Returns Type Description System.Text.StringBuilder The StringBuilder instance Type Parameters Name Description T The type of the enumerable | Improve this Doc View Source AppendIf(StringBuilder, String, Boolean) A StringBuilder extension to append to the StringBuilder if and only if a condition is met. Declaration public static StringBuilder AppendIf(this StringBuilder sb, string str, bool condition) Parameters Type Name Description System.Text.StringBuilder sb The StringBuilder instance System.String str The string to append System.Boolean condition The condition to meet in order for the append to occur Returns Type Description System.Text.StringBuilder The StringBuilder instance | Improve this Doc View Source AppendLineFromEnumerable(StringBuilder, IEnumerable<String>) Appends the contents of a string enumerable. This function also adds the appropriate line terminator at the end of the StringBuilder instance. Declaration public static StringBuilder AppendLineFromEnumerable(this StringBuilder sb, IEnumerable<string> enumerable) Parameters Type Name Description System.Text.StringBuilder sb The StringBuilder instance System.Collections.Generic.IEnumerable < System.String > enumerable The enumerable to append from Returns Type Description System.Text.StringBuilder The StringBuilder instance | Improve this Doc View Source AppendLineFromEnumerable<T>(StringBuilder, IEnumerable<T>, Func<T, String>) Appends the contents of an enumerable of generic objects provided a delegate to identify the string property. This function also adds the appropriate line terminator at the end of the StringBuilder instance. Declaration public static StringBuilder AppendLineFromEnumerable<T>(this StringBuilder sb, IEnumerable<T> enumerable, Func<T, string> func) Parameters Type Name Description System.Text.StringBuilder sb The StringBuilder instance System.Collections.Generic.IEnumerable <T> enumerable The enumerable to append from System.Func <T, System.String > func The function specifying what item should be appended Returns Type Description System.Text.StringBuilder The StringBuilder instance Type Parameters Name Description T The type of the enumerable | Improve this Doc View Source CharToString(IEnumerable<Char>) Converts a System.Collections.Generic.IEnumerable<T> to a string Declaration public static string CharToString(IEnumerable<char> charEnumerable) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Char > charEnumerable The System.Collections.Generic.IEnumerable<T> Returns Type Description System.String The converted string Exceptions Type Condition System.ArgumentNullException Thrown when charEnumerable is null | Improve this Doc View Source Chomp(String) Creates a string from the first character of the string to the first whitespace. Declaration public static string Chomp(this string str) Parameters Type Name Description System.String str The string to be chomped Returns Type Description System.String The string retaining the first word Exceptions Type Condition System.ArgumentNullException Thrown when str is null | Improve this Doc View Source ChompAfter(String, Int32) Creates a string from the first character of the string to the nth whitespace that is specified. Declaration public static string ChompAfter(this string str, int spaces) Parameters Type Name Description System.String str The string to be chomped System.Int32 spaces The amount of white space to chomp after Returns Type Description System.String The string retaining the chomped word Exceptions Type Condition System.ArgumentNullException Thrown when str is null | Improve this Doc View Source ContainsDigits(String) Checks if a given string contains any digits. Declaration public static bool ContainsDigits(this string str) Parameters Type Name Description System.String str The string to be used Returns Type Description System.Boolean True if the string contains any digits, false otherwise Exceptions Type Condition System.ArgumentNullException Thrown when str is null | Improve this Doc View Source ContainsDuplicateChars(String) Checks whether a string contains duplicate characters. Declaration public static bool ContainsDuplicateChars(this string str) Parameters Type Name Description System.String str The string to be used Returns Type Description System.Boolean True if their are duplicate characters. False, otherwise Exceptions Type Condition System.ArgumentNullException Thrown when str is null | Improve this Doc View Source ContainsDuplicateStrings(String, String) Checks whether a string contains duplicate inner strings. Declaration public static bool ContainsDuplicateStrings(this string str, string arg) Parameters Type Name Description System.String str The string to be used System.String arg The inner string to search for duplicates Returns Type Description System.Boolean True if their are duplicate inner strings. False, otherwise Exceptions Type Condition System.ArgumentNullException Thrown when str is null System.ArgumentNullException Thrown when arg is null | Improve this Doc View Source CountLetters(String, Char) Counts how many times a given letter appears in a string. Declaration public static int CountLetters(this string str, char letter) Parameters Type Name Description System.String str The string to be used System.Char letter The specific letter to search Returns Type Description System.Int32 Exceptions Type Condition System.ArgumentNullException Thrown when str is null | Improve this Doc View Source CountWords(String) Counts the number of words in a string. Declaration public static int CountWords(this string str) Parameters Type Name Description System.String str The string to be used Returns Type Description System.Int32 The number of words in the string Exceptions Type Condition System.ArgumentNullException Thrown when str is null | Improve this Doc View Source IsPalindrome(String, Boolean) Checks if a given string is a palindrome. Declaration public static bool IsPalindrome(this string str, bool ignoreCase = false) Parameters Type Name Description System.String str The string to be used System.Boolean ignoreCase Whether case should be ignored Returns Type Description System.Boolean True if the string is a palindrome Exceptions Type Condition System.ArgumentNullException Thrown when str is null | Improve this Doc View Source IsStrictlyDecreasing(String, Boolean) Checks if each character in a string is lexicographically smaller than the previous character. Declaration public static bool IsStrictlyDecreasing(this string str, bool ignoreCase = false) Parameters Type Name Description System.String str The string to be used System.Boolean ignoreCase Whether case should be ignored Returns Type Description System.Boolean True if the string strictly increases Exceptions Type Condition System.ArgumentNullException Thrown when str is null | Improve this Doc View Source IsStrictlyIncreasing(String, Boolean) Checks if each character in a string is lexicographically greater than the previous character. Declaration public static bool IsStrictlyIncreasing(this string str, bool ignoreCase = false) Parameters Type Name Description System.String str The string to be used System.Boolean ignoreCase Whether case should be ignored Returns Type Description System.Boolean True if the string strictly increases Exceptions Type Condition System.ArgumentNullException Thrown when str is null | Improve this Doc View Source IsSystemDateTime(String, String) Checks if a given string is a valid date used by System.DateTime Declaration public static bool IsSystemDateTime(this string date, string formattingRegex) Parameters Type Name Description System.String date The string to be used System.String formattingRegex The date format regex Returns Type Description System.Boolean True if the string is a valid date recognized by System.DateTime Exceptions Type Condition System.ArgumentNullException Thrown when date is null System.ArgumentNullException Thrown when formattingRegex is null | Improve this Doc View Source IsValidUri(String) Checks if a given string is a valid URI. This checks both HTTP and HTTPS URLs. Declaration public static bool IsValidUri(string uri) Parameters Type Name Description System.String uri The string to be used Returns Type Description System.Boolean True if the URI is valid Exceptions Type Condition System.ArgumentNullException Thrown when uri is null | Improve this Doc View Source IsWellFormed(String) Checks if a string is well formed. A string is well formed if for every alphabet-recognized character, there is an appropriate closing character. For every inner string, with the exception of characters not defined in the alphabet, in between an opening and closing character, if that string were to be split in half, each half would be a mirror image of each other. A well formed string consists of the default alphabet consists of the following characters: '(',')','{','}','[',']','<','>'. Declaration public static bool IsWellFormed(this string str) Parameters Type Name Description System.String str the string to check Returns Type Description System.Boolean whether the string is well formed Examples The following demonstrates how to use the IsWellFormed(String) method. Exceptions Type Condition System.ArgumentNullException Thrown when str is null | Improve this Doc View Source IsWellFormed(String, Dictionary<Char, Char>) Checks if a string is well formed. A string is well formed if for every alphabet-recognized character, there is an appropriate closing character. For every inner string, with the exception of characters not defined in the alphabet, in between an opening and closing character, if that string were to be split in half, each half would be a mirror image of each other. A well formed string consists of the user specified Dictionary of key-value pairs, where the key is the opening character and the value is the closing character. Declaration public static bool IsWellFormed(this string str, Dictionary<char, char> alphabet) Parameters Type Name Description System.String str the string to check System.Collections.Generic.Dictionary < System.Char , System.Char > alphabet the dictionary of key value pairs - where the key represents the opening character and the value represents the closing character Returns Type Description System.Boolean whether the string is well formed Examples The following demonstrates how to use the IsWellFormed(String, Dictionary<Char, Char>) method. Exceptions Type Condition System.ArgumentNullException Thrown when str is null | Improve this Doc View Source LongestCommonPrefix(IEnumerable<String>, Boolean) Finds the longest common prefix of a group of strings of type System.Collections.Generic.IEnumerable<T> Declaration public static string LongestCommonPrefix(this IEnumerable<string> strs, bool ignoreCase = false) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > strs A group of strings to find the common prefix System.Boolean ignoreCase A flag whether to ignore case Returns Type Description System.String The longest common prefix | Improve this Doc View Source OrderByLength(IEnumerable<String>) Orders an enumerable by its length in ascending order (natural order). Declaration public static IEnumerable<string> OrderByLength(this IEnumerable<string> si) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > si the System.Collections.Generic.IEnumerable<T> si Returns Type Description System.Collections.Generic.IEnumerable < System.String > An ordered enumerable Exceptions Type Condition System.ArgumentNullException Thrown when si is null | Improve this Doc View Source RemoveAll(String, Boolean, IEnumerable<Char>[]) Removes all instances of any number of characters from a specified string. Declaration public static string RemoveAll(this string str, bool ignoreCase = false, params IEnumerable<char>[] args) Parameters Type Name Description System.String str The string to be used System.Boolean ignoreCase Whether case should be ignored System.Collections.Generic.IEnumerable < System.Char >[] args The characters which will be removed Returns Type Description System.String The string with all characters in args removed Exceptions Type Condition System.ArgumentNullException Thrown when str is null System.ArgumentNullException Thrown when args is null | Improve this Doc View Source RemoveAll(String, Boolean, IEnumerable<String>[]) Removes all instances of any number of strings from a specified string. Declaration public static string RemoveAll(this string str, bool ignoreCase = false, params IEnumerable<string>[] args) Parameters Type Name Description System.String str The string to be used System.Boolean ignoreCase Whether case should be ignored System.Collections.Generic.IEnumerable < System.String >[] args The characters which will be removed Returns Type Description System.String The string with all characters in args removed Exceptions Type Condition System.ArgumentNullException Thrown when str is null System.ArgumentNullException Thrown when args is null | Improve this Doc View Source ReplaceAt(String, Int32, Char) Replaces a character at a specific index in a string, only once. Declaration public static string ReplaceAt(this string str, int index, char c) Parameters Type Name Description System.String str The string to be used System.Int32 index The index to replace c System.Char c The character to replace Returns Type Description System.String | Improve this Doc View Source Reverse(String) Reverses a string from left to right order while maintaining case sensitivity. Declaration public static string Reverse(this string str) Parameters Type Name Description System.String str The string to be reversed Returns Type Description System.String The reversed string Exceptions Type Condition System.ArgumentNullException Thrown when str is null | Improve this Doc View Source Shuffle(String, Boolean) Shuffle's characters in a string. The methodology used to generate random indices used for shuffling is cryptographically strong. Due to this nature, there is no guarantee that the return string will be entirely different than the original. Declaration public static string Shuffle(this string str, bool preserveSpaces = false) Parameters Type Name Description System.String str The string to be shuffled System.Boolean preserveSpaces Determines whether to shuffle spaces or not Returns Type Description System.String The shuffled string Exceptions Type Condition System.ArgumentNullException Thrown when the str is null | Improve this Doc View Source Substring(String, Int32, Int32) Performs a Substring given a starting and ending index, similar to Java. The operation is performed mathematically as [startIndex, endIndex). Declaration public static string Substring(this string str, int startIndex, int endIndex) Parameters Type Name Description System.String str The given string System.Int32 startIndex The inclusive starting index of str System.Int32 endIndex The exclusive ending index of str Returns Type Description System.String A string that is equivalent to the substring that begins at startIndex in this instance, or Empty if startIndex is equal to the length of this instance."
  },
  "articles/AmpereReleases.html": {
    "href": "articles/AmpereReleases.html",
    "title": "Ampere Releases",
    "keywords": "Ampere Releases Future changelogs between full versions will be here."
  },
  "index.html": {
    "href": "index.html",
    "title": "Introduction",
    "keywords": "Introduction Ampere is a robust .NET utility library written in C#. It's main purpose is to make developement more productive and easier. Execution Add the dependency to your project with NuGet You can install the latest release with NuGet by running: Install from GitHub Releases The latest zip release can be found under the Github Releases Page . You can use the Ampere.dll binary and add it as a dependency within your Visual Studio project. Contributing We are actively looking for contributors to work on all aspects of the code base ― from documentation to building a variety of utilities. For more information onn how to contribute, view our CONTRIBUTING.md Building Ampere Prerequisites: Visual Studio 2017 or Later OR VSCode .NET 5 (with .NET Core) The default language setting for this project is C# 9.0. The project can be built using dotnet build and the output will display the AssemblyPath . Documentation There are two components to Ampere documentation: Assembly Documentation Miscellaneous Documentation (README.md, Wiki's, Discussions, etc...) All Ampere methods are documented using .NET XML documentation. This is compiled using DocFX with the docfx.json file under the DocFX folder . DocFX creates static HTML pages which are used by https://powerplug.me . Lastly, as a fluid repository, many files change and constantly need to be documented and updated. Roadmap There are two planned releases - the latest being by July 2021 : 0.1.0 - First full release of Ampere 0.2.0 - Full release with with more statistics oriented classes to analyze data. State Ampere is a very fluid project and you may encounter issues during execution, especially for preleases. To report an issue visit, Ampere Issues , or to contribute, view the contribution guidelines. Licensing Ampere is licensed under the GNU General Public License v3.0 . The GNU General Public License is a free, copyleft license for software and other kinds of works. Acknowledgements Thanks especially to my fellow friends and contributors Sam Yuen Lok Kwong"
  }
}
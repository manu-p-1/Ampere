<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ampere</name>
    </assembly>
    <members>
        <member name="T:Ampere.AmpFile.FileUtils">
            <summary>
            A static class for File utility functions
            </summary>
        </member>
        <member name="M:Ampere.AmpFile.FileUtils.WriteLine(System.IO.FileInfo,System.String)">
            <summary>
            Appends a string value into the file.
            </summary>
            <param name="fileInfo">The FileInfo instance to write the value to</param>
            <param name="value">The string value to write</param>
        </member>
        <member name="M:Ampere.AmpFile.FileUtils.ReplaceAll(System.IO.FileInfo,System.String,System.String)">
            <summary>
            Replaces all instances of a specific value from a file with another replacement value.
            </summary>
            <param name="fileInfo">The FileInfo instance to write the value to</param>
            <param name="oldValue">The value to replace</param>
            <param name="replacementValue">The replacement value</param>
        </member>
        <member name="M:Ampere.AmpFile.FileUtils.ReplaceAllByLine(System.IO.FileInfo,System.String,System.String)">
            <summary>
            Replaces all instances of a specific value from a file with another replacement value if and only if
            the old value is solely in one line.
            </summary>
            <param name="fileInfo">The FileInfo instance to write the value to</param>
            <param name="oldValue">The value to replace</param>
            <param name="replacementValue">The replacement value</param>
        </member>
        <member name="M:Ampere.AmpFile.FileUtils.ReplaceAllInLine(System.IO.FileInfo,System.String,System.String,System.Int32)">
            <summary>
            Replaces all instances of a specific value from a file with another replacement value from a specified line
            </summary>
            <param name="fileInfo">The FileInfo instance to write the value to</param>
            <param name="oldValue">The value to replace</param>
            <param name="replacementValue">The replacement value</param>
            <param name="line">The line number to replace from</param>
        </member>
        <member name="M:Ampere.AmpFile.FileUtils.ReplaceInLines(System.IO.FileInfo,System.Collections.Generic.Dictionary{System.Collections.Generic.KeyValuePair{System.String,System.String},System.Int32})">
            <summary>
            Replaces all instances of a specific value from a file with another replacement value from a specified line.
            This overload facilitates the replacement through a Dictionary where the key's is an instance of
            <see cref="T:System.Collections.Generic.KeyValuePair`2"/> and the value is an int. This allows for unique replacements to occur
            in more than one line
            </summary>
            <param name="fileInfo">The FileInfo instance to write the value to</param>
            <param name="replacementDict">A Dictionary of replacement values and line numbers</param>
        </member>
        <member name="M:Ampere.AmpFile.FileUtils.ReplaceLine(System.IO.FileInfo,System.String,System.Int32)">
            <summary>
            Replaces an entire line with a replacement value.
            </summary>
            <param name="fileInfo">The FileInfo instance to write the value to</param>
            <param name="replacementValue">The replacement value</param>
            <param name="line">The line number to replace from</param>
        </member>
        <member name="M:Ampere.AmpFile.FileUtils.ReplaceLines(System.IO.FileInfo,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Replace an entire line with a replacement value. This overload uses a Dictionary of replacement values
            and line numbers to replace more than one line. 
            </summary>
            <param name="fileInfo">The FileInfo instance to write the value to</param>
            <param name="replacementValueLine">A Dictionary of replacement values and line number</param>
        </member>
        <member name="M:Ampere.AmpFile.FileUtils.RemoveFromEachLine(System.IO.FileInfo,System.String)">
            <summary>
            Removes all instances of a specific value from a file if and only if the value is solely in one line.
            </summary>
            <param name="fileInfo">The FileInfo instance to write the value to</param>
            <param name="valToRemove">The value to remove</param>
        </member>
        <member name="M:Ampere.AmpFile.FileUtils.RemoveLine(System.IO.FileInfo,System.Int32)">
            <summary>
            Removes a specific line number from a file.
            </summary>
            <param name="fileInfo">The FileInfo instance to write the value to</param>
            <param name="line">The line number to remove</param>
        </member>
        <member name="M:Ampere.AmpFile.FileUtils.RemoveLines(System.IO.FileInfo,System.Int32[])">
            <summary>
            Removes a variable argument number of lines from a file.
            </summary>
            <param name="fileInfo">The FileInfo instance to write the value to</param>
            <param name="lines">The line numbers to remove</param>
        </member>
        <member name="M:Ampere.AmpFile.FileUtils.FindInFile(System.IO.FileInfo,System.Func{System.String,System.Boolean})">
            <summary>
            Returns the line of the matched predicate in the file. If the predicate is not found,
            -1 is returned.
            </summary>
            <param name="fileInfo">The FileInfo instance to read from</param>
            <param name="predicate">The function predicate to find in the file</param>
            <returns></returns>
        </member>
        <member name="M:Ampere.AmpFile.FileUtils.GetValueAtLine(System.IO.FileInfo,System.Int32)">
            <summary>
            Returns the value found at a line number.
            </summary>
            <param name="fileInfo">The FileInfo instance to read from</param>
            <param name="line">The line number to find</param>
            <returns></returns>
        </member>
        <member name="M:Ampere.AmpFile.FileUtils.GetDirectorySize(System.String)">
            <summary>
            Returns the size of a directory in bytes, given an abstract file path.
            </summary>
            <param name="dirPath">The path to the directory</param>
            <returns>The size of the directory in bytes</returns>
        </member>
        <member name="M:Ampere.AmpFile.FileUtils.GetFileSize(System.String)">
            <summary>
            Returns the size of file in bytes, given an abstract file path.
            </summary>
            <param name="filePath">The path to the file</param>
            <returns>The size of the file in bytes</returns>
        </member>
        <member name="M:Ampere.AmpFile.FileUtils.GetRootPath">
            <summary>
            Returns a pathname to the root directory of the System.
            </summary>
            <returns>A pathname to the root directory of the System</returns>
        </member>
        <member name="M:Ampere.AmpFile.FileUtils.GetUserPath">
            <summary>
            Returns a pathname to the user's profile folder.
            </summary>
            <returns>A pathname to the user's profile folder</returns>
        </member>
        <member name="T:Ampere.AmpMath.IMatrixer">
            <summary>
            Represents the minimum requirements to create a Matrix.
            </summary>
        </member>
        <member name="P:Ampere.AmpMath.IMatrixer.Values">
            <summary>
            Property representing the values of the IMatrixer as a generic 2D array.
            </summary>
        </member>
        <member name="P:Ampere.AmpMath.IMatrixer.Rows">
            <summary>
            Property for the number of Rows in and IMatrixer.
            </summary>
        </member>
        <member name="P:Ampere.AmpMath.IMatrixer.Cols">
            <summary>
            Property for the number of columns in an IMatrixer.
            </summary>
        </member>
        <member name="M:Ampere.AmpMath.IMatrixer.Transpose">
            <summary>
            Transposes the contents of the Matrix and returns a new Matrix.
            </summary>
            <returns>A new Matrix containing the transposed version of the original</returns>
        </member>
        <member name="M:Ampere.AmpMath.IMatrixer.EqualDimension(Ampere.AmpMath.IMatrixer)">
            <summary>
            Returns whether this instance is the same dimension as another IMatrixer instance.
            Same dimension means that the rows and the columns of both instances are the same.
            </summary>
            <returns>A new Matrix containing the transposed version of the original</returns>
        </member>
        <member name="M:Ampere.AmpMath.IMatrixer.EqualDimension(Ampere.AmpMath.IMatrixer,Ampere.AmpMath.IMatrixer)">
            <summary>
            Returns whether two <see cref="T:Ampere.AmpMath.Matrix"/> instances are of the same dimension.
            Same dimension means that the rows and the columns of both instances are the same.
            </summary>
            <param name="one">The first IMatrixer instance</param>
            <param name="two">The second IMatrixer instance</param>
            <returns></returns>
        </member>
        <member name="M:Ampere.AmpMath.IMatrixer.IsRowVector">
            <summary>
            Returns whether the number of Rows equals 1
            </summary>
            <returns>A bool specifying whether the number of Rows equals 1</returns>
        </member>
        <member name="M:Ampere.AmpMath.IMatrixer.IsColumnVector">
            <summary>
            Returns whether the number of Columns equals 1.
            </summary>
            <returns>A bool specifying whether the number of Columns equals 1</returns>
        </member>
        <member name="M:Ampere.AmpMath.IMatrixer.IsSquareVector">
            <summary>
            Returns whether the number of Rows equals the number of Columns.
            </summary>
            <returns>A bool specifying whether the number of Rows equals the number of columns</returns>
        </member>
        <member name="M:Ampere.AmpMath.IMatrixer.ToString">
            <summary>
            Returns a string representation of an IMatrixer.
            </summary>
            <returns>A string representation of the IMatrixer</returns>
        </member>
        <member name="T:Ampere.AmpMath.Matrix">
            <summary>
            A class representing a mathematical Matrix. Creates a rectangular
            array of rows and columns with numbers as elements. The Matrix
            class includes mathematical matrix operations to manipulate it.
            </summary>
        </member>
        <member name="P:Ampere.AmpMath.Matrix.Values">
            <inheritdoc cref="T:Ampere.AmpMath.IMatrixer"/>
        </member>
        <member name="P:Ampere.AmpMath.Matrix.Rows">
            <inheritdoc cref="T:Ampere.AmpMath.IMatrixer"/>
        </member>
        <member name="P:Ampere.AmpMath.Matrix.Cols">
            <inheritdoc cref="T:Ampere.AmpMath.IMatrixer"/>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates an instance of a Matrix given rows and columns.
            </summary>
            <param name="rows">The number of rows in this Matrix</param>
            <param name="cols">The number of columns in this Matrix</param>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.#ctor(System.Double[0:,0:])">
            <summary>
            Creates an instance of a Matrix given a 2D array. 
            </summary>
            <param name="matrix">A 2D array of doubles</param>
        </member>
        <member name="P:Ampere.AmpMath.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            The indexer to add values for each row and column.
            </summary>
            <param name="row">The row to insert the value</param>
            <param name="col">The column to insert the value</param>
            <returns></returns>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.Transpose">
            <inheritdoc cref="T:Ampere.AmpMath.IMatrixer"/>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.EqualDimension(Ampere.AmpMath.IMatrixer)">
            <summary>
            Returns whether two <see cref="T:Ampere.AmpMath.Matrix"/> instances are of the same dimension.
            Same dimension means that the rows and the columns of both instances are the same. This
            overload is an instance method of the Matrix class.
            </summary>
            <param name="otherMatrix"></param>
            <returns></returns>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.op_Addition(Ampere.AmpMath.Matrix,System.Double)">
            <summary>
            An operator method to add a matrix instance with a scalar.
            </summary>
            <param name="m">The Matrix instance</param>
            <param name="scalar">The scalar value</param>
            <returns>The Matrix after the scalar has been applied</returns>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.op_Addition(System.Double,Ampere.AmpMath.Matrix)">
            <summary>
            An operator method to add a matrix instance with a scalar.
            </summary>
            <param name="m">The Matrix instance</param>
            <param name="scalar">The scalar value</param>
            <returns>The Matrix after the scalar has been applied</returns>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.op_Subtraction(Ampere.AmpMath.Matrix,System.Double)">
            <summary>
            An operator method to subtract a matrix instance with a scalar.
            </summary>
            <param name="m">The Matrix instance</param>
            <param name="scalar">The scalar value</param>
            <returns>The Matrix after the scalar has been applied</returns>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.op_Subtraction(System.Double,Ampere.AmpMath.Matrix)">
            <summary>
            An operator method to subtract a matrix instance with a scalar.
            </summary>
            <param name="m">The Matrix instance</param>
            <param name="scalar">The scalar value</param>
            <returns>The Matrix after the scalar has been applied</returns>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.op_Multiply(Ampere.AmpMath.Matrix,System.Double)">
            <summary>
            An operator method to multiply a matrix instance with a scalar.
            </summary>
            <param name="m">The Matrix instance</param>
            <param name="scalar">The scalar value</param>
            <returns>The Matrix after the scalar has been applied</returns>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.op_Multiply(System.Double,Ampere.AmpMath.Matrix)">
            <summary>
            An operator method to multiply a matrix instance with a scalar.
            </summary>
            <param name="m">The Matrix instance</param>
            <param name="scalar">The scalar value</param>
            <returns>The Matrix after the scalar has been applied</returns>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.op_Division(Ampere.AmpMath.Matrix,System.Double)">
            <summary>
            An operator method to divide a matrix instance with a scalar. This may result in a Divide By Zero exception
            if the matrix contains a value of 0.
            </summary>
            <param name="m">The Matrix instance</param>
            <param name="scalar">The scalar value</param>
            <returns>The Matrix after the scalar has been applied</returns>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.op_Division(System.Double,Ampere.AmpMath.Matrix)">
            <summary>
            An operator method to divide a matrix instance with a scalar. This may result in a Divide By Zero exception
            if the matrix contains a value of 0.
            </summary>
            <param name="m">The Matrix instance</param>
            <param name="scalar">The scalar value</param>
            <returns>The Matrix after the scalar has been applied</returns>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.op_Modulus(Ampere.AmpMath.Matrix,System.Double)">
            <summary>
            An operator method to mod a matrix instance with a scalar.
            </summary>
            <param name="m">The Matrix instance</param>
            <param name="scalar">The scalar value</param>
            <returns>The Matrix after the scalar has been applied</returns>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.op_Modulus(System.Double,Ampere.AmpMath.Matrix)">
            <summary>
            An operator method to mod a matrix instance with a scalar.
            </summary>
            <param name="m">The Matrix instance</param>
            <param name="scalar">The scalar value</param>
            <returns>The Matrix after the scalar has been applied</returns>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.op_LogicalNot(Ampere.AmpMath.Matrix)">
            <summary>
            An operator method to negate a matrix. Every value in the Matrix provided will be negated.
            </summary>
            <param name="m">The Matrix instance</param>
            <returns>The Matrix after the scalar has been applied</returns>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.op_Addition(Ampere.AmpMath.Matrix,Ampere.AmpMath.Matrix)">
            <summary>
            An operator method to add two Matrix instances.
            </summary>
            <param name="one">The first Matrix instance</param>
            <param name="two">The second Matrix instance</param>
            <returns>A new Matrix instance containing the added values</returns>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.op_Subtraction(Ampere.AmpMath.Matrix,Ampere.AmpMath.Matrix)">
            <summary>
            An operator method to subtract two Matrix instances.
            </summary>
            <param name="one">The first Matrix instance</param>
            <param name="two">The second Matrix instance</param>
            <returns>A new Matrix instance containing the added values</returns>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.op_Multiply(Ampere.AmpMath.Matrix,Ampere.AmpMath.Matrix)">
            <summary>
            An operator method to compute the dot product of two Matrix instances.
            </summary>
            <param name="one">The first Matrix instance</param>
            <param name="two">The second Matrix instance</param>
            <returns>A new Matrix instance containing dot product</returns>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.op_Equality(Ampere.AmpMath.Matrix,Ampere.AmpMath.Matrix)">
            <summary>
            An operator method to compare two Matrix instances for equality. Equality is defined by structure and values, meaning that
            both matrices must have an equal dimension and every value in both matrices must be equal.
            </summary>
            <param name="one">The first Matrix instance</param>
            <param name="two">The second Matrix instance</param>
            <returns>A bool representing whether the two Matrix instances are equal</returns>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.op_Inequality(Ampere.AmpMath.Matrix,Ampere.AmpMath.Matrix)">
            <summary>
            An operator method to compare two Matrix instances for equality. Equality is defined by structure and values, meaning that
            both matrices must have an equal dimension and every value in both matrices must be equal.
            </summary>
            <param name="one">The first Matrix instance</param>
            <param name="two">The second Matrix instance</param>
            <returns>A new Matrix instance containing the added values</returns>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.Add(Ampere.AmpMath.Matrix,System.Double)">
            <summary>
            A wrapper for the operator method to add a matrix instance with a scalar.
            </summary>
            <param name="m">The Matrix instance</param>
            <param name="scalar">The scalar value</param>
            <returns>The Matrix after the scalar has been applied</returns>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.Add(Ampere.AmpMath.Matrix,Ampere.AmpMath.Matrix)">
            <summary>
            A wrapper for the operator method to add two Matrix instances.
            </summary>
            <param name="one">The first Matrix instance</param>
            <param name="two">The second Matrix instance</param>
            <returns>A new Matrix instance containing the added values</returns>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.Subtract(Ampere.AmpMath.Matrix,System.Double)">
            <summary>
            A wrapper for the operator method to subtract a matrix instance with a scalar.
            </summary>
            <param name="m">The Matrix instance</param>
            <param name="scalar">The scalar value</param>
            <returns>The Matrix after the scalar has been applied</returns>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.Subtract(Ampere.AmpMath.Matrix,Ampere.AmpMath.Matrix)">
            <summary>
            A wrapper for the operator method to subtract two Matrix instances.
            </summary>
            <param name="one">The first Matrix instance</param>
            <param name="two">The second Matrix instance</param>
            <returns>A new Matrix instance containing the added values</returns>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.Multiply(Ampere.AmpMath.Matrix,System.Double)">
            <summary>
            A wrapper for the operator method to multiply a matrix instance with a scalar.
            </summary>
            <param name="m">The Matrix instance</param>
            <param name="scalar">The scalar value</param>
            <returns>The Matrix after the scalar has been applied</returns>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.DotProduct(Ampere.AmpMath.Matrix,Ampere.AmpMath.Matrix)">
            <summary>
            A wrapper for the operator method to compute the dot product of two Matrix instances.
            </summary>
            <param name="one">The first Matrix instance</param>
            <param name="two">The second Matrix instance</param>
            <returns>A new Matrix instance containing dot product</returns>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.Divide(Ampere.AmpMath.Matrix,System.Double)">
            <summary>
            A wrapper for the operator method to divide a matrix instance with a scalar. This may result in a Divide By Zero exception
            if the matrix contains a value of 0.
            </summary>
            <param name="m">The Matrix instance</param>
            <param name="scalar">The scalar value</param>
            <returns>The Matrix after the scalar has been applied</returns>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.Mod(Ampere.AmpMath.Matrix,System.Double)">
            <summary>
            A wrapper for the operator method to mod a matrix instance with a scalar.
            </summary>
            <param name="m">The Matrix instance</param>
            <param name="scalar">The scalar value</param>
            <returns>The Matrix after the scalar has been applied</returns>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.Negate(Ampere.AmpMath.Matrix)">
            <summary>
            A wrapper for the operator method to negate a matrix. Every value in the Matrix provided will be negated.
            </summary>
            <param name="m">The Matrix instance</param>
            <returns>The Matrix after the scalar has been applied</returns>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.Equals(System.Object)">
            <summary>
            Compares an object to a Matrix instance. This will check for type first then calls the
            <see cref="M:Ampere.AmpMath.Matrix.Equals(Ampere.AmpMath.Matrix)"/> method.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>A bool representing whether the object is equal</returns>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.Equals(Ampere.AmpMath.Matrix)">
            <summary>
            A wrapper method for operator== method.
            </summary>
            <param name="other">The Matrix instance to check for equality</param>
            <returns>A bool representing whether the Matrix instance is equal</returns>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.GetHashCode">
            <inheritdoc cref="T:System.Object"/>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.IsRowVector">
            <inheritdoc cref="T:Ampere.AmpMath.IMatrixer"/>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.IsColumnVector">
            <inheritdoc cref="T:Ampere.AmpMath.IMatrixer"/>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.IsSquareVector">
            <inheritdoc cref="T:Ampere.AmpMath.IMatrixer"/>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.GetEnumerator">
            <summary>
            Returns an enumerator this Matrix containing every value. The iteration occurs through each row
            in the matrix.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> instance for the Matrix</returns>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns the non-generic Enumerator for the Matrix. This returns the generic <see cref="M:Ampere.AmpMath.Matrix.GetEnumerator"/> method
            under the hood.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> instance for the Matrix</returns>
        </member>
        <member name="M:Ampere.AmpMath.Matrix.ToString">
            <inheritdoc cref="T:Ampere.AmpMath.IMatrixer"/>
        </member>
        <member name="T:Ampere.AmpMath.MatrixPropertyException">
            <summary>
            An exception that occurs if a Matrix property is violated
            when examining certain properties at runtime.
            </summary>
        </member>
        <member name="M:Ampere.AmpMath.MatrixPropertyException.#ctor">
            <summary>
            Creates a new MatrixPropertyException.
            </summary>
        </member>
        <member name="M:Ampere.AmpMath.MatrixPropertyException.#ctor(System.String)">
            <summary>
            Creates a new overloaded MatrixPropertyException containing a message.
            </summary>
            <param name="message">The message of this exception type</param>
        </member>
        <member name="M:Ampere.AmpMath.MatrixPropertyException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new overloaded MatrixPropertyException containing a message and an inner Exception.
            </summary>
            <param name="message">The message of this exception type</param>
            <param name="inner">The inner Exception</param>
        </member>
        <member name="M:Ampere.AmpMath.MatrixPropertyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new overloaded MatrixPropertyException containing a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance
            and a <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance.
            </summary>
            <param name="info">The SerializationInfo instance</param>
            <param name="context">The StreamingContext instance</param>
        </member>
        <member name="T:Ampere.Base.Attributes.Beta">
            <summary>
            The BetaCmdlet attribute represents any Classes, Structs, Methods, Interfaces, or Enums which are functional,
            but may result in unintended behavior do to its "beta" state.
            </summary>
        </member>
        <member name="P:Ampere.Base.Attributes.Beta.Msg">
            <summary>
            The message attributed to this BetaCmdlet, if any.
            </summary>
        </member>
        <member name="F:Ampere.Base.Attributes.Beta.WarningMessage">
            <summary>
            The default warning message for this Attribute.
            </summary>
        </member>
        <member name="M:Ampere.Base.Attributes.Beta.#ctor">
            <summary>
            Creates a new BetaCmdlet with no message. 
            </summary>
        </member>
        <member name="M:Ampere.Base.Attributes.Beta.#ctor(System.String)">
            <summary>
            Creates a new BetaCmdlet with the specified message.
            </summary>
            <param name="msg">A message specifying or representing the state of the cmdlet</param>
        </member>
        <member name="T:Ampere.Base.IIndexable`2">
            <summary>
            Specifies an indexer with one dimension.
            </summary>
            <typeparam name="TKey">The element type of the key</typeparam>
            <typeparam name="TVal">The element type of the value</typeparam>
        </member>
        <member name="P:Ampere.Base.IIndexable`2.Item(`0)">
            <summary>
            The one dimension read/write indexer.
            </summary>
            <param name="key">The key to assign to the indexer</param>
            <returns>The TVal generic type</returns>
        </member>
        <member name="T:Ampere.Base.IIndexableReadOnly`2">
            <summary>
            Specifies a read-only indexer with one dimension.
            </summary>
            <typeparam name="TKey">The element type of the key</typeparam>
            <typeparam name="TVal">The element type of the value</typeparam>
        </member>
        <member name="P:Ampere.Base.IIndexableReadOnly`2.Item(`0)">
            <summary>
            The one dimension readonly indexer.
            </summary>
            <param name="key">The key to assign to the indexer</param>
            <returns>The TVal generic type</returns>
        </member>
        <member name="T:Ampere.Base.IIndexableDouble`2">
            <summary>
            Specifies an indexer with two dimensions.
            </summary>
            <typeparam name="TKey">The element type of the key</typeparam>
            <typeparam name="TVal">The element type of the value</typeparam>
        </member>
        <member name="P:Ampere.Base.IIndexableDouble`2.Item(`0,`0)">
            <summary>
            The two dimension read/write indexer.
            </summary>
            <param name="key">The first key to assign to the indexer</param>
            <param name="key2">The second key to assign to the indexer</param>
            <returns>The TVal generic type</returns>
        </member>
        <member name="T:Ampere.Base.IIndexableDoubleReadOnly`2">
            <summary>
            Specifies a read-only indexer with two dimensions.
            </summary>
            <typeparam name="TKey">The element type of the key</typeparam>
            <typeparam name="TVal">The element type of the value</typeparam>
        </member>
        <member name="P:Ampere.Base.IIndexableDoubleReadOnly`2.Item(`0,`0)">
            <summary>
            The two dimension readonly indexer.
            </summary>
            <param name="key">The first key to assign to the indexer</param>
            <param name="key2">The second key to assign to the indexer</param>
            <returns>The TVal generic type</returns>
        </member>
        <member name="T:Ampere.Base.IIndexableTriple`2">
            <summary>
            Specifies an indexer with three dimensions.
            </summary>
            <typeparam name="TKey">The element type of the key</typeparam>
            <typeparam name="TVal">The element type of the value</typeparam>
        </member>
        <member name="P:Ampere.Base.IIndexableTriple`2.Item(`0,`0,`0)">
            <summary>
            The two dimension read/write indexer.
            </summary>
            <param name="key">The first key to assign to the indexer</param>
            <param name="key2">The second key to assign to the indexer</param>
            <param name="key3">The third key to assign to the indexer</param>
            <returns>The TVal generic type</returns>
        </member>
        <member name="T:Ampere.Base.IIndexableTripleReadOnly`2">
            <summary>
            Specifies a read-only indexer with three dimensions.
            </summary>
            <typeparam name="TKey">The element type of the key</typeparam>
            <typeparam name="TVal">The element type of the value</typeparam>
        </member>
        <member name="P:Ampere.Base.IIndexableTripleReadOnly`2.Item(`0,`0,`0)">
            <summary>
            The third dimension readonly indexer.
            </summary>
            <param name="key">The first key to assign to the indexer</param>
            <param name="key2">The second key to assign to the indexer</param>
            <param name="key3">The third key to assign to the indexer</param>
            <returns>The TVal generic type</returns>
        </member>
        <member name="T:Ampere.Base.ImmutableRange`1">
            <inheritdoc cref="T:Ampere.Base.IRangify`1"/>
        </member>
        <member name="P:Ampere.Base.ImmutableRange`1.Minimum">
            <inheritdoc cref="T:Ampere.Base.IRangify`1"/>
        </member>
        <member name="P:Ampere.Base.ImmutableRange`1.Maximum">
            <inheritdoc cref="T:Ampere.Base.IRangify`1"/>
        </member>
        <member name="M:Ampere.Base.ImmutableRange`1.#ctor(`0,`0)">
            <summary>
            Creates a new instance of the ImmutableRange class. This class is immutable - for the mutable
            version, see <see cref="T:Ampere.Base.Range`1"/>
            </summary>
            <param name="minimum">The minimum value</param>
            <param name="maximum">The maximum value</param>
        </member>
        <member name="M:Ampere.Base.ImmutableRange`1.ToString">
            <inheritdoc cref="T:Ampere.Base.IRangify`1"/>
        </member>
        <member name="M:Ampere.Base.ImmutableRange`1.IsValid">
            <inheritdoc cref="T:Ampere.Base.IRangify`1"/>
        </member>
        <member name="M:Ampere.Base.ImmutableRange`1.ContainsValue(`0)">
            <inheritdoc cref="T:Ampere.Base.IRangify`1"/>
        </member>
        <member name="M:Ampere.Base.ImmutableRange`1.IsInsideRange(Ampere.Base.IRangify{`0})">
            <inheritdoc cref="T:Ampere.Base.IRangify`1"/>
        </member>
        <member name="M:Ampere.Base.ImmutableRange`1.ContainsRange(Ampere.Base.IRangify{`0})">
            <inheritdoc cref="T:Ampere.Base.IRangify`1"/>
        </member>
        <member name="T:Ampere.Base.IntRange">
            <summary>
            The range class represents a range of int values. Unlike other <see cref="T:Ampere.Base.IRangify`1"/> implementing classes,
            IntRange contains an <see cref="T:System.Collections.Generic.IEnumerator`1"/> of type int to enumerate through all of the values between
            the minimum and maximum ranges. By convention, both sides of the range should be inclusive values.
            </summary>
        </member>
        <member name="M:Ampere.Base.IntRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of IntRange, specifying the minimum and maximum values.
            </summary>
            <param name="minimum"></param>
            <param name="maximum"></param>
        </member>
        <member name="M:Ampere.Base.IntRange.GetEnumerator">
            <summary>
            Returns an instance of the IntRangeEnumerator that's used to enumerate through the range
            values of this instance.
            </summary>
            <returns>An instance of the IntRangeEnumerator class</returns>
        </member>
        <member name="M:Ampere.Base.IntRange.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an instance of the IntRangeEnumerator that's used to enumerate through the range
            values of this instance.
            </summary>
            <returns>An instance of the IntRangeEnumerator class</returns>
        </member>
        <member name="T:Ampere.Base.IRangify`1">
            <summary>The range class represents a range of values of a generic type.
            The Range class which was modified from user @drharris on StackOverflow.
            By convention, both sides of the range should be inclusive values.
            </summary>
            <typeparam name="T">The generic parameter</typeparam>
        </member>
        <member name="P:Ampere.Base.IRangify`1.Minimum">
            <summary>
            The minimum value of this range
            </summary>
        </member>
        <member name="P:Ampere.Base.IRangify`1.Maximum">
            <summary>
            The maximum value of this range
            </summary>
        </member>
        <member name="M:Ampere.Base.IRangify`1.IsValid">
            <summary>
            Determines if the range is valid.
            </summary>
            <returns>True if range is valid, else false</returns>
        </member>
        <member name="M:Ampere.Base.IRangify`1.ContainsValue(`0)">
            <summary>
            Determines if the provided value is inside the range.
            </summary>
            <param name="value">The value to test</param>
            <returns>True if the value is inside Range, else false</returns>
        </member>
        <member name="M:Ampere.Base.IRangify`1.IsInsideRange(Ampere.Base.IRangify{`0})">
            <summary>
            Determines if this Range is inside the bounds of another range.
            </summary>
            <param name="range">The parent range to test on</param>
            <returns>True if range is inclusive, else false</returns>
        </member>
        <member name="T:Ampere.Base.Range`1">
            <inheritdoc cref="T:Ampere.Base.IRangify`1"/>
        </member>
        <member name="P:Ampere.Base.Range`1.Minimum">
            <inheritdoc cref="T:Ampere.Base.IRangify`1"/>
        </member>
        <member name="P:Ampere.Base.Range`1.Maximum">
            <inheritdoc cref="T:Ampere.Base.IRangify`1"/>
        </member>
        <member name="M:Ampere.Base.Range`1.#ctor(`0,`0)">
            <summary>
            Creates a new instance of the Range class. This class is mutable - for the immutable
            version, see <see cref="T:Ampere.Base.ImmutableRange`1"/>
            </summary>
            <param name="minimum">The minimum value</param>
            <param name="maximum">The maximum value</param>
        </member>
        <member name="M:Ampere.Base.Range`1.ToString">
            <inheritdoc cref="T:Ampere.Base.IRangify`1"/>
        </member>
        <member name="M:Ampere.Base.Range`1.IsValid">
            <inheritdoc cref="T:Ampere.Base.IRangify`1"/>
        </member>
        <member name="M:Ampere.Base.Range`1.ContainsValue(`0)">
            <inheritdoc cref="T:Ampere.Base.IRangify`1"/>
        </member>
        <member name="M:Ampere.Base.Range`1.IsInsideRange(Ampere.Base.IRangify{`0})">
            <inheritdoc cref="T:Ampere.Base.IRangify`1"/>
        </member>
        <member name="M:Ampere.Base.Range`1.ContainsRange(Ampere.Base.IRangify{`0})">
            <inheritdoc cref="T:Ampere.Base.IRangify`1"/>
        </member>
        <member name="T:Ampere.Base.Shuffler">
            <summary>
            A utility to shuffle an array using the Fisher-Yates algorithm.
            </summary>
        </member>
        <member name="M:Ampere.Base.Shuffler.Shuffle``1(``0[])">
            <summary>
            Shuffles the array using the Fisher-Yates algorithm with cryptographically secure random number generation.
            </summary>
            <typeparam name="T">The element type of the array.</typeparam>
            <param name="data">The array to be shuffled.</param>
            <returns>The shuffled array.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided array is null.</exception>
        </member>
        <member name="T:Ampere.Enumerable.EnumerableUtils">
            <summary>
            A static utility class for .NET <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
        </member>
        <member name="M:Ampere.Enumerable.EnumerableUtils.Concat``1(System.Collections.Generic.IEnumerable{``0}[])">
             <summary>
             Concatenates all IEnumerables which are specified in in the parameter. The
             concatenation occurs in the order specified in the parameter.
             </summary>
             <typeparam name="T">The enumerable type to be used</typeparam>
             <param name="ie">An enumerable of all one dimensional arrays to be concatenated</param>
             <exception cref="T:System.ArgumentNullException"> Is thrown if any enumerable, which is a candidate to be concatenated, is null</exception>
             <returns>A single enumerable with all of the concatenated elements</returns>
             <example>This simple example shows how to call the <see cref="M:Ampere.Enumerable.EnumerableUtils.Concat``1(System.Collections.Generic.IEnumerable{``0}[])"/> method.</example>
             <code>
            
             using static Utilities.EnumerableUtils;
            
             class TestClass
             {
                static void Main(string[] args)
                {
                    int[] x = { 1, 2, 3, 4 };
                    int[] y = { 1, 2, 3, 4, 5, 6 };
                    int[] z = { 1, 2, 3 };
                    int[] comb = Concat(x, y, z).toArray();
                    //Printing out 'comb' results in 1, 2, 3, 4, 1, 2, 3, 4, 5, 6, 1, 2, 3
                }
             }
             </code>
        </member>
        <member name="M:Ampere.Enumerable.EnumerableUtils.CheckBufferAndExtend``1(``0[]@,System.Boolean,System.Int32)">
            <summary>
            Extends an generic array buffer by a specified size given a predefined condition
            is satisfied.
            </summary>
            <typeparam name="T">The type of the array</typeparam>
            <param name="buf">The buffer to be used</param>
            <param name="condition">The condition that should be satisfied before Array resizing</param>
            <param name="size">The size in which to resize the buffer if the condition is satisfied</param>
        </member>
        <member name="M:Ampere.Enumerable.EnumerableUtils.CheckBufferAndExtend``1(System.Collections.Generic.IEnumerable{``0}@,System.Boolean,System.Int32)">
            <summary>
            Extends an <see cref="T:System.Collections.Generic.IEnumerable`1"/> buffer by a specified size given a predefined condition
            is satisfied.
            </summary>
            <typeparam name="T">The type of the IEnumerable</typeparam>
            <param name="buf">The buffer to be used</param>
            <param name="condition">The condition that should be satisfied before Array resizing</param>
            <param name="size">The size in which to resize the buffer if the condition is satisfied</param>
        </member>
        <member name="M:Ampere.Enumerable.EnumerableUtils.Insert``1(``0[]@,System.Int32,System.Int32,``0[])">
             <summary>
             Inserts the specified element at the specified index in the generic array (modifying the original array).
             If element at that position exits, If shifts that element and any subsequent elements to the right,
             adding one to their indices. The method also allows for inserting more than one element into
             the array at one time given that they are specified. This Insert method is functionally similar
             to the Insert method of the IList interface. <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)"/>
             for information about the add method of the IList interface. This function also has an enumerable overload.
             </summary>
             <typeparam name="T">The type of the array</typeparam>
             <param name="src">The generic array to be used</param>
             <param name="startIdx">The index to start insertion</param>
             <param name="amtToIns">The amount of elements to insert into the array</param>
             <param name="valuesToIns">Optionally, the values to insert into the empty indices of the new array</param>
             <exception cref="T:System.IndexOutOfRangeException">Thrown when the valuesToIns array does not match the amount to insert (if it is greater than 0)</exception>
             <exception cref="T:System.IndexOutOfRangeException">Thrown when the amtToIns or the startIdx is less than 0</exception>
             <example>This sample shows how to call the <see cref="M:Ampere.Enumerable.EnumerableUtils.Insert``1(``0[]@,System.Int32,System.Int32,``0[])"/> method.</example>
             <seealso cref="M:System.Collections.IList.Insert(System.Int32,System.Object)"/>
             <code>
            
             using static Utilities.EnumerableUtils;
            
             class TestClass
             {
                 static void Main(string[] args)
                 {
                     var w = new int[9] {2, 3, 4, 5, 6, 7, 8, 9, 10};
                     Insert(ref w, 1, 3);
                     //Printing out 'w' results in: 2, 0, 0, 0, 3, 4, 5, 6, 7, 8, 9, 10
            
                     var y = new int[9] {2, 3, 4, 5, 6, 7, 8, 9, 10};
                     Insert(ref y, 1, 3, 250, 350, 450);
                     //Printing out 'y' results in: 2, 250, 350, 450, 3, 4, 5, 6, 7, 8, 9, 10
                 }
             }
             </code>
        </member>
        <member name="M:Ampere.Enumerable.EnumerableUtils.Insert``1(System.Collections.Generic.IEnumerable{``0}@,System.Int32,System.Int32,``0[])">
             <summary>
             Inserts the specified element at the specified index in the enumerable (modifying the original enumerable).
             If element at that position exits, If shifts that element and any subsequent elements to the right,
             adding one to their indices. The method also allows for inserting more than one element into
             the enumerable at one time given that they are specified. This Insert method is functionally similar
             to the Insert method of the IList interface. <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)"/>
             for information about the add method of the IList interface. This function also has an generic array overload.
             </summary>
             <typeparam name="T">The type of the enumerable</typeparam>
             <param name="src">The IEnumerable to be used</param>
             <param name="startIdx">The index to start insertion</param>
             <param name="amtToIns">The amount of elements to insert into the enumerable</param>
             <param name="valuesToIns">Optionally, the values to insert into the empty indices of the new enumerable</param>
             <exception cref="T:System.IndexOutOfRangeException">Thrown when the valuesToIns enumerable does not match the amount to insert (if it is greater than 0)</exception>
             <exception cref="T:System.IndexOutOfRangeException">Thrown when the amtToIns or the startIdx is less than 0</exception>
             <example>This sample shows how to call the <see cref="M:Ampere.Enumerable.EnumerableUtils.Insert``1(System.Collections.Generic.IEnumerable{``0}@,System.Int32,System.Int32,``0[])"/> method.</example>
             <seealso cref="M:System.Collections.IList.Insert(System.Int32,System.Object)"/>
             <code>
            
             using static Utilities.EnumerableUtils;
            
             class TestClass
             {
                 static void Main(string[] args)
                 {
                     var w = new int[9] {2, 3, 4, 5, 6, 7, 8, 9, 10}.AsEnumerable();
                     Insert(ref w, 1, 3);
                     //Printing out 'w' results in: 2, 0, 0, 0, 3, 4, 5, 6, 7, 8, 9, 10
            
                     var y = new int[9] {2, 3, 4, 5, 6, 7, 8, 9, 10}.AsEnumerable();
                     Insert(ref y, 1, 3, 250, 350, 450);
                     //Printing out 'y' results in: 2, 250, 350, 450, 3, 4, 5, 6, 7, 8, 9, 10
                 }
             }
             </code>
        </member>
        <member name="M:Ampere.Enumerable.EnumerableUtils.InnerContains``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Given a primary enumerable to check against and one or more test enumerable's, InnerContains executes an intersection
            of the primary and test enumerables to verify if all values in the test are contained within the primary enumerable.
            </summary>
            <typeparam name="T">The type of the IEnumerable</typeparam>
            <param name="ie">The primary IEnumerable to check against</param>
            <param name="isAll">Indicates whether to check whether all values are intersected or partially intersected</param>
            <param name="otherArrays">An array of Enumerable's to test against the primary enumerable</param>
            <returns>An instance of the <see cref="T:Ampere.Enumerable.InnerContainsProgram`1"/> to verify the result and violating enumerables</returns>
        </member>
        <member name="M:Ampere.Enumerable.EnumerableUtils.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns whether an IEnumerable is null or empty
            </summary>
            <typeparam name="T">The type of the IEnumerable</typeparam>
            <param name="ie">The IEnumerable to be used</param>
            <returns>The truth</returns>
        </member>
        <member name="M:Ampere.Enumerable.EnumerableUtils.IsZeroOrOne``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns true if the Count of the IEnumerable is zero or one.
            </summary>
            <typeparam name="T">The type of the IEnumerable</typeparam>
            <param name="ie">The IEnumerable to be used</param>
            <returns>True if the Count of the IEnumerable is zero or one</returns>
        </member>
        <member name="M:Ampere.Enumerable.EnumerableUtils.Range(System.Int32,System.Int32)">
             <summary>
             Enables python style for-loop for easier readability. This loop begins
             at the starting value and loops until the end - 1,
             </summary>
             <param name="start">The starting counter for the loop (inclusive)</param>
             <param name="end">The ending counter for the loop (exclusive)</param>
             <returns>An IEnumerable representing the current index</returns>
             <example>This example shows how to use the <see cref="M:Ampere.Enumerable.EnumerableUtils.Range(System.Int32,System.Int32)"/>method.</example>
             <code>
             using static Utilities.EnumerableUtils;
            
             class TestClass
             {
                 static void Main(string[] args)
                 {
                     foreach(int i in Range(0,10)) Console.WriteLine(i); //Prints 0 - 9
                 }
             }
             </code>
        </member>
        <member name="M:Ampere.Enumerable.EnumerableUtils.Shuffle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Cryptographically shuffles an enumerable. 
            </summary>
            <typeparam name="T">The element type of the IEnumerable</typeparam>
            <param name="src">The IEnumerable</param>
            <returns>The Shuffled IEnumerable</returns>
        </member>
        <member name="M:Ampere.Enumerable.EnumerableUtils.Span(System.Int32,System.Int32)">
             <summary>
             Enables python style for-loop for easier readability. This loop begins
             at the starting value and loops until the end.
             </summary>
             <param name="start">The starting counter for the loop (inclusive)</param>
             <param name="end">The ending counter for the loop (inclusive)</param>
             <returns>An IEnumerable representing the current index</returns>
             <example>This example shows how to use the <see cref="M:Ampere.Enumerable.EnumerableUtils.Span(System.Int32,System.Int32)"/>method.</example>
             <code>
             using static Utilities.EnumerableUtils;
            
             class TestClass
             {
                 static void Main(string[] args)
                 {
                     foreach(int i in Span(0,10)) Console.WriteLine(i); //Prints 0 - 10
                 }
             }
             </code>
        </member>
        <member name="M:Ampere.Enumerable.EnumerableUtils.ToString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Boolean)">
             <summary>
             Prints a string representation of an enumerable. There are 4 supported lengths for the fmtExp. The
             default length is 0 and the default behavior depends on the type of the enumerable. If the type is primitive
             (based on the System.IsPrimitive property) including decimal and string, then it prints the enumerable with a space
             as a separator between each element. If the enumerable is not primitive, it prints the enumerable with no separator.
             A fmtExp of length 1 specifies a character to separate each element. The enumerable is printed out, following
             a default behavior, except with the specified separator rather than the default separator. A fmtExp
             of length 2 specifies a two characters to mark the left and right outer bounds of the enumerable, A fmtExp
             of length 3 specifies a character for the left outer bound of the enumerable, followed by a separator character,
             followed by a character for the right outer bound of the enumerable. If no separator is desired, the "/0+" expression
             can be specified.The evenlySpacedSeparator parameter specifies whether an even number of spaces should be on
             both sides of the separator. This parameter ignores Object type enumerables excluding decimal and string.
             </summary>
             <typeparam name="T">The type of the enumerable</typeparam>
             <param name="src">The IEnumerable to be used</param>
             <param name="fmtExp">The defined expression to be optionally used</param>
             <param name="evenlySpacedSeparator">Determines whether the spacing between each element should be the same</param>
             <returns>The string representation of the enumerable</returns>
             <exception cref="T:System.ArgumentNullException">If arr is null</exception>
             <exception cref="T:System.FormatException">If the formatting expression length is neither 0 or 3</exception>
             <example>This sample shows how to call the <see cref="M:Ampere.Enumerable.EnumerableUtils.ToString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Boolean)"/> method.</example>
             <code>
            
             using static Utilities.EnumerableUtils;
            
             class TestClass
             {
                 static void Main(string[] args)
                 {
                     var w = new int[9] {2, 3, 4, 5, 6, 7, 8, 9, 10};
                     Console.WriteLine(w.ToString("[,]"));
                     //Printing out 'w' results in: [2, 3, 4, 5, 6, 7, 8, 9, 10]
            
                     var x = new int[9] {2, 3, 4, 5, 6, 7, 8, 9, 10};
                     Console.WriteLine(x.ToString("(|)", true));
                     //Printing out 'x' results in: (2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10)
            
                     var y = new string[4] {"Bill", "Bob", "Tom", "Joe"};
                     Console.WriteLine(y.ToString());
                     //Printing out 'y' results in: Bill Bob Tom Joe
                 }
             }
             </code>
        </member>
        <member name="T:Ampere.Enumerable.InnerContainsProgram`1">
            <summary>
            Program to check whether all values in one or more enumerables's are included in a
            specified enumerable.
            </summary>
            <typeparam name="T">The type of the IEnumerable</typeparam>
        </member>
        <member name="F:Ampere.Enumerable.InnerContainsProgram`1._baseArray">
            <summary>
            The IEnumerable to check against
            </summary>
        </member>
        <member name="F:Ampere.Enumerable.InnerContainsProgram`1._isAll">
            <summary>
            Indicates whether to check whether all values are intersected or partially intersected
            </summary>
        </member>
        <member name="F:Ampere.Enumerable.InnerContainsProgram`1._otherArrays">
            <summary>
            A list of IEnumberables to hold constructor params
            </summary>
        </member>
        <member name="P:Ampere.Enumerable.InnerContainsProgram`1.ViolatedEnumerable">
            <summary>
            A property to identify which enumerable violated the containing condition. This method
            returns null unless <see cref="M:Ampere.Enumerable.InnerContainsProgram`1.CheckContains"/> is executed.
            </summary>
        </member>
        <member name="M:Ampere.Enumerable.InnerContainsProgram`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Collections.Generic.IEnumerable{`0}[])">
            <summary>
            The Constructor to create a new instance of the InnerContainsProgram
            </summary>
            <param name="baseArray">The IEnumberable to check against</param>
            <param name="isAll">Indicates whether to check whether all values are intersected or partially intersected</param>
            <param name="otherArrays">The list of IEnumberables to check against the baseArray</param>
        </member>
        <member name="M:Ampere.Enumerable.InnerContainsProgram`1.CheckContains">
            <summary>
            Checks whether each array specified in otherArrays is completely contained in the
            base array. Each value in each array must be contained in the base array for this
            method to return true, otherwise, false is returned and the ViolatedEnumerable property
            is set with the enumerable that violated the condition. This function runs a LINQ intersection
            between each enumerable.
            </summary>
            <returns>True if each enumerable is contained in the base and false otherwise.</returns>
        </member>
        <member name="T:Ampere.Statistics.EnumerableStats">
            <summary>
            A static utility class for calculating a variety of statistics based on IEnumerables. Moreover,
            generic overload methods exist to simplify calculating statistics of object enumerables containing
            numeric properties.
            </summary>
        </member>
        <member name="F:Ampere.Statistics.EnumerableStats.Tolerance">
            <summary>
            The tolerance level for floating point arithmetic (or known as the epsilon value).
            </summary>
        </member>
        <member name="M:Ampere.Statistics.EnumerableStats.Mean(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Finds the average of all the elements in the enumerable.
            </summary>
            <param name="src">The IEnumerable of type double</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the source is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the source is of length 0</exception>
            <returns>The average of all the elements in the source</returns>
        </member>
        <member name="M:Ampere.Statistics.EnumerableStats.Mean``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            A generic overload of the <see cref="M:Ampere.Statistics.EnumerableStats.Mean(System.Collections.Generic.IEnumerable{System.Double})"/> method. This method will call
            the <see cref="M:Ampere.Statistics.EnumerableStats.Mean(System.Collections.Generic.IEnumerable{System.Double})"/> overload.
            </summary>
            <typeparam name="T">The type of the enumerable</typeparam>
            <param name="numbers">The specified enumerable</param>
            <param name="selector">The numeral specifier</param>
            <returns>The average of all the elements in the source</returns>
        </member>
        <member name="M:Ampere.Statistics.EnumerableStats.Median(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Finds the median of all the elements in the enumerable.
            </summary>
            <param name="src">The IEnumerable of type double</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the source is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the source if of length 0</exception>
            <returns>The median of the source</returns>
        </member>
        <member name="M:Ampere.Statistics.EnumerableStats.Median``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            A generic overload of the <see cref="M:Ampere.Statistics.EnumerableStats.Median(System.Collections.Generic.IEnumerable{System.Double})"/> method. This method will call
            the <see cref="M:Ampere.Statistics.EnumerableStats.Median(System.Collections.Generic.IEnumerable{System.Double})"/> overload.
            </summary>
            <typeparam name="T">The type of the enumerable</typeparam>
            <param name="numbers">The specified enumerable</param>
            <param name="selector">The numeral specifier</param>
            <returns>The median of the source</returns>
        </member>
        <member name="M:Ampere.Statistics.EnumerableStats.Mode(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Finds the mode of all the elements in the enumerable.
            </summary>
            <param name="src">The IEnumerable of type double</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the source is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the source is of length 0</exception>
            <exception cref="T:Ampere.Statistics.NoModeException">Thrown when no mode exists for the source</exception>
            <returns>The mode of the source</returns>
        </member>
        <member name="M:Ampere.Statistics.EnumerableStats.Mode``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            A generic overload of the <see cref="M:Ampere.Statistics.EnumerableStats.Mode(System.Collections.Generic.IEnumerable{System.Double})"/> method. This method will call
            the <see cref="M:Ampere.Statistics.EnumerableStats.Mode(System.Collections.Generic.IEnumerable{System.Double})"/> overload.
            </summary>
            <typeparam name="T">The type of the enumerable</typeparam>
            <param name="numbers">The specified enumerable</param>
            <param name="selector">The numeral specifier</param>
            <returns>The mode of the source</returns>
        </member>
        <member name="M:Ampere.Statistics.EnumerableStats.SampleVariance(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Finds the sample variance of the enumerable.
            </summary>
            <param name="src">The IEnumerable of type double</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the source is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the source if of length 0</exception>
            <returns>The sample variance of the source</returns>
        </member>
        <member name="M:Ampere.Statistics.EnumerableStats.SampleVariance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            A generic overload of the <see cref="M:Ampere.Statistics.EnumerableStats.SampleVariance(System.Collections.Generic.IEnumerable{System.Double})"/> method. This method will call
            the <see cref="M:Ampere.Statistics.EnumerableStats.SampleVariance(System.Collections.Generic.IEnumerable{System.Double})"/> overload.
            </summary>
            <typeparam name="T">The type of the enumerable</typeparam>
            <param name="numbers">The specified enumerable</param>
            <param name="selector">The numeral specifier</param>
            <returns>The sample variance of the source</returns>
        </member>
        <member name="M:Ampere.Statistics.EnumerableStats.PopulationVariance(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Finds the population variance of the enumerable.
            </summary>
            <param name="src">The IEnumerable of type double</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the source is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the source is of length 0</exception>
            <returns>The population variance of the source</returns>
        </member>
        <member name="M:Ampere.Statistics.EnumerableStats.PopulationVariance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            A generic overload of the <see cref="M:Ampere.Statistics.EnumerableStats.PopulationVariance(System.Collections.Generic.IEnumerable{System.Double})"/> method. This method will call
            the <see cref="M:Ampere.Statistics.EnumerableStats.PopulationVariance(System.Collections.Generic.IEnumerable{System.Double})"/> overload.
            </summary>
            <typeparam name="T">The type of the enumerable</typeparam>
            <param name="numbers">The specified enumerable</param>
            <param name="selector">The numeral specifier</param>
            <returns>The populationvariance of the source</returns>
        </member>
        <member name="M:Ampere.Statistics.EnumerableStats.SampleStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Finds the sample standard deviation of the enumerable.
            </summary>
            <param name="src">The IEnumerable of type double</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the source is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the source is of length 0</exception>
            <returns>The sample standard deviation of the source</returns>
        </member>
        <member name="M:Ampere.Statistics.EnumerableStats.SampleStandardDeviation``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            A generic overload of the <see cref="M:Ampere.Statistics.EnumerableStats.SampleStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})"/> method. This method will call
            the <see cref="M:Ampere.Statistics.EnumerableStats.SampleStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})"/> overload.
            </summary>
            <typeparam name="T">The type of the enumerable</typeparam>
            <param name="numbers">The specified enumerable</param>
            <param name="selector">The numeral specifier</param>
            <returns>The sample standard deviation of the source</returns>
        </member>
        <member name="M:Ampere.Statistics.EnumerableStats.PopulationStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Finds the population standard deviation of the enumerable.
            </summary>
            <param name="src">The IEnumerable of type double</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the source is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the source is of length 0</exception>
            <returns>The population standard deviation of the source</returns>
        </member>
        <member name="M:Ampere.Statistics.EnumerableStats.PopulationStandardDeviation``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            A generic overload of the <see cref="M:Ampere.Statistics.EnumerableStats.PopulationStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})"/> method.
            This method will call the <see cref="M:Ampere.Statistics.EnumerableStats.PopulationStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})"/> overload.
            </summary>
            <typeparam name="T">The type of the enumerable</typeparam>
            <param name="numbers">The specified enumerable</param>
            <param name="selector">The numeral specifier</param>
            <returns>The population standard deviation of the source</returns>
        </member>
        <member name="M:Ampere.Statistics.EnumerableStats.Range(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Finds the range of the enumerable.
            </summary>
            <param name="src">The IEnumerable of type double</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the source is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the source is of size 0</exception>
            <returns>The range of the source</returns>
        </member>
        <member name="M:Ampere.Statistics.EnumerableStats.Range``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            A generic overload of the <see cref="M:Ampere.Statistics.EnumerableStats.Range(System.Collections.Generic.IEnumerable{System.Double})"/> method. This method will call
            the <see cref="M:Ampere.Statistics.EnumerableStats.Range(System.Collections.Generic.IEnumerable{System.Double})"/> overload.
            </summary>
            <typeparam name="T">The type of the enumerable</typeparam>
            <param name="numbers">The specified enumerable</param>
            <param name="selector">The numeral specifier</param>
            <returns>The range of the source</returns>
        </member>
        <member name="M:Ampere.Statistics.EnumerableStats.LowerQuartile(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Finds the lower quartile of the enumerable.
            </summary>
            <param name="src">The IEnumerable of type double</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the source is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the source is of size 0</exception>
            <exception cref="T:Ampere.Statistics.InsufficientDataSetException">Thrown when the data set is not large enough to calculate a lower quartile</exception>
            <returns>The lower quartile of the source</returns>
        </member>
        <member name="M:Ampere.Statistics.EnumerableStats.LowerQuartile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            A generic overload of the <see cref="M:Ampere.Statistics.EnumerableStats.LowerQuartile(System.Collections.Generic.IEnumerable{System.Double})"/> method. This method will call
            the <see cref="M:Ampere.Statistics.EnumerableStats.LowerQuartile(System.Collections.Generic.IEnumerable{System.Double})"/> overload.
            </summary>
            <typeparam name="T">The type of the enumerable</typeparam>
            <param name="numbers">The specified enumerable</param>
            <param name="selector">The numeral specifier</param>
            <returns>The lower quartile of the source</returns>
        </member>
        <member name="M:Ampere.Statistics.EnumerableStats.UpperQuartile(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Finds the upper quartile of the enumerable.
            </summary>
            <param name="src">The IEnumerable of type double</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the source is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the source is of size 0</exception>
            <exception cref="T:Ampere.Statistics.InsufficientDataSetException">Thrown when the data set is not large enough to calculate an upper quartile</exception>
            <returns>The upper quartile of the source</returns>
        </member>
        <member name="M:Ampere.Statistics.EnumerableStats.UpperQuartile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            A generic overload of the <see cref="M:Ampere.Statistics.EnumerableStats.UpperQuartile(System.Collections.Generic.IEnumerable{System.Double})"/> method. This method will call
            the <see cref="M:Ampere.Statistics.EnumerableStats.UpperQuartile(System.Collections.Generic.IEnumerable{System.Double})"/> overload.
            </summary>
            <typeparam name="T">The type of the enumerable</typeparam>
            <param name="numbers">The specified enumerable</param>
            <param name="selector">The numeral specifier</param>
            <returns>The upper quartile of the source</returns>
        </member>
        <member name="M:Ampere.Statistics.EnumerableStats.InterQuartileRange(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Finds the inter-quartile range of the enumerable.
            </summary>
            <param name="src">The IEnumerable of type double</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the source is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the source is of length 0</exception>
            <returns>The inter-quartile range of the source</returns>
        </member>
        <member name="M:Ampere.Statistics.EnumerableStats.InterQuartileRange``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            A generic overload of the <see cref="M:Ampere.Statistics.EnumerableStats.InterQuartileRange(System.Collections.Generic.IEnumerable{System.Double})"/> method. This method will call
            the <see cref="M:Ampere.Statistics.EnumerableStats.InterQuartileRange(System.Collections.Generic.IEnumerable{System.Double})"/> overload.
            </summary>
            <typeparam name="T">The type of the enumerable</typeparam>
            <param name="numbers">The specified enumerable</param>
            <param name="selector">The numeral specifier</param>
            <returns>The inter-quartile range of the source</returns>
        </member>
        <member name="M:Ampere.Statistics.EnumerableStats.IsNormalProportion(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Returns whether if the data set is normally distributed for a proportion.
            </summary>
            <param name="src">The IEnumerable of type double</param>
            <param name="samstat">The sample statistic</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the source is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the source is of length 0</exception>
            <returns>Returns if the data set is normally distributed for a proportion.</returns>
        </member>
        <member name="M:Ampere.Statistics.EnumerableStats.IsNormalProportion``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Double)">
            <summary>
            A generic overload of the <see cref="M:Ampere.Statistics.EnumerableStats.IsNormalProportion(System.Collections.Generic.IEnumerable{System.Double},System.Double)"/> method. This method will call
            the <see cref="M:Ampere.Statistics.EnumerableStats.IsNormalProportion(System.Collections.Generic.IEnumerable{System.Double},System.Double)"/> overload.
            </summary>
            <typeparam name="T">The type of the enumerable</typeparam>
            <param name="numbers">The specified enumerable</param>
            <param name="selector">The numeral specifier</param>
            <param name="samstat">The sample statistic></param>
            <returns>Returns if the data set is normally distributed for a proportion.</returns>
        </member>
        <member name="M:Ampere.Statistics.EnumerableStats.IsNormalMean(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns whether if the data set is normally distributed for a mean.
            </summary>
            <param name="src">The IEnumerable of type double</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the source is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the source is of length 0</exception>
            <returns>Returns whether if the data set is normally distributed for a mean.</returns>
        </member>
        <member name="M:Ampere.Statistics.EnumerableStats.IsNormalMean``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            A generic overload of the <see cref="M:Ampere.Statistics.EnumerableStats.IsNormalMean(System.Collections.Generic.IEnumerable{System.Double})"/> method. This method will call
            the <see cref="M:Ampere.Statistics.EnumerableStats.IsNormalMean(System.Collections.Generic.IEnumerable{System.Double})"/> overload.
            </summary>
            <typeparam name="T">The type of the enumerable</typeparam>
            <param name="numbers">The specified enumerable</param>
            <param name="selector">The numeral specifier</param>
            <returns>Returns if the data set is normally distributed for a proportion.</returns>
        </member>
        <member name="M:Ampere.Statistics.EnumerableStats.StandardizedScore(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Calculates the standardized score (z-score or standard score) of the enumerable.
            </summary>
            <param name="src">The IEnumerable of type double</param>
            <param name="elem">The value of the element</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the source is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the source if of length 0</exception>
            <returns>The standardized score of the source</returns>
        </member>
        <member name="M:Ampere.Statistics.EnumerableStats.StandardizedScore``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Double)">
            <summary>
            A generic overload of the <see cref="M:Ampere.Statistics.EnumerableStats.StandardizedScore(System.Collections.Generic.IEnumerable{System.Double},System.Double)"/> method. 
            This method will call the <see cref="M:Ampere.Statistics.EnumerableStats.StandardizedScore(System.Collections.Generic.IEnumerable{System.Double},System.Double)"/> overload.
            </summary>
            <typeparam name="T">The type of the enumerable</typeparam>
            <param name="numbers">The specified enumerable</param>
            <param name="selector">The numeral specifier</param>
            <param name="elem">The value of the element</param>
            <returns>The standardized score of the source</returns>
        </member>
        <member name="M:Ampere.Statistics.EnumerableStats.CreateConfidenceInterval(System.Double,System.Double,System.Double)">
            <summary>
            Creates confidence interval for the given data set.
            </summary>
            <param name="mean">The mean of the data set</param>
            <param name="cv">The critical value of the data set</param>
            <param name="se">The standard error of the data set</param>
            <returns>Returns a confidence interval of the data set.</returns>
        </member>
        <member name="M:Ampere.Statistics.EnumerableStats.ConstructTValue(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns whether if the data set is normally distributed for a mean.
            </summary>
            <param name="mean">The mean of the data set</param>
            <param name="popMean">The population mean</param>
            <param name="stdDev">The standard deviation of the data set</param>
            <param name="size">The size of the data set</param>
            <returns>Constructs the t-critical value</returns>
        </member>
        <member name="T:Ampere.Statistics.InsufficientDataSetException">
            <summary>
            An exception that is thrown when the data set is not large enough to compute a statistic.
            </summary>
        </member>
        <member name="M:Ampere.Statistics.InsufficientDataSetException.#ctor">
            <summary>
            Creates a new InsufficientDataSetException.
            </summary>
        </member>
        <member name="M:Ampere.Statistics.InsufficientDataSetException.#ctor(System.String)">
            <summary>
            Creates a new overloaded InsufficientDataSetException containing a message.
            </summary>
            <param name="message">The message of this exception type</param>
        </member>
        <member name="M:Ampere.Statistics.InsufficientDataSetException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new overloaded InsufficientDataSetException containing a message and an inner Exception.
            </summary>
            <param name="message">The message of this exception type</param>
            <param name="inner">The inner Exception</param>
        </member>
        <member name="M:Ampere.Statistics.InsufficientDataSetException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new overloaded InsufficientDataSetException containing a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance
            and a <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance.
            </summary>
            <param name="info">The SerializationInfo instance</param>
            <param name="context">The StreamingContext instance</param>
        </member>
        <member name="T:Ampere.Statistics.NoModeException">
            <summary>
            An exception that is thrown when no Mode exists in the data set.
            </summary>
        </member>
        <member name="M:Ampere.Statistics.NoModeException.#ctor">
            <summary>
            Creates a new NoModeException.
            </summary>
        </member>
        <member name="M:Ampere.Statistics.NoModeException.#ctor(System.String)">
            <summary>
            Creates a new overloaded NoModeException containing a message.
            </summary>
            <param name="message">The message of this exception type</param>
        </member>
        <member name="M:Ampere.Statistics.NoModeException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new overloaded NoModeException containing a message and an inner Exception.
            </summary>
            <param name="message">The message of this exception type</param>
            <param name="inner">The inner Exception</param>
        </member>
        <member name="M:Ampere.Statistics.NoModeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new overloaded NoModeException containing a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance
            and a <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance.
            </summary>
            <param name="info">The SerializationInfo instance</param>
            <param name="context">The StreamingContext instance</param>
        </member>
        <member name="T:Ampere.Str.StringBuilderUtils">
            <summary>
            A static utility class for StringBuilder extension methods.
            </summary>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.AppendIf(System.Text.StringBuilder,System.ReadOnlySpan{System.Char},System.Boolean)">
            <summary>
            Appends a <see cref="T:System.ReadOnlySpan`1"/> if a condition is met.
            </summary>
            <param name="sb">The StringBuilder instance</param>
            <param name="c">The ReadOnlySpan instance to append to the StringBuilder instance</param>
            <param name="condition">The condition to satisfy to decide whether appending will occur</param>
            <returns>Th StringBuilder instance</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.AppendIf(System.Text.StringBuilder,System.ReadOnlyMemory{System.Char},System.Boolean)">
            <summary>
            Appends a <see cref="T:System.ReadOnlyMemory`1"/> if a condition is met.
            </summary>
            <param name="sb">The StringBuilder instance</param>
            <param name="c">The ReadOnlySpan instance to append to the StringBuilder instance</param>
            <param name="condition">The condition to satisfy to decide whether appending will occur</param>
            <returns>Th StringBuilder instance</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.AppendIf(System.Text.StringBuilder,System.Boolean,System.Boolean)">
            <summary>
            Appends a <see cref="T:System.Boolean"/> if a condition is met.
            </summary>
            <param name="sb">The StringBuilder instance</param>
            <param name="b">The ReadOnlySpan instance to append to the StringBuilder instance</param>
            <param name="condition">The condition to satisfy to decide whether appending will occur</param>
            <returns>Th StringBuilder instance</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.AppendIf(System.Text.StringBuilder,System.Text.StringBuilder,System.Boolean)">
            <summary>
            Appends a <see cref="T:System.Text.StringBuilder"/> if a condition is met.
            </summary>
            <param name="sb">The StringBuilder instance</param>
            <param name="stringBuilder">The ReadOnlySpan instance to append to the StringBuilder instance</param>
            <param name="condition">The condition to satisfy to decide whether appending will occur</param>
            <returns>Th StringBuilder instance</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.AppendIf(System.Text.StringBuilder,System.Text.StringBuilder,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Appends a <see cref="T:System.Text.StringBuilder"/> if a condition is met.
            </summary>
            <param name="sb">The StringBuilder instance</param>
            <param name="stringBuilder">The ReadOnlySpan instance to append to the StringBuilder instance</param>
            <param name="startIndex">The starting index of where to search, inclusive</param>
            <param name="count">The number of character positions to examine.</param>
            <param name="condition">The condition to satisfy to decide whether appending will occur</param>
            <returns>Th StringBuilder instance</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.AppendFromEnumerable``1(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            Appends the contents of an enumerable of generic objects provided a delegate to identify the string property.
            </summary>
            <typeparam name="T">The type of the enumerable</typeparam>
            <param name="sb">The StringBuilder instance</param>
            <param name="enumerable">The enumerable to append from</param>
            <param name="func">The function specifying what item should be appended</param>
            <returns>The StringBuilder instance</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.AppendFromEnumerable(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Appends the contents of a string enumerable. 
            </summary>
            <param name="sb">The StringBuilder instance</param>
            <param name="enumerable">The enumerable to append from</param>
            <returns>The StringBuilder instance</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.AppendLineFromEnumerable``1(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            Appends the contents of an enumerable of generic objects provided a delegate to identify the string property. This function also
            adds the appropriate line terminator at the end of the StringBuilder instance.
            </summary>
            <typeparam name="T">The type of the enumerable</typeparam>
            <param name="sb">The StringBuilder instance</param>
            <param name="enumerable">The enumerable to append from</param>
            <param name="func">The function specifying what item should be appended</param>
            <returns>The StringBuilder instance</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.AppendLineFromEnumerable(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Appends the contents of a string enumerable. This function also
            adds the appropriate line terminator at the end of the StringBuilder instance.
            </summary>
            <param name="sb">The StringBuilder instance</param>
            <param name="enumerable">The enumerable to append from</param>
            <returns>The StringBuilder instance</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.EnumerableAction``1(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            A helper method to carry out an enumerable action. This method really serves no function other than making the other
            methods look more elegant.
            </summary>
            <typeparam name="T">The type of the enumerable</typeparam>
            <param name="sb">The StringBuilder instance</param>
            <param name="enumerable">The enumerable to append from</param>
            <param name="action">The specific StringBuilder action to carry out for the StringBuilder</param>
            <returns>The StringBuilder instance</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.IndexOf(System.Text.StringBuilder,System.String,System.Int32,System.Int32,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of a specified string within this StringBuilder isntance.
            The method returns -1 if the string is not found in this instance. A new string is not created during the search.
            </summary>
            <param name="sb">The StringBuilder instance</param>
            <param name="value">The string to find as a character array</param>
            <param name="startIndex">The starting index of where to search, inclusive</param>
            <param name="count">The number of character positions to examine.</param>
            <param name="comparisonType">One of the enumeration values that determines how <paramref name="value"/> is searched within this instance</param>
            <returns>The index if found and -1 otherwise</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.IndexOf(System.Text.StringBuilder,System.String,System.Int32,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of a specified string within this StringBuilder isntance.
            The method returns -1 if the string is not found in this instance. A new string is not created during the search.
            </summary>
            <param name="sb">The StringBuilder instance</param>
            <param name="value">The string to find</param>
            <param name="startIndex">The starting index of where to search, inclusive</param>
            <param name="comparisonType">The <see cref="T:System.StringComparison"/> instance to specify culture and case rules</param>
            <returns>The index if found and -1 otherwise</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.IndexOf(System.Text.StringBuilder,System.Char,System.Int32,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of a specified string within this StringBuilder isntance.
            The method returns -1 if the string is not found in this instance. A new string is not created during the search.
            </summary>
            <param name="sb">The StringBuilder instance</param>
            <param name="value">The character to find</param>
            <param name="startIndex">The starting index of where to search, inclusive</param>
            <param name="comparisonType">The <see cref="T:System.StringComparison"/> instance to specify culture and case rules</param>
            <returns>The index if found and -1 otherwise</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.IndexOf(System.Text.StringBuilder,System.String,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of a specified string within this StringBuilder isntance.
            The method returns -1 if the string is not found in this instance. A new string is not created during the search.
            </summary>
            <param name="sb">The StringBuilder instance</param>
            <param name="value">The string to find</param>
            <param name="comparisonType">The <see cref="T:System.StringComparison"/> instance to specify culture and case rules</param>
            <returns>The index if found and -1 otherwise</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.IndexOf(System.Text.StringBuilder,System.String,System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of a specified string within this StringBuilder isntance.
            The method returns -1 if the string is not found in this instance. A new string is not created during the search.
            </summary>
            <param name="sb">The StringBuilder instance</param>
            <param name="value">The string to find</param>
            <param name="startIndex">The starting index of where to search, inclusive</param>
            <param name="count">The number of character positions to examine.</param>
            <returns>The index if found and -1 otherwise</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.IndexOf(System.Text.StringBuilder,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of a specified string within this StringBuilder isntance.
            The method returns -1 if the string is not found in this instance. A new string is not created during the search.
            </summary>
            <param name="sb">The StringBuilder instance</param>
            <param name="value">The character to find</param>
            <param name="comparisonType">The <see cref="T:System.StringComparison"/> instance to specify culture and case rules</param>
            <returns>The index if found and -1 otherwise</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.IndexOf(System.Text.StringBuilder,System.Char,System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of a specified string within this StringBuilder isntance.
            The method returns -1 if the string is not found in this instance. A new string is not created during the search.
            </summary>
            <param name="sb">The StringBuilder instance</param>
            <param name="value">The character to find</param>
            <param name="startIndex">The starting index of where to search, inclusive</param>
            <returns>The index if found and -1 otherwise</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.IndexOf(System.Text.StringBuilder,System.String)">
            <summary>
            Reports the zero-based index of the first occurrence of a specified string within this StringBuilder isntance.
            The method returns -1 if the string is not found in this instance. A new string is not created during the search.
            </summary>
            <param name="sb">The StringBuilder instance</param>
            <param name="value">The string to find</param>
            <returns>The index if found and -1 otherwise</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.IndexOf(System.Text.StringBuilder,System.Char)">
            <summary>
            Reports the zero-based index of the first occurrence of a specified string within this StringBuilder isntance.
            The method returns -1 if the string is not found in this instance. A new string is not created during the search.
            </summary>
            <param name="sb">The StringBuilder instance</param>
            <param name="value">The character to find</param>
            <returns>The index if found and -1 otherwise</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.IndexOf(System.Text.StringBuilder,System.String,System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of a specified string within this StringBuilder isntance.
            The method returns -1 if the string is not found in this instance. A new string is not created during the search.
            </summary>
            <param name="sb">The StringBuilder instance</param>
            <param name="value">The string to find</param>
            <param name="startIndex">The starting index of where to search, inclusive</param>
            <returns>The index if found and -1 otherwise</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.IsZeroOrOne(System.Text.StringBuilder)">
            <summary>
            Returns true if the length of the string is zero or one.
            </summary>
            <param name="sb">The StringBuilder instance</param>
            <returns>True if the length of the string is zero or one</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.ReplaceIf(System.Text.StringBuilder,System.Char,System.Char,System.Boolean)">
            <summary>
            Calls the StringBuilder Replace method only if a predefined condition is met.
            </summary>
            <param name="sb">The StringBuilder instance</param>
            <param name="oldChar">The character to replace</param>
            <param name="newChar">The character that will replace <paramref name="oldChar"/></param>
            <param name="condition">The condition to satisfy to decide whether replacement will occur</param>
            <returns>The StringBuilder instance</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.ReplaceIf(System.Text.StringBuilder,System.Char,System.Char,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Calls the StringBuilder Replace method only if a predefined condition is met.
            </summary>
            <param name="sb">The StringBuilder instance</param>
            <param name="oldChar">The character to replace</param>
            <param name="newChar">The character that will replace <paramref name="oldChar"/></param>
            <param name="startIndex">The starting index of where to search, inclusive</param>
            <param name="count">The number of character positions to examine.</param>
            <param name="condition">The condition to satisfy to decide whether replacement will occur</param>
            <returns>The StringBuilder instance</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.ReplaceIf(System.Text.StringBuilder,System.String,System.String,System.Boolean)">
            <summary>
            Calls the StringBuilder Replace method only if a predefined condition is met.
            </summary>
            <param name="sb">The StringBuilder instance</param>
            <param name="oldValue">The string to replace</param>
            <param name="newValue">The string that will replace <paramref name="oldValue"/></param>
            <param name="condition">The condition to satisfy to decide whether replacement will occur</param>
            <returns>The StringBuilder instance</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.ReplaceIf(System.Text.StringBuilder,System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Calls the StringBuilder Replace method only if a predefined condition is met.
            </summary>
            <param name="sb">The StringBuilder instance</param>
            <param name="oldValue">The string to replace</param>
            <param name="newValue">The string that will replace <paramref name="oldValue"/></param>
            <param name="startIndex">The starting index of where to search, inclusive</param>
            <param name="count">The number of character positions to examine.</param>
            <param name="condition">The condition to satisfy to decide whether replacement will occur</param>
            <returns>The StringBuilder instance</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.ReplaceOccurrence(System.Text.StringBuilder,System.String,System.String,System.Int32)">
            <summary>
            Returns this instance of the StringBuilder in which a specific occurrence of a specified string in the current instance
            is replaced another specified string. 
            </summary>
            <example>
            Given a string that says, "Hello my good good good friend", StringBuilder.ReplaceOccurrence("good", "very good", 3) would
            result in, "Hello my good good very good friend".
            </example>
            <param name="sb">The StringBuilder instance</param>
            <param name="oldValue">The string to be replaced</param>
            <param name="newValue">The string to replace an occurrence of <paramref name="oldValue"/></param>
            <param name="occurrence">The nth occurrence of the <paramref name="oldValue"/> to replace</param>
            <returns>This StringBuilder instance</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.ReplaceOccurrence(System.Text.StringBuilder,System.String,System.String,System.Int32,System.StringComparison)">
            <summary>
            Returns this instance of the StringBuilder in which a specific occurrence of a specified string in the current instance
            is replaced another specified string. 
            </summary>
            <example>
            Given a string that says, "Hello my good good good friend", StringBuilder.ReplaceOccurrence("good", "very good", 3) would
            result in, "Hello my good good very good friend".
            </example>
            <param name="sb">The StringBuilder instance</param>
            <param name="oldValue">The string to be replaced</param>
            <param name="newValue">The string to replace an occurrence of <paramref name="oldValue"/></param>
            <param name="occurrence">The nth occurrence of the <paramref name="oldValue"/> to replace</param>
            <param name="comparisonType">One of the enumeration values that determines how <paramref name="oldValue"/> is searched within this instance</param>        /// <returns>This StringBuilder instance</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.ReplaceOccurrence(System.Text.StringBuilder,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Returns this instance of the StringBuilder in which a specific occurrence of a specified string in the current instance
            is replaced another specified string. 
            </summary>
            <example>
            Given a string that says, "Hello my good good good friend", StringBuilder.ReplaceOccurrence("good", "very good", 3) would
            result in, "Hello my good good very good friend".
            </example>
            <param name="sb">The StringBuilder instance</param>
            <param name="oldValue">The string to be replaced</param>
            <param name="newValue">The string to replace an occurrence of <paramref name="oldValue"/></param>
            <param name="occurrence">The nth occurrence of the <paramref name="oldValue"/> to replace</param>
            <param name="condition">The condition to satisfy to decide whether replacement will occur</param>
            <returns>This StringBuilder instance</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.ReplaceOccurrence(System.Text.StringBuilder,System.String,System.String,System.Int32,System.StringComparison,System.Boolean)">
            <summary>
            Returns this instance of the StringBuilder in which a specific occurrence of a specified string in the current instance
            is replaced another specified string. 
            </summary>
            <example>
            Given a string that says, "Hello my good good good friend", StringBuilder.ReplaceOccurrence("good", "very good", 3) would
            result in, "Hello my good good very good friend".
            </example>
            <param name="sb">The StringBuilder instance</param>
            <param name="oldValue">The string to be replaced</param>
            <param name="newValue">The string to replace an occurrence of <paramref name="oldValue"/></param>
            <param name="occurrence">The nth occurrence of the <paramref name="oldValue"/> to replace</param>
            <param name="comparisonType">One of the enumeration values that determines how <paramref name="oldValue"/> is searched within this instance</param>
            <param name="condition">The condition to satisfy to decide whether replacement will occur</param>
            <returns>This StringBuilder instance</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.ReplaceInterval(System.Text.StringBuilder,System.String,System.String,System.Int32)">
            <summary>
            Returns this instance of the StringBuilder in which a specific occurrence of a specified string in the current instance
            is replaced another specified string on a integer defined interval. This allows certain occurrences/intervals of text
            up to a predefined stop count. This is an overload of <see cref="M:Ampere.Str.StringBuilderUtils.ReplaceInterval(System.Text.StringBuilder,System.String,System.String,System.Int32,System.Int32,System.StringComparison,System.Boolean)"/>
            <example>
            Given the following string, "very very very very very very very", StringBuilder.ReplaceInterval("very", "happy", 2, sb.Length, StringComparison.CurrentCulture)
            will replace every second "very" with the word "happy" until the very end of the string. The result would be:
            "very happy very happy very happy very"
            </example>
            <example>
            Given the following string, "very very very very very very very", StringBuilder.ReplaceInterval("very", "happy", 2, 3)
            will replace every second "very" with the word "happy" until the third occurrence of "very". The result would be:
            "very happy very very very very very"
            </example>
            </summary>
            <param name="sb">The StringBuilder Instance</param>
            <param name="oldValue">The string to be replaced</param>
            <param name="newValue">The string to replace an occurrence of <paramref name="oldValue"/></param>
            <param name="every">The interval the replacement should follow - read as, "Replace every nth occurrence of <paramref name="oldValue"/>"</param>
            <returns>This StringBuilder instance</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.ReplaceInterval(System.Text.StringBuilder,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Returns this instance of the StringBuilder in which a specific occurrence of a specified string in the current instance
            is replaced another specified string on a integer defined interval. This allows certain occurrences/intervals of text
            up to a predefined stop count. This is an overload of <see cref="M:Ampere.Str.StringBuilderUtils.ReplaceInterval(System.Text.StringBuilder,System.String,System.String,System.Int32,System.Int32,System.StringComparison,System.Boolean)"/>
            <example>
            Given the following string, "very very very very very very very", StringBuilder.ReplaceInterval("very", "happy", 2, sb.Length, StringComparison.CurrentCulture)
            will replace every second "very" with the word "happy" until the very end of the string. The result would be:
            "very happy very happy very happy very"
            </example>
            <example>
            Given the following string, "very very very very very very very", StringBuilder.ReplaceInterval("very", "happy", 2, 3)
            will replace every second "very" with the word "happy" until the third occurrence of "very". The result would be:
            "very happy very very very very very"
            </example>
            </summary>
            <param name="sb">The StringBuilder Instance</param>
            <param name="oldValue">The string to be replaced</param>
            <param name="newValue">The string to replace an occurrence of <paramref name="oldValue"/></param>
            <param name="every">The interval the replacement should follow - read as, "Replace every nth occurrence of <paramref name="oldValue"/>"</param>
            <param name="condition">The condition to satisfy before replacing the value</param>
            <returns>This StringBuilder instance</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.ReplaceInterval(System.Text.StringBuilder,System.String,System.String,System.Int32,System.StringComparison)">
            <summary>
            Returns this instance of the StringBuilder in which a specific occurrence of a specified string in the current instance
            is replaced another specified string on a integer defined interval. This allows certain occurrences/intervals of text
            up to a predefined stop count. This is an overload of <see cref="M:Ampere.Str.StringBuilderUtils.ReplaceInterval(System.Text.StringBuilder,System.String,System.String,System.Int32,System.Int32,System.StringComparison,System.Boolean)"/>
            <example>
            Given the following string, "very very very very very very very", StringBuilder.ReplaceInterval("very", "happy", 2, sb.Length, StringComparison.CurrentCulture)
            will replace every second "very" with the word "happy" until the very end of the string. The result would be:
            "very happy very happy very happy very"
            </example>
            <example>
            Given the following string, "very very very very very very very", StringBuilder.ReplaceInterval("very", "happy", 2, 3)
            will replace every second "very" with the word "happy" until the third occurrence of "very". The result would be:
            "very happy very very very very very"
            </example>
            </summary>
            <param name="sb">The StringBuilder Instance</param>
            <param name="oldValue">The string to be replaced</param>
            <param name="newValue">The string to replace an occurrence of <paramref name="oldValue"/></param>
            <param name="every">The interval the replacement should follow - read as, "Replace every nth occurrence of <paramref name="oldValue"/>"</param>
            <param name="comparisonType">One of the enumeration values that determines how <paramref name="oldValue"/> is searched within this instance</param>
            <returns>This StringBuilder instance</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.ReplaceInterval(System.Text.StringBuilder,System.String,System.String,System.Int32,System.StringComparison,System.Boolean)">
            <summary>
            Returns this instance of the StringBuilder in which a specific occurrence of a specified string in the current instance
            is replaced another specified string on a integer defined interval. This allows certain occurrences/intervals of text
            up to a predefined stop count. This is an overload of <see cref="M:Ampere.Str.StringBuilderUtils.ReplaceInterval(System.Text.StringBuilder,System.String,System.String,System.Int32,System.Int32,System.StringComparison,System.Boolean)"/>
            <example>
            Given the following string, "very very very very very very very", StringBuilder.ReplaceInterval("very", "happy", 2, sb.Length, StringComparison.CurrentCulture)
            will replace every second "very" with the word "happy" until the very end of the string. The result would be:
            "very happy very happy very happy very"
            </example>
            <example>
            Given the following string, "very very very very very very very", StringBuilder.ReplaceInterval("very", "happy", 2, 3)
            will replace every second "very" with the word "happy" until the third occurrence of "very". The result would be:
            "very happy very very very very very"
            </example>
            </summary>
            <param name="sb">The StringBuilder Instance</param>
            <param name="oldValue">The string to be replaced</param>
            <param name="newValue">The string to replace an occurrence of <paramref name="oldValue"/></param>
            <param name="every">The interval the replacement should follow - read as, "Replace every nth occurrence of <paramref name="oldValue"/>"</param>
            <param name="comparisonType">One of the enumeration values that determines how <paramref name="oldValue"/> is searched within this instance</param>
            <param name="condition">The condition to satisfy before replacing the value</param>
            <returns>This StringBuilder instance</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.ReplaceInterval(System.Text.StringBuilder,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Returns this instance of the StringBuilder in which a specific occurrence of a specified string in the current instance
            is replaced another specified string on a integer defined interval. This allows certain occurrences/intervals of text
            up to a predefined stop count. This is an overload of <see cref="M:Ampere.Str.StringBuilderUtils.ReplaceInterval(System.Text.StringBuilder,System.String,System.String,System.Int32,System.Int32,System.StringComparison,System.Boolean)"/>
            <example>
            Given the following string, "very very very very very very very", StringBuilder.ReplaceInterval("very", "happy", 2, sb.Length, StringComparison.CurrentCulture)
            will replace every second "very" with the word "happy" until the very end of the string. The result would be:
            "very happy very happy very happy very"
            </example>
            <example>
            Given the following string, "very very very very very very very", StringBuilder.ReplaceInterval("very", "happy", 2, 3)
            will replace every second "very" with the word "happy" until the third occurrence of "very". The result would be:
            "very happy very very very very very"
            </example>
            </summary>
            <param name="sb">The StringBuilder Instance</param>
            <param name="oldValue">The string to be replaced</param>
            <param name="newValue">The string to replace an occurrence of <paramref name="oldValue"/></param>
            <param name="every">The interval the replacement should follow - read as, "Replace every nth occurrence of <paramref name="oldValue"/>"</param>
            <param name="stop">The number of found instances of <paramref name="oldValue"/></param> to seach before stopping
            <returns>This StringBuilder instance</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.ReplaceInterval(System.Text.StringBuilder,System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns this instance of the StringBuilder in which a specific occurrence of a specified string in the current instance
            is replaced another specified string on a integer defined interval. This allows certain occurrences/intervals of text
            up to a predefined stop count. This is an overload of <see cref="M:Ampere.Str.StringBuilderUtils.ReplaceInterval(System.Text.StringBuilder,System.String,System.String,System.Int32,System.Int32,System.StringComparison,System.Boolean)"/>
            <example>
            Given the following string, "very very very very very very very", StringBuilder.ReplaceInterval("very", "happy", 2, sb.Length, StringComparison.CurrentCulture)
            will replace every second "very" with the word "happy" until the very end of the string. The result would be:
            "very happy very happy very happy very"
            </example>
            <example>
            Given the following string, "very very very very very very very", StringBuilder.ReplaceInterval("very", "happy", 2, 3)
            will replace every second "very" with the word "happy" until the third occurrence of "very". The result would be:
            "very happy very very very very very"
            </example>
            </summary>
            <param name="sb">The StringBuilder Instance</param>
            <param name="oldValue">The string to be replaced</param>
            <param name="newValue">The string to replace an occurrence of <paramref name="oldValue"/></param>
            <param name="every">The interval the replacement should follow - read as, "Replace every nth occurrence of <paramref name="oldValue"/>"</param>
            <param name="stop">The number of found instances of <paramref name="oldValue"/></param> to seach before stopping
            <param name="condition">The condition to satisfy before replacing the value</param>
            <returns>This StringBuilder instance</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.ReplaceInterval(System.Text.StringBuilder,System.String,System.String,System.Int32,System.Int32,System.StringComparison)">
            <summary>
            Returns this instance of the StringBuilder in which a specific occurrence of a specified string in the current instance
            is replaced another specified string on a integer defined interval. This allows certain occurrences/intervals of text
            up to a predefined stop count.
            <example>
            Given the following string, "very very very very very very very", StringBuilder.ReplaceInterval("very", "happy", 2, sb.Length, StringComparison.CurrentCulture)
            will replace every second "very" with the word "happy" until the very end of the string. The result would be:
            "very happy very happy very happy very"
            </example>
            <example>
            Given the following string, "very very very very very very very", StringBuilder.ReplaceInterval("very", "happy", 2, 3)
            will replace every second "very" with the word "happy" until the third occurrence of "very". The result would be:
            "very happy very very very very very"
            </example>
            </summary>
            <param name="sb">The StringBuilder Instance</param>
            <param name="oldValue">The string to be replaced</param>
            <param name="newValue">The string to replace an occurrence of <paramref name="oldValue"/></param>
            <param name="every">The interval the replacement should follow - read as, "Replace every nth occurrence of <paramref name="oldValue"/>"</param>
            <param name="stop">The number of found instances of <paramref name="oldValue"/></param> to seach before stopping
            <param name="comparisonType">One of the enumeration values that determines how <paramref name="oldValue"/> is searched within this instance</param>
            <returns>This StringBuilder instance</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.ReplaceInterval(System.Text.StringBuilder,System.String,System.String,System.Int32,System.Int32,System.StringComparison,System.Boolean)">
            <summary>
            Returns this instance of the StringBuilder in which a specific occurrence of a specified string in the current instance
            is replaced another specified string on a integer defined interval. This allows certain occurrences/intervals of text
            up to a predefined stop count.
            <example>
            Given the following string, "very very very very very very very", StringBuilder.ReplaceInterval("very", "happy", 2, sb.Length, StringComparison.CurrentCulture)
            will replace every second "very" with the word "happy" until the very end of the string. The result would be:
            "very happy very happy very happy very"
            </example>
            <example>
            Given the following string, "very very very very very very very", StringBuilder.ReplaceInterval("very", "happy", 2, 3)
            will replace every second "very" with the word "happy" until the third occurrence of "very". The result would be:
            "very happy very very very very very"
            </example>
            </summary>
            <param name="sb">The StringBuilder Instance</param>
            <param name="oldValue">The string to be replaced</param>
            <param name="newValue">The string to replace an occurrence of <paramref name="oldValue"/></param>
            <param name="every">The interval the replacement should follow - read as, "Replace every nth occurrence of <paramref name="oldValue"/>"</param>
            <param name="stop">The number of found instances of <paramref name="oldValue"/></param> to seach before stopping
            <param name="comparisonType">One of the enumeration values that determines how <paramref name="oldValue"/> is searched within this instance</param>
            <param name="condition">The condition to satisfy before replacing the value</param>
            <returns>This StringBuilder instance</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.SubstringRng(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            Performs a Substring given a starting and ending index, similar to Java.
            The operation is performed mathematically as [startIndex, endIndex).
            </summary>
            <param name="sb">The StringBuilder instance</param>
            <param name="startIndex">The inclusive starting index of <paramref name="sb"/></param>
            <param name="endIndex">The exclusive ending index of <paramref name="sb"/></param>
            <returns>A string that is equivalent to the substring that begins at startIndex in this 
            instance, or Empty if startIndex is equal to the length of this instance.</returns>
        </member>
        <member name="M:Ampere.Str.StringBuilderUtils.SubstringRng(System.Text.StringBuilder,System.Int32)">
            <summary>
            Performs a Substring given a starting and ending index, similar to Java.
            The operation is performed mathematically as [startIndex, endIndex).
            </summary>
            <param name="sb">The StringBuilder instance</param>
            <param name="startIndex">The inclusive starting index of <paramref name="sb"/></param>
            <returns>A string that is equivalent to the substring that begins at startIndex in this 
            instance, or Empty if startIndex is equal to the length of this instance.</returns>
        </member>
        <member name="T:Ampere.Str.StringUtils">
            <summary>
            A static utility class for string extension methods.
            </summary>
        </member>
        <member name="F:Ampere.Str.StringUtils.CharSpace">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ampere.Str.StringUtils.CharToString(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Converts a <see cref="T:System.Collections.Generic.IEnumerable`1"/> to a string
            </summary>
            <param name="charEnumerable">The <see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="charEnumerable"/> is null</exception>
            <returns>The converted string</returns>
        </member>
        <member name="M:Ampere.Str.StringUtils.Chomp(System.String)">
            <summary>
            Creates a string from the first character of the string to the first whitespace.
            </summary>
            <param name="str">The string to be chomped</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="str"/> is null</exception>
            <returns>The string retaining the first word</returns>
        </member>
        <member name="M:Ampere.Str.StringUtils.ChompAfter(System.String,System.Int32)">
            <summary>
            Creates a string from the first character of the string to the nth whitespace that is specified.
            </summary>
            <param name="str">The string to be chomped</param>
            <param name="spaces">The amount of white space to chomp after</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="str"/> is null</exception>
            <returns>The string retaining the chomped word</returns>
        </member>
        <member name="M:Ampere.Str.StringUtils.ContainsDigits(System.String)">
            <summary>
            Checks if a given string contains any digits.
            </summary>
            <param name="str">The string to be used</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="str"/> is null</exception>
            <returns>True if the string contains any digits, false otherwise</returns>
        </member>
        <member name="M:Ampere.Str.StringUtils.ContainsDuplicateChars(System.String)">
            <summary>
            Checks whether a string contains duplicate characters.
            </summary>
            <param name="str">The string to be used</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="str"/> is null</exception>
            <returns>True if their are duplicate characters. False, otherwise</returns>
        </member>
        <member name="M:Ampere.Str.StringUtils.ContainsDuplicateStrings(System.String,System.String)">
            <summary>
            Checks whether a string contains duplicate inner strings.
            </summary>
            <param name="str">The string to be used</param>
            <param name="arg">The inner string to search for duplicates</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="str"/> is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="arg"/> is null</exception>
            <returns>True if their are duplicate inner strings. False, otherwise</returns>
        </member>
        <member name="M:Ampere.Str.StringUtils.CountLetters(System.String,System.Char)">
            <summary>
            Counts how many times a given letter appears in a string.
            </summary>
            <param name="str">The string to be used</param>
            <param name="letter">The specific letter to search</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="str"/> is null</exception>
            <returns></returns>
        </member>
        <member name="M:Ampere.Str.StringUtils.CountWords(System.String)">
            <summary>
            Counts the number of words in a string.
            </summary>
            <param name="str">The string to be used</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="str"/> is null</exception>
            <returns>The number of words in the string</returns>
        </member>
        <member name="M:Ampere.Str.StringUtils.IsPalindrome(System.String,System.Boolean)">
            <summary>
            Checks if a given string is a palindrome.
            </summary>
            <param name="str">The string to be used</param>
            <param name="ignoreCase">Whether case should be ignored</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="str"/> is null</exception>
            <returns>True if the string is a palindrome</returns>
        </member>
        <member name="M:Ampere.Str.StringUtils.IsStrictlyDecreasing(System.String,System.Boolean)">
            <summary>
            Checks if each character in a string is lexicographically smaller than the previous character.
            </summary>
            <param name="str">The string to be used</param>
            <param name="ignoreCase">Whether case should be ignored</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="str"/> is null</exception>
            <returns>True if the string strictly increases</returns>
        </member>
        <member name="M:Ampere.Str.StringUtils.IsStrictlyIncreasing(System.String,System.Boolean)">
            <summary>
            Checks if each character in a string is lexicographically greater than the previous character.
            </summary>
            <param name="str">The string to be used</param>
            <param name="ignoreCase">Whether case should be ignored</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="str"/> is null</exception>
            <returns>True if the string strictly increases</returns>
        </member>
        <member name="M:Ampere.Str.StringUtils.IsSystemDateTime(System.String,System.String)">
            <summary>
            Checks if a given string is a valid date used by System.DateTime
            </summary>
            <param name="date">The string to be used</param>
            <param name="formattingRegex">The date format regex</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="date"/> is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="formattingRegex"/> is null</exception>
            <returns>True if the string is a valid date recognized by System.DateTime</returns>
        </member>
        <member name="M:Ampere.Str.StringUtils.IsValidUri(System.String)">
            <summary>
            Checks if a given string is a valid URI. This checks both HTTP and HTTPS URLs.
            </summary>
            <param name="uri">The string to be used</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="uri"/> is null</exception>
            <returns>True if the URI is valid</returns>
        </member>
        <member name="M:Ampere.Str.StringUtils.IsWellFormed(System.String)">
             <summary>
             Checks if a string is well formed. A string is well formed if
             for every alphabet-recognized character, there is an appropriate
             closing character. For every inner string, with the exception
             of characters not defined in the alphabet, in between an opening
             and closing character, if that string were to be split in half,
             each half would be a mirror image of each other. A well formed
             string consists of the default alphabet consists of the following
             characters: '(',')','{','}','[',']','&lt;','>'.
             </summary>
             <param name="str">the string to check</param>
             <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="str"/> is null</exception>
             <returns>whether the string is well formed</returns>
             <example>The following demonstrates how to use the <see cref="M:Ampere.Str.StringUtils.IsWellFormed(System.String)"/> method.</example>
             <code>
            
             using static Utilities.StringUtils;
            
             class TestClass
             {
                 static void Main(string[] args)
                 {
                     Console.WriteLine("&lt;&lt;()>>{}{}".IsWellFormed()); //prints true
                     Console.WriteLine("{([)]}".IsWellFormed()) //prints false
                 }
             }
             </code>
        </member>
        <member name="M:Ampere.Str.StringUtils.IsWellFormed(System.String,System.Collections.Generic.Dictionary{System.Char,System.Char})">
             <summary>
             Checks if a string is well formed. A string is well formed if
             for every alphabet-recognized character, there is an appropriate
             closing character. For every inner string, with the exception
             of characters not defined in the alphabet, in between an opening
             and closing character, if that string were to be split in half,
             each half would be a mirror image of each other. A well formed
             string consists of the user specified Dictionary of key-value
             pairs, where the key is the opening character and the value
             is the closing character.
             </summary>
             <param name="str">the string to check</param>
             <param name="alphabet">the dictionary of key value pairs - where the key
             represents the opening character and the value represents the closing character</param>
             <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="str"/> is null</exception>
             <returns>whether the string is well formed</returns>
             <example>The following demonstrates how to use the
             <see cref="M:Ampere.Str.StringUtils.IsWellFormed(System.String,System.Collections.Generic.Dictionary{System.Char,System.Char})"/> method.</example>
             <code>
            
             using static Utilities.StringUtils;
             using System.Collections.Generic;
            
             class TestClass
             {
                 static void Main(string[] args)
                 {
                     var dict = new Dictionary&lt;char, char>();
                     {
                         {'/','\'},
                         {'(',')'}
                     };
                     Console.WriteLine("(/Manu\)".IsWellFormed(dict)); //prints true
                 }
             }
             </code>
        </member>
        <member name="M:Ampere.Str.StringUtils.LongestCommonPrefix(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Finds the longest common prefix of a group of strings of type 
            <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="strs">A group of strings to find the common prefix</param>
            <param name="ignoreCase">A flag whether to ignore case</param>
            <returns>The longest common prefix</returns>
        </member>
        <member name="M:Ampere.Str.StringUtils.OrderByLength(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Orders an enumerable by its length in ascending order (natural order).
            </summary>
            <param name="si">the <see cref="T:System.Collections.Generic.IEnumerable`1"/> si</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="si"/> is null</exception>
            <returns>An ordered enumerable</returns>
        </member>
        <member name="M:Ampere.Str.StringUtils.RemoveAll(System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Char}[])">
            <summary>
            Removes all instances of any number of characters from a specified string.
            </summary>
            <param name="str">The string to be used</param>
            <param name="ignoreCase">Whether case should be ignored</param>
            <param name="args">The characters which will be removed</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="str"/> is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="args"/> is null</exception>
            <returns>The string with all characters in args removed</returns>
        </member>
        <member name="M:Ampere.Str.StringUtils.RemoveAll(System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String}[])">
            <summary>
            Removes all instances of any number of strings from a specified string.
            </summary>
            <param name="str">The string to be used</param>
            <param name="ignoreCase">Whether case should be ignored</param>
            <param name="args">The characters which will be removed</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="str"/> is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="args"/> is null</exception>
            <returns>The string with all characters in args removed</returns>
        </member>
        <member name="M:Ampere.Str.StringUtils.ReplaceAt(System.String,System.Int32,System.Char)">
            <summary>
            Replaces a character at a specific index in a string, only once.
            </summary>
            <param name="str">The string to be used</param>
            <param name="c">The character to replace</param>
            <param name="index">The index to replace <paramref name="c"/></param>
        </member>
        <member name="M:Ampere.Str.StringUtils.Reverse(System.String)">
            <summary>
            Reverses a string from left to right order while maintaining case sensitivity.
            </summary>
            <param name="str">The string to be reversed</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="str"/> is null</exception>
            <returns>The reversed string</returns>
        </member>
        <member name="M:Ampere.Str.StringUtils.Shuffle(System.String,System.Boolean)">
            <summary>
            Shuffle's characters in a string. The methodology used to generate random
            indices used for shuffling is cryptographically strong. Due to this nature,
            there is no guarantee that the return string will be entirely different
            than the original.
            </summary>
            <param name="str">The string to be shuffled</param>
            <param name="preserveSpaces">Determines whether to shuffle spaces or not</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="str"/> is null</exception>
            <returns>The shuffled string</returns>
        </member>
        <member name="M:Ampere.Str.StringUtils.SubstringRng(System.String,System.Int32,System.Int32)">
            <summary>
            Performs a Substring given a starting and ending index, similar to Java.
            The operation is performed mathematically as [startIndex, endIndex).
            </summary>
            <param name="str">The given string</param>
            <param name="startIndex">The inclusive starting index of <paramref name="str"/></param>
            <param name="endIndex">The exclusive ending index of <paramref name="str"/></param>
            <returns>A string that is equivalent to the substring that begins at startIndex in this 
            instance, or Empty if startIndex is equal to the length of this instance.</returns>
        </member>
        <member name="M:Ampere.Str.StringUtils.SubstringRng(System.String,System.Int32)">
            <summary>
            Performs a Substring given a starting and ending index, similar to Java.
            The operation is performed mathematically as [startIndex, endIndex).
            </summary>
            <param name="str">The given string</param>
            <param name="startIndex">The inclusive starting index of <paramref name="str"/></param>
            <returns>A string that is equivalent to the substring that begins at startIndex in this 
            instance, or Empty if startIndex is equal to the length of this instance.</returns>
        </member>
        <member name="M:Ampere.Str.StringUtils.IsZeroOrOne(System.String)">
            <summary>
            Returns true if the length of the string is zero or one.
            </summary>
            <param name="str">The string to be used</param>
            <returns>True if the length of the string is zero or one</returns>
        </member>
        <member name="T:Ampere.Str.WellFormedUtility">
            <summary>
            A utility class that contains functions to determine
            whether a string is a well formed string.
            </summary>
        </member>
        <member name="P:Ampere.Str.WellFormedUtility.Alphabet">
            <summary>
            An instance of the Dictionary containing this alphabet.
            </summary>
        </member>
        <member name="M:Ampere.Str.WellFormedUtility.#ctor(System.Collections.Generic.Dictionary{System.Char,System.Char})">
            <summary>
            constructor that sets up the alphabet
            </summary>
            <param name="dct">A dictionary representing an alphabet</param>
        </member>
        <member name="P:Ampere.Str.WellFormedUtility.DefaultAlphabet">
            <summary>
            The default alphabet
            </summary>
        </member>
        <member name="M:Ampere.Str.WellFormedUtility.Run(System.String)">
            <summary>
            Verifies if the string is well formed by using
            a stack data structure to measure the balance of the string.
            </summary>
            <param name="inp">The input string</param>
            <returns></returns>
        </member>
    </members>
</doc>

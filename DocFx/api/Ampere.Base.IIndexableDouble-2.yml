### YamlMime:ManagedReference
items:
- uid: Ampere.Base.IIndexableDouble`2
  commentId: T:Ampere.Base.IIndexableDouble`2
  id: IIndexableDouble`2
  parent: Ampere.Base
  children:
  - Ampere.Base.IIndexableDouble`2.Item(`0,`0)
  langs:
  - csharp
  - vb
  name: IIndexableDouble<TKey, TVal>
  nameWithType: IIndexableDouble<TKey, TVal>
  fullName: Ampere.Base.IIndexableDouble<TKey, TVal>
  type: Interface
  source:
    remote:
      path: Ampere/Base/IIndexable.cs
      branch: main
      repo: https://github.com/manu-p-1/Ampere.git
    id: IIndexableDouble
    path: ../Ampere/Base/IIndexable.cs
    startLine: 37
  assemblies:
  - Ampere
  namespace: Ampere.Base
  summary: "\nSpecifies an indexer with two dimensions.\n"
  example: []
  syntax:
    content: public interface IIndexableDouble<in TKey, TVal>
    typeParameters:
    - id: TKey
      description: The element type of the key
    - id: TVal
      description: The element type of the value
    content.vb: Public Interface IIndexableDouble(Of In TKey, TVal)
  nameWithType.vb: IIndexableDouble(Of TKey, TVal)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Ampere.Base.IIndexableDouble(Of TKey, TVal)
  name.vb: IIndexableDouble(Of TKey, TVal)
- uid: Ampere.Base.IIndexableDouble`2.Item(`0,`0)
  commentId: P:Ampere.Base.IIndexableDouble`2.Item(`0,`0)
  id: Item(`0,`0)
  parent: Ampere.Base.IIndexableDouble`2
  langs:
  - csharp
  - vb
  name: Item[TKey, TKey]
  nameWithType: IIndexableDouble<TKey, TVal>.Item[TKey, TKey]
  fullName: Ampere.Base.IIndexableDouble<TKey, TVal>.Item[TKey, TKey]
  type: Property
  source:
    remote:
      path: Ampere/Base/IIndexable.cs
      branch: main
      repo: https://github.com/manu-p-1/Ampere.git
    id: this[]
    path: ../Ampere/Base/IIndexable.cs
    startLine: 45
  assemblies:
  - Ampere
  namespace: Ampere.Base
  summary: "\nThe two dimension read/write indexer.\n"
  example: []
  syntax:
    content: TVal this[TKey key, TKey key2] { get; set; }
    parameters:
    - id: key
      type: '{TKey}'
      description: The first key to assign to the indexer
    - id: key2
      type: '{TKey}'
      description: The second key to assign to the indexer
    return:
      type: '{TVal}'
      description: The TVal generic type
    content.vb: Property Item(key As TKey, key2 As TKey) As TVal
  overload: Ampere.Base.IIndexableDouble`2.Item*
  nameWithType.vb: IIndexableDouble(Of TKey, TVal).Item(TKey, TKey)
  modifiers.csharp:
  - get
  - set
  fullName.vb: Ampere.Base.IIndexableDouble(Of TKey, TVal).Item(TKey, TKey)
  name.vb: Item(TKey, TKey)
references:
- uid: Ampere.Base
  commentId: N:Ampere.Base
  name: Ampere.Base
  nameWithType: Ampere.Base
  fullName: Ampere.Base
- uid: Ampere.Base.IIndexableDouble`2.Item*
  commentId: Overload:Ampere.Base.IIndexableDouble`2.Item
  name: Item
  nameWithType: IIndexableDouble<TKey, TVal>.Item
  fullName: Ampere.Base.IIndexableDouble<TKey, TVal>.Item
  nameWithType.vb: IIndexableDouble(Of TKey, TVal).Item
  fullName.vb: Ampere.Base.IIndexableDouble(Of TKey, TVal).Item
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: '{TVal}'
  commentId: '!:TVal'
  definition: TVal
  name: TVal
  nameWithType: TVal
  fullName: TVal
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TVal
  name: TVal
  nameWithType: TVal
  fullName: TVal

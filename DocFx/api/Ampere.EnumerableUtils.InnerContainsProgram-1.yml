### YamlMime:ManagedReference
items:
- uid: Ampere.EnumerableUtils.InnerContainsProgram`1
  commentId: T:Ampere.EnumerableUtils.InnerContainsProgram`1
  id: InnerContainsProgram`1
  parent: Ampere.EnumerableUtils
  children:
  - Ampere.EnumerableUtils.InnerContainsProgram`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Collections.Generic.IEnumerable{`0}[])
  - Ampere.EnumerableUtils.InnerContainsProgram`1.CheckContains
  - Ampere.EnumerableUtils.InnerContainsProgram`1.ViolatedEnumerable
  langs:
  - csharp
  - vb
  name: InnerContainsProgram<T>
  nameWithType: InnerContainsProgram<T>
  fullName: Ampere.EnumerableUtils.InnerContainsProgram<T>
  type: Class
  source:
    remote:
      path: Ampere/EnumerableUtils/InnerContainsProgram.cs
      branch: main
      repo: https://github.com/manu-p-1/Ampere.git
    id: InnerContainsProgram
    path: ../Ampere/EnumerableUtils/InnerContainsProgram.cs
    startLine: 13
  assemblies:
  - Ampere
  namespace: Ampere.EnumerableUtils
  summary: "\nProgram to check whether all values in one or more enumerables&apos;s are included in a\nspecified enumerable.\n"
  example: []
  syntax:
    content: public class InnerContainsProgram<T>
    typeParameters:
    - id: T
      description: The type of the IEnumerable
    content.vb: Public Class InnerContainsProgram(Of T)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: InnerContainsProgram(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Ampere.EnumerableUtils.InnerContainsProgram(Of T)
  name.vb: InnerContainsProgram(Of T)
- uid: Ampere.EnumerableUtils.InnerContainsProgram`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Collections.Generic.IEnumerable{`0}[])
  commentId: M:Ampere.EnumerableUtils.InnerContainsProgram`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Collections.Generic.IEnumerable{`0}[])
  id: '#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Collections.Generic.IEnumerable{`0}[])'
  parent: Ampere.EnumerableUtils.InnerContainsProgram`1
  langs:
  - csharp
  - vb
  name: InnerContainsProgram(IEnumerable<T>, Boolean, IEnumerable<T>[])
  nameWithType: InnerContainsProgram<T>.InnerContainsProgram(IEnumerable<T>, Boolean, IEnumerable<T>[])
  fullName: Ampere.EnumerableUtils.InnerContainsProgram<T>.InnerContainsProgram(System.Collections.Generic.IEnumerable<T>, System.Boolean, System.Collections.Generic.IEnumerable<T>[])
  type: Constructor
  source:
    remote:
      path: Ampere/EnumerableUtils/InnerContainsProgram.cs
      branch: main
      repo: https://github.com/manu-p-1/Ampere.git
    id: .ctor
    path: ../Ampere/EnumerableUtils/InnerContainsProgram.cs
    startLine: 41
  assemblies:
  - Ampere
  namespace: Ampere.EnumerableUtils
  summary: "\nThe Constructor to create a new instance of the InnerContainsProgram\n"
  example: []
  syntax:
    content: public InnerContainsProgram(IEnumerable<T> baseArray, bool isAll, params IEnumerable<T>[] otherArrays)
    parameters:
    - id: baseArray
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The IEnumberable to check against
    - id: isAll
      type: System.Boolean
      description: Indicates whether to check whether all values are intersected or partially intersected
    - id: otherArrays
      type: System.Collections.Generic.IEnumerable{{T}}[]
      description: The list of IEnumberables to check against the baseArray
    content.vb: Public Sub New(baseArray As IEnumerable(Of T), isAll As Boolean, ParamArray otherArrays As IEnumerable(Of T)())
  overload: Ampere.EnumerableUtils.InnerContainsProgram`1.#ctor*
  nameWithType.vb: InnerContainsProgram(Of T).InnerContainsProgram(IEnumerable(Of T), Boolean, IEnumerable(Of T)())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Ampere.EnumerableUtils.InnerContainsProgram(Of T).InnerContainsProgram(System.Collections.Generic.IEnumerable(Of T), System.Boolean, System.Collections.Generic.IEnumerable(Of T)())
  name.vb: InnerContainsProgram(IEnumerable(Of T), Boolean, IEnumerable(Of T)())
- uid: Ampere.EnumerableUtils.InnerContainsProgram`1.CheckContains
  commentId: M:Ampere.EnumerableUtils.InnerContainsProgram`1.CheckContains
  id: CheckContains
  parent: Ampere.EnumerableUtils.InnerContainsProgram`1
  langs:
  - csharp
  - vb
  name: CheckContains()
  nameWithType: InnerContainsProgram<T>.CheckContains()
  fullName: Ampere.EnumerableUtils.InnerContainsProgram<T>.CheckContains()
  type: Method
  source:
    remote:
      path: Ampere/EnumerableUtils/InnerContainsProgram.cs
      branch: main
      repo: https://github.com/manu-p-1/Ampere.git
    id: CheckContains
    path: ../Ampere/EnumerableUtils/InnerContainsProgram.cs
    startLine: 56
  assemblies:
  - Ampere
  namespace: Ampere.EnumerableUtils
  summary: "\nChecks whether each array specified in otherArrays is completely contained in the\nbase array. Each value in each array must be contained in the base array for this\nmethod to return true, otherwise, false is returned and the ViolatedEnumerable property\nis set with the enumerable that violated the condition. This function runs a LINQ intersection\nbetween each enumerable.\n"
  example: []
  syntax:
    content: public bool CheckContains()
    return:
      type: System.Boolean
      description: True if each enumerable is contained in the base and false otherwise.
    content.vb: Public Function CheckContains As Boolean
  overload: Ampere.EnumerableUtils.InnerContainsProgram`1.CheckContains*
  nameWithType.vb: InnerContainsProgram(Of T).CheckContains()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Ampere.EnumerableUtils.InnerContainsProgram(Of T).CheckContains()
- uid: Ampere.EnumerableUtils.InnerContainsProgram`1.ViolatedEnumerable
  commentId: P:Ampere.EnumerableUtils.InnerContainsProgram`1.ViolatedEnumerable
  id: ViolatedEnumerable
  parent: Ampere.EnumerableUtils.InnerContainsProgram`1
  langs:
  - csharp
  - vb
  name: ViolatedEnumerable
  nameWithType: InnerContainsProgram<T>.ViolatedEnumerable
  fullName: Ampere.EnumerableUtils.InnerContainsProgram<T>.ViolatedEnumerable
  type: Property
  source:
    remote:
      path: Ampere/EnumerableUtils/InnerContainsProgram.cs
      branch: main
      repo: https://github.com/manu-p-1/Ampere.git
    id: ViolatedEnumerable
    path: ../Ampere/EnumerableUtils/InnerContainsProgram.cs
    startLine: 89
  assemblies:
  - Ampere
  namespace: Ampere.EnumerableUtils
  summary: "\nA property to identify which enumerable violated the containing condition. This method\nreturns null unless <xref href=\"Ampere.EnumerableUtils.InnerContainsProgram%601.CheckContains\" data-throw-if-not-resolved=\"false\"></xref> is executed.\n"
  example: []
  syntax:
    content: public IEnumerable<T> ViolatedEnumerable { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public ReadOnly Property ViolatedEnumerable As IEnumerable(Of T)
  overload: Ampere.EnumerableUtils.InnerContainsProgram`1.ViolatedEnumerable*
  nameWithType.vb: InnerContainsProgram(Of T).ViolatedEnumerable
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Ampere.EnumerableUtils.InnerContainsProgram(Of T).ViolatedEnumerable
references:
- uid: Ampere.EnumerableUtils
  commentId: N:Ampere.EnumerableUtils
  name: Ampere.EnumerableUtils
  nameWithType: Ampere.EnumerableUtils
  fullName: Ampere.EnumerableUtils
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Ampere.EnumerableUtils.InnerContainsProgram`1.#ctor*
  commentId: Overload:Ampere.EnumerableUtils.InnerContainsProgram`1.#ctor
  name: InnerContainsProgram
  nameWithType: InnerContainsProgram<T>.InnerContainsProgram
  fullName: Ampere.EnumerableUtils.InnerContainsProgram<T>.InnerContainsProgram
  nameWithType.vb: InnerContainsProgram(Of T).InnerContainsProgram
  fullName.vb: Ampere.EnumerableUtils.InnerContainsProgram(Of T).InnerContainsProgram
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEnumerable{{T}}[]
  isExternal: true
  name: IEnumerable<T>[]
  nameWithType: IEnumerable<T>[]
  fullName: System.Collections.Generic.IEnumerable<T>[]
  nameWithType.vb: IEnumerable(Of T)()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)()
  name.vb: IEnumerable(Of T)()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Ampere.EnumerableUtils.InnerContainsProgram`1.CheckContains*
  commentId: Overload:Ampere.EnumerableUtils.InnerContainsProgram`1.CheckContains
  name: CheckContains
  nameWithType: InnerContainsProgram<T>.CheckContains
  fullName: Ampere.EnumerableUtils.InnerContainsProgram<T>.CheckContains
  nameWithType.vb: InnerContainsProgram(Of T).CheckContains
  fullName.vb: Ampere.EnumerableUtils.InnerContainsProgram(Of T).CheckContains
- uid: Ampere.EnumerableUtils.InnerContainsProgram`1.CheckContains
  commentId: M:Ampere.EnumerableUtils.InnerContainsProgram`1.CheckContains
  isExternal: true
- uid: Ampere.EnumerableUtils.InnerContainsProgram`1.ViolatedEnumerable*
  commentId: Overload:Ampere.EnumerableUtils.InnerContainsProgram`1.ViolatedEnumerable
  name: ViolatedEnumerable
  nameWithType: InnerContainsProgram<T>.ViolatedEnumerable
  fullName: Ampere.EnumerableUtils.InnerContainsProgram<T>.ViolatedEnumerable
  nameWithType.vb: InnerContainsProgram(Of T).ViolatedEnumerable
  fullName.vb: Ampere.EnumerableUtils.InnerContainsProgram(Of T).ViolatedEnumerable

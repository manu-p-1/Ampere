### YamlMime:ManagedReference
items:
- uid: Ampere.Statistics.EnumerableStats
  commentId: T:Ampere.Statistics.EnumerableStats
  id: EnumerableStats
  parent: Ampere.Statistics
  children:
  - Ampere.Statistics.EnumerableStats.ConstructTValue(System.Double,System.Double,System.Double,System.Double)
  - Ampere.Statistics.EnumerableStats.CreateConfidenceInterval(System.Double,System.Double,System.Double)
  - Ampere.Statistics.EnumerableStats.InterQuartileRange(System.Collections.Generic.IEnumerable{System.Double})
  - Ampere.Statistics.EnumerableStats.InterQuartileRange``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  - Ampere.Statistics.EnumerableStats.IsNormalMean(System.Collections.Generic.IEnumerable{System.Double})
  - Ampere.Statistics.EnumerableStats.IsNormalMean``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  - Ampere.Statistics.EnumerableStats.IsNormalProportion(System.Collections.Generic.IEnumerable{System.Double},System.Double)
  - Ampere.Statistics.EnumerableStats.IsNormalProportion``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Double)
  - Ampere.Statistics.EnumerableStats.LowerQuartile(System.Collections.Generic.IEnumerable{System.Double})
  - Ampere.Statistics.EnumerableStats.LowerQuartile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  - Ampere.Statistics.EnumerableStats.Mean``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  - Ampere.Statistics.EnumerableStats.Median``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  - Ampere.Statistics.EnumerableStats.Mode(System.Collections.Generic.IEnumerable{System.Double})
  - Ampere.Statistics.EnumerableStats.Mode``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  - Ampere.Statistics.EnumerableStats.PopulationStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})
  - Ampere.Statistics.EnumerableStats.PopulationStandardDeviation``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  - Ampere.Statistics.EnumerableStats.PopulationVariance(System.Collections.Generic.IEnumerable{System.Double})
  - Ampere.Statistics.EnumerableStats.PopulationVariance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  - Ampere.Statistics.EnumerableStats.Range(System.Collections.Generic.IEnumerable{System.Double})
  - Ampere.Statistics.EnumerableStats.Range``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  - Ampere.Statistics.EnumerableStats.SampleStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})
  - Ampere.Statistics.EnumerableStats.SampleStandardDeviation``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  - Ampere.Statistics.EnumerableStats.SampleVariance(System.Collections.Generic.IEnumerable{System.Double})
  - Ampere.Statistics.EnumerableStats.SampleVariance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  - Ampere.Statistics.EnumerableStats.StandardizedScore(System.Collections.Generic.IEnumerable{System.Double},System.Double)
  - Ampere.Statistics.EnumerableStats.StandardizedScore``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Double)
  - Ampere.Statistics.EnumerableStats.UpperQuartile(System.Collections.Generic.IEnumerable{System.Double})
  - Ampere.Statistics.EnumerableStats.UpperQuartile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  langs:
  - csharp
  - vb
  name: EnumerableStats
  nameWithType: EnumerableStats
  fullName: Ampere.Statistics.EnumerableStats
  type: Class
  source:
    remote:
      path: Ampere/Statistics/EnumerableStats.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: EnumerableStats
    path: ../Ampere/Statistics/EnumerableStats.cs
    startLine: 12
  assemblies:
  - Ampere
  namespace: Ampere.Statistics
  summary: "\nA static utility class for calculating a variety of statistics based on IEnumerables. Moreover,\ngeneric overload methods exist to simplify calculating statistics of object enumerables containing\nnumeric properties.\n"
  example: []
  syntax:
    content: public static class EnumerableStats
    content.vb: Public Module EnumerableStats
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Ampere.Statistics.EnumerableStats.Mean``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.Mean``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  id: Mean``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: Ampere.Statistics.EnumerableStats
  langs:
  - csharp
  - vb
  name: Mean<T>(IEnumerable<T>, Func<T, Double>)
  nameWithType: EnumerableStats.Mean<T>(IEnumerable<T>, Func<T, Double>)
  fullName: Ampere.Statistics.EnumerableStats.Mean<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Double>)
  type: Method
  source:
    remote:
      path: Ampere/Statistics/EnumerableStats.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: Mean
    path: ../Ampere/Statistics/EnumerableStats.cs
    startLine: 48
  assemblies:
  - Ampere
  namespace: Ampere.Statistics
  summary: "\nA generic overload of the <xref href=\"Ampere.Statistics.EnumerableStats.Mean(System.Collections.Generic.IEnumerable%7bSystem.Double%7d)\" data-throw-if-not-resolved=\"false\"></xref> method. This method will call\nthe <xref href=\"Ampere.Statistics.EnumerableStats.Mean(System.Collections.Generic.IEnumerable%7bSystem.Double%7d)\" data-throw-if-not-resolved=\"false\"></xref> overload.\n"
  example: []
  syntax:
    content: public static double Mean<T>(this IEnumerable<T> numbers, Func<T, double> selector)
    parameters:
    - id: numbers
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The specified enumerable
    - id: selector
      type: System.Func{{T},System.Double}
      description: The numeral specifier
    typeParameters:
    - id: T
      description: The type of the enumerable
    return:
      type: System.Double
      description: The average of all the elements in the source
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Mean(Of T)(numbers As IEnumerable(Of T), selector As Func(Of T, Double)) As Double
  overload: Ampere.Statistics.EnumerableStats.Mean*
  nameWithType.vb: EnumerableStats.Mean(Of T)(IEnumerable(Of T), Func(Of T, Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Ampere.Statistics.EnumerableStats.Mean(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Double))
  name.vb: Mean(Of T)(IEnumerable(Of T), Func(Of T, Double))
- uid: Ampere.Statistics.EnumerableStats.Median``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.Median``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  id: Median``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: Ampere.Statistics.EnumerableStats
  langs:
  - csharp
  - vb
  name: Median<T>(IEnumerable<T>, Func<T, Double>)
  nameWithType: EnumerableStats.Median<T>(IEnumerable<T>, Func<T, Double>)
  fullName: Ampere.Statistics.EnumerableStats.Median<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Double>)
  type: Method
  source:
    remote:
      path: Ampere/Statistics/EnumerableStats.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: Median
    path: ../Ampere/Statistics/EnumerableStats.cs
    startLine: 94
  assemblies:
  - Ampere
  namespace: Ampere.Statistics
  summary: "\nA generic overload of the <xref href=\"Ampere.Statistics.EnumerableStats.Median(System.Collections.Generic.IEnumerable%7bSystem.Double%7d)\" data-throw-if-not-resolved=\"false\"></xref> method. This method will call\nthe <xref href=\"Ampere.Statistics.EnumerableStats.Median(System.Collections.Generic.IEnumerable%7bSystem.Double%7d)\" data-throw-if-not-resolved=\"false\"></xref> overload.\n"
  example: []
  syntax:
    content: public static double Median<T>(this IEnumerable<T> numbers, Func<T, double> selector)
    parameters:
    - id: numbers
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The specified enumerable
    - id: selector
      type: System.Func{{T},System.Double}
      description: The numeral specifier
    typeParameters:
    - id: T
      description: The type of the enumerable
    return:
      type: System.Double
      description: The median of the source
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Median(Of T)(numbers As IEnumerable(Of T), selector As Func(Of T, Double)) As Double
  overload: Ampere.Statistics.EnumerableStats.Median*
  nameWithType.vb: EnumerableStats.Median(Of T)(IEnumerable(Of T), Func(Of T, Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Ampere.Statistics.EnumerableStats.Median(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Double))
  name.vb: Median(Of T)(IEnumerable(Of T), Func(Of T, Double))
- uid: Ampere.Statistics.EnumerableStats.Mode(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.Mode(System.Collections.Generic.IEnumerable{System.Double})
  id: Mode(System.Collections.Generic.IEnumerable{System.Double})
  isExtensionMethod: true
  parent: Ampere.Statistics.EnumerableStats
  langs:
  - csharp
  - vb
  name: Mode(IEnumerable<Double>)
  nameWithType: EnumerableStats.Mode(IEnumerable<Double>)
  fullName: Ampere.Statistics.EnumerableStats.Mode(System.Collections.Generic.IEnumerable<System.Double>)
  type: Method
  source:
    remote:
      path: Ampere/Statistics/EnumerableStats.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: Mode
    path: ../Ampere/Statistics/EnumerableStats.cs
    startLine: 107
  assemblies:
  - Ampere
  namespace: Ampere.Statistics
  summary: "\nFinds the mode of all the elements in the enumerable.\n"
  example: []
  syntax:
    content: public static double Mode(this IEnumerable<double> src)
    parameters:
    - id: src
      type: System.Collections.Generic.IEnumerable{System.Double}
      description: The IEnumerable of type double
    return:
      type: System.Double
      description: The mode of the source
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Mode(src As IEnumerable(Of Double)) As Double
  overload: Ampere.Statistics.EnumerableStats.Mode*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when the source is null
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown when the source is of length 0
  - type: Ampere.Statistics.NoModeException
    commentId: T:Ampere.Statistics.NoModeException
    description: Thrown when no mode exists for the source
  nameWithType.vb: EnumerableStats.Mode(IEnumerable(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Ampere.Statistics.EnumerableStats.Mode(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: Mode(IEnumerable(Of Double))
- uid: Ampere.Statistics.EnumerableStats.Mode``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.Mode``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  id: Mode``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: Ampere.Statistics.EnumerableStats
  langs:
  - csharp
  - vb
  name: Mode<T>(IEnumerable<T>, Func<T, Double>)
  nameWithType: EnumerableStats.Mode<T>(IEnumerable<T>, Func<T, Double>)
  fullName: Ampere.Statistics.EnumerableStats.Mode<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Double>)
  type: Method
  source:
    remote:
      path: Ampere/Statistics/EnumerableStats.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: Mode
    path: ../Ampere/Statistics/EnumerableStats.cs
    startLine: 161
  assemblies:
  - Ampere
  namespace: Ampere.Statistics
  summary: "\nA generic overload of the <xref href=\"Ampere.Statistics.EnumerableStats.Mode(System.Collections.Generic.IEnumerable%7bSystem.Double%7d)\" data-throw-if-not-resolved=\"false\"></xref> method. This method will call\nthe <xref href=\"Ampere.Statistics.EnumerableStats.Mode(System.Collections.Generic.IEnumerable%7bSystem.Double%7d)\" data-throw-if-not-resolved=\"false\"></xref> overload.\n"
  example: []
  syntax:
    content: public static double Mode<T>(this IEnumerable<T> numbers, Func<T, double> selector)
    parameters:
    - id: numbers
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The specified enumerable
    - id: selector
      type: System.Func{{T},System.Double}
      description: The numeral specifier
    typeParameters:
    - id: T
      description: The type of the enumerable
    return:
      type: System.Double
      description: The mode of the source
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Mode(Of T)(numbers As IEnumerable(Of T), selector As Func(Of T, Double)) As Double
  overload: Ampere.Statistics.EnumerableStats.Mode*
  nameWithType.vb: EnumerableStats.Mode(Of T)(IEnumerable(Of T), Func(Of T, Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Ampere.Statistics.EnumerableStats.Mode(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Double))
  name.vb: Mode(Of T)(IEnumerable(Of T), Func(Of T, Double))
- uid: Ampere.Statistics.EnumerableStats.SampleVariance(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.SampleVariance(System.Collections.Generic.IEnumerable{System.Double})
  id: SampleVariance(System.Collections.Generic.IEnumerable{System.Double})
  isExtensionMethod: true
  parent: Ampere.Statistics.EnumerableStats
  langs:
  - csharp
  - vb
  name: SampleVariance(IEnumerable<Double>)
  nameWithType: EnumerableStats.SampleVariance(IEnumerable<Double>)
  fullName: Ampere.Statistics.EnumerableStats.SampleVariance(System.Collections.Generic.IEnumerable<System.Double>)
  type: Method
  source:
    remote:
      path: Ampere/Statistics/EnumerableStats.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: SampleVariance
    path: ../Ampere/Statistics/EnumerableStats.cs
    startLine: 173
  assemblies:
  - Ampere
  namespace: Ampere.Statistics
  summary: "\nFinds the sample variance of the enumerable.\n"
  example: []
  syntax:
    content: public static double SampleVariance(this IEnumerable<double> src)
    parameters:
    - id: src
      type: System.Collections.Generic.IEnumerable{System.Double}
      description: The IEnumerable of type double
    return:
      type: System.Double
      description: The sample variance of the source
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SampleVariance(src As IEnumerable(Of Double)) As Double
  overload: Ampere.Statistics.EnumerableStats.SampleVariance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when the source is null
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown when the source if of length 0
  nameWithType.vb: EnumerableStats.SampleVariance(IEnumerable(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Ampere.Statistics.EnumerableStats.SampleVariance(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: SampleVariance(IEnumerable(Of Double))
- uid: Ampere.Statistics.EnumerableStats.SampleVariance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.SampleVariance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  id: SampleVariance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: Ampere.Statistics.EnumerableStats
  langs:
  - csharp
  - vb
  name: SampleVariance<T>(IEnumerable<T>, Func<T, Double>)
  nameWithType: EnumerableStats.SampleVariance<T>(IEnumerable<T>, Func<T, Double>)
  fullName: Ampere.Statistics.EnumerableStats.SampleVariance<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Double>)
  type: Method
  source:
    remote:
      path: Ampere/Statistics/EnumerableStats.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: SampleVariance
    path: ../Ampere/Statistics/EnumerableStats.cs
    startLine: 201
  assemblies:
  - Ampere
  namespace: Ampere.Statistics
  summary: "\nA generic overload of the <xref href=\"Ampere.Statistics.EnumerableStats.SampleVariance(System.Collections.Generic.IEnumerable%7bSystem.Double%7d)\" data-throw-if-not-resolved=\"false\"></xref> method. This method will call\nthe <xref href=\"Ampere.Statistics.EnumerableStats.SampleVariance(System.Collections.Generic.IEnumerable%7bSystem.Double%7d)\" data-throw-if-not-resolved=\"false\"></xref> overload.\n"
  example: []
  syntax:
    content: public static double SampleVariance<T>(this IEnumerable<T> numbers, Func<T, double> selector)
    parameters:
    - id: numbers
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The specified enumerable
    - id: selector
      type: System.Func{{T},System.Double}
      description: The numeral specifier
    typeParameters:
    - id: T
      description: The type of the enumerable
    return:
      type: System.Double
      description: The sample variance of the source
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SampleVariance(Of T)(numbers As IEnumerable(Of T), selector As Func(Of T, Double)) As Double
  overload: Ampere.Statistics.EnumerableStats.SampleVariance*
  nameWithType.vb: EnumerableStats.SampleVariance(Of T)(IEnumerable(Of T), Func(Of T, Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Ampere.Statistics.EnumerableStats.SampleVariance(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Double))
  name.vb: SampleVariance(Of T)(IEnumerable(Of T), Func(Of T, Double))
- uid: Ampere.Statistics.EnumerableStats.PopulationVariance(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.PopulationVariance(System.Collections.Generic.IEnumerable{System.Double})
  id: PopulationVariance(System.Collections.Generic.IEnumerable{System.Double})
  isExtensionMethod: true
  parent: Ampere.Statistics.EnumerableStats
  langs:
  - csharp
  - vb
  name: PopulationVariance(IEnumerable<Double>)
  nameWithType: EnumerableStats.PopulationVariance(IEnumerable<Double>)
  fullName: Ampere.Statistics.EnumerableStats.PopulationVariance(System.Collections.Generic.IEnumerable<System.Double>)
  type: Method
  source:
    remote:
      path: Ampere/Statistics/EnumerableStats.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: PopulationVariance
    path: ../Ampere/Statistics/EnumerableStats.cs
    startLine: 213
  assemblies:
  - Ampere
  namespace: Ampere.Statistics
  summary: "\nFinds the population variance of the enumerable.\n"
  example: []
  syntax:
    content: public static double PopulationVariance(this IEnumerable<double> src)
    parameters:
    - id: src
      type: System.Collections.Generic.IEnumerable{System.Double}
      description: The IEnumerable of type double
    return:
      type: System.Double
      description: The population variance of the source
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function PopulationVariance(src As IEnumerable(Of Double)) As Double
  overload: Ampere.Statistics.EnumerableStats.PopulationVariance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when the source is null
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown when the source is of length 0
  nameWithType.vb: EnumerableStats.PopulationVariance(IEnumerable(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Ampere.Statistics.EnumerableStats.PopulationVariance(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: PopulationVariance(IEnumerable(Of Double))
- uid: Ampere.Statistics.EnumerableStats.PopulationVariance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.PopulationVariance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  id: PopulationVariance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: Ampere.Statistics.EnumerableStats
  langs:
  - csharp
  - vb
  name: PopulationVariance<T>(IEnumerable<T>, Func<T, Double>)
  nameWithType: EnumerableStats.PopulationVariance<T>(IEnumerable<T>, Func<T, Double>)
  fullName: Ampere.Statistics.EnumerableStats.PopulationVariance<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Double>)
  type: Method
  source:
    remote:
      path: Ampere/Statistics/EnumerableStats.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: PopulationVariance
    path: ../Ampere/Statistics/EnumerableStats.cs
    startLine: 240
  assemblies:
  - Ampere
  namespace: Ampere.Statistics
  summary: "\nA generic overload of the <xref href=\"Ampere.Statistics.EnumerableStats.PopulationVariance(System.Collections.Generic.IEnumerable%7bSystem.Double%7d)\" data-throw-if-not-resolved=\"false\"></xref> method. This method will call\nthe <xref href=\"Ampere.Statistics.EnumerableStats.PopulationVariance(System.Collections.Generic.IEnumerable%7bSystem.Double%7d)\" data-throw-if-not-resolved=\"false\"></xref> overload.\n"
  example: []
  syntax:
    content: public static double PopulationVariance<T>(this IEnumerable<T> numbers, Func<T, double> selector)
    parameters:
    - id: numbers
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The specified enumerable
    - id: selector
      type: System.Func{{T},System.Double}
      description: The numeral specifier
    typeParameters:
    - id: T
      description: The type of the enumerable
    return:
      type: System.Double
      description: The populationvariance of the source
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function PopulationVariance(Of T)(numbers As IEnumerable(Of T), selector As Func(Of T, Double)) As Double
  overload: Ampere.Statistics.EnumerableStats.PopulationVariance*
  nameWithType.vb: EnumerableStats.PopulationVariance(Of T)(IEnumerable(Of T), Func(Of T, Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Ampere.Statistics.EnumerableStats.PopulationVariance(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Double))
  name.vb: PopulationVariance(Of T)(IEnumerable(Of T), Func(Of T, Double))
- uid: Ampere.Statistics.EnumerableStats.SampleStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.SampleStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})
  id: SampleStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})
  isExtensionMethod: true
  parent: Ampere.Statistics.EnumerableStats
  langs:
  - csharp
  - vb
  name: SampleStandardDeviation(IEnumerable<Double>)
  nameWithType: EnumerableStats.SampleStandardDeviation(IEnumerable<Double>)
  fullName: Ampere.Statistics.EnumerableStats.SampleStandardDeviation(System.Collections.Generic.IEnumerable<System.Double>)
  type: Method
  source:
    remote:
      path: Ampere/Statistics/EnumerableStats.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: SampleStandardDeviation
    path: ../Ampere/Statistics/EnumerableStats.cs
    startLine: 252
  assemblies:
  - Ampere
  namespace: Ampere.Statistics
  summary: "\nFinds the sample standard deviation of the enumerable.\n"
  example: []
  syntax:
    content: public static double SampleStandardDeviation(this IEnumerable<double> src)
    parameters:
    - id: src
      type: System.Collections.Generic.IEnumerable{System.Double}
      description: The IEnumerable of type double
    return:
      type: System.Double
      description: The sample standard deviation of the source
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SampleStandardDeviation(src As IEnumerable(Of Double)) As Double
  overload: Ampere.Statistics.EnumerableStats.SampleStandardDeviation*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when the source is null
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown when the source is of length 0
  nameWithType.vb: EnumerableStats.SampleStandardDeviation(IEnumerable(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Ampere.Statistics.EnumerableStats.SampleStandardDeviation(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: SampleStandardDeviation(IEnumerable(Of Double))
- uid: Ampere.Statistics.EnumerableStats.SampleStandardDeviation``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.SampleStandardDeviation``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  id: SampleStandardDeviation``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: Ampere.Statistics.EnumerableStats
  langs:
  - csharp
  - vb
  name: SampleStandardDeviation<T>(IEnumerable<T>, Func<T, Double>)
  nameWithType: EnumerableStats.SampleStandardDeviation<T>(IEnumerable<T>, Func<T, Double>)
  fullName: Ampere.Statistics.EnumerableStats.SampleStandardDeviation<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Double>)
  type: Method
  source:
    remote:
      path: Ampere/Statistics/EnumerableStats.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: SampleStandardDeviation
    path: ../Ampere/Statistics/EnumerableStats.cs
    startLine: 270
  assemblies:
  - Ampere
  namespace: Ampere.Statistics
  summary: "\nA generic overload of the <xref href=\"Ampere.Statistics.EnumerableStats.SampleStandardDeviation(System.Collections.Generic.IEnumerable%7bSystem.Double%7d)\" data-throw-if-not-resolved=\"false\"></xref> method. This method will call\nthe <xref href=\"Ampere.Statistics.EnumerableStats.SampleStandardDeviation(System.Collections.Generic.IEnumerable%7bSystem.Double%7d)\" data-throw-if-not-resolved=\"false\"></xref> overload.\n"
  example: []
  syntax:
    content: public static double SampleStandardDeviation<T>(this IEnumerable<T> numbers, Func<T, double> selector)
    parameters:
    - id: numbers
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The specified enumerable
    - id: selector
      type: System.Func{{T},System.Double}
      description: The numeral specifier
    typeParameters:
    - id: T
      description: The type of the enumerable
    return:
      type: System.Double
      description: The sample standard deviation of the source
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SampleStandardDeviation(Of T)(numbers As IEnumerable(Of T), selector As Func(Of T, Double)) As Double
  overload: Ampere.Statistics.EnumerableStats.SampleStandardDeviation*
  nameWithType.vb: EnumerableStats.SampleStandardDeviation(Of T)(IEnumerable(Of T), Func(Of T, Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Ampere.Statistics.EnumerableStats.SampleStandardDeviation(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Double))
  name.vb: SampleStandardDeviation(Of T)(IEnumerable(Of T), Func(Of T, Double))
- uid: Ampere.Statistics.EnumerableStats.PopulationStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.PopulationStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})
  id: PopulationStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})
  isExtensionMethod: true
  parent: Ampere.Statistics.EnumerableStats
  langs:
  - csharp
  - vb
  name: PopulationStandardDeviation(IEnumerable<Double>)
  nameWithType: EnumerableStats.PopulationStandardDeviation(IEnumerable<Double>)
  fullName: Ampere.Statistics.EnumerableStats.PopulationStandardDeviation(System.Collections.Generic.IEnumerable<System.Double>)
  type: Method
  source:
    remote:
      path: Ampere/Statistics/EnumerableStats.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: PopulationStandardDeviation
    path: ../Ampere/Statistics/EnumerableStats.cs
    startLine: 282
  assemblies:
  - Ampere
  namespace: Ampere.Statistics
  summary: "\nFinds the population standard deviation of the enumerable.\n"
  example: []
  syntax:
    content: public static double PopulationStandardDeviation(this IEnumerable<double> src)
    parameters:
    - id: src
      type: System.Collections.Generic.IEnumerable{System.Double}
      description: The IEnumerable of type double
    return:
      type: System.Double
      description: The population standard deviation of the source
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function PopulationStandardDeviation(src As IEnumerable(Of Double)) As Double
  overload: Ampere.Statistics.EnumerableStats.PopulationStandardDeviation*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when the source is null
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown when the source is of length 0
  nameWithType.vb: EnumerableStats.PopulationStandardDeviation(IEnumerable(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Ampere.Statistics.EnumerableStats.PopulationStandardDeviation(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: PopulationStandardDeviation(IEnumerable(Of Double))
- uid: Ampere.Statistics.EnumerableStats.PopulationStandardDeviation``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.PopulationStandardDeviation``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  id: PopulationStandardDeviation``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: Ampere.Statistics.EnumerableStats
  langs:
  - csharp
  - vb
  name: PopulationStandardDeviation<T>(IEnumerable<T>, Func<T, Double>)
  nameWithType: EnumerableStats.PopulationStandardDeviation<T>(IEnumerable<T>, Func<T, Double>)
  fullName: Ampere.Statistics.EnumerableStats.PopulationStandardDeviation<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Double>)
  type: Method
  source:
    remote:
      path: Ampere/Statistics/EnumerableStats.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: PopulationStandardDeviation
    path: ../Ampere/Statistics/EnumerableStats.cs
    startLine: 300
  assemblies:
  - Ampere
  namespace: Ampere.Statistics
  summary: "\nA generic overload of the <xref href=\"Ampere.Statistics.EnumerableStats.PopulationStandardDeviation(System.Collections.Generic.IEnumerable%7bSystem.Double%7d)\" data-throw-if-not-resolved=\"false\"></xref> method.\nThis method will call the <xref href=\"Ampere.Statistics.EnumerableStats.PopulationStandardDeviation(System.Collections.Generic.IEnumerable%7bSystem.Double%7d)\" data-throw-if-not-resolved=\"false\"></xref> overload.\n"
  example: []
  syntax:
    content: public static double PopulationStandardDeviation<T>(this IEnumerable<T> numbers, Func<T, double> selector)
    parameters:
    - id: numbers
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The specified enumerable
    - id: selector
      type: System.Func{{T},System.Double}
      description: The numeral specifier
    typeParameters:
    - id: T
      description: The type of the enumerable
    return:
      type: System.Double
      description: The population standard deviation of the source
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function PopulationStandardDeviation(Of T)(numbers As IEnumerable(Of T), selector As Func(Of T, Double)) As Double
  overload: Ampere.Statistics.EnumerableStats.PopulationStandardDeviation*
  nameWithType.vb: EnumerableStats.PopulationStandardDeviation(Of T)(IEnumerable(Of T), Func(Of T, Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Ampere.Statistics.EnumerableStats.PopulationStandardDeviation(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Double))
  name.vb: PopulationStandardDeviation(Of T)(IEnumerable(Of T), Func(Of T, Double))
- uid: Ampere.Statistics.EnumerableStats.Range(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.Range(System.Collections.Generic.IEnumerable{System.Double})
  id: Range(System.Collections.Generic.IEnumerable{System.Double})
  isExtensionMethod: true
  parent: Ampere.Statistics.EnumerableStats
  langs:
  - csharp
  - vb
  name: Range(IEnumerable<Double>)
  nameWithType: EnumerableStats.Range(IEnumerable<Double>)
  fullName: Ampere.Statistics.EnumerableStats.Range(System.Collections.Generic.IEnumerable<System.Double>)
  type: Method
  source:
    remote:
      path: Ampere/Statistics/EnumerableStats.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: Range
    path: ../Ampere/Statistics/EnumerableStats.cs
    startLine: 312
  assemblies:
  - Ampere
  namespace: Ampere.Statistics
  summary: "\nFinds the range of the enumerable.\n"
  example: []
  syntax:
    content: public static double Range(this IEnumerable<double> src)
    parameters:
    - id: src
      type: System.Collections.Generic.IEnumerable{System.Double}
      description: The IEnumerable of type double
    return:
      type: System.Double
      description: The range of the source
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Range(src As IEnumerable(Of Double)) As Double
  overload: Ampere.Statistics.EnumerableStats.Range*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when the source is null
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown when the source is of size 0
  nameWithType.vb: EnumerableStats.Range(IEnumerable(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Ampere.Statistics.EnumerableStats.Range(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: Range(IEnumerable(Of Double))
- uid: Ampere.Statistics.EnumerableStats.Range``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.Range``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  id: Range``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: Ampere.Statistics.EnumerableStats
  langs:
  - csharp
  - vb
  name: Range<T>(IEnumerable<T>, Func<T, Double>)
  nameWithType: EnumerableStats.Range<T>(IEnumerable<T>, Func<T, Double>)
  fullName: Ampere.Statistics.EnumerableStats.Range<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Double>)
  type: Method
  source:
    remote:
      path: Ampere/Statistics/EnumerableStats.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: Range
    path: ../Ampere/Statistics/EnumerableStats.cs
    startLine: 339
  assemblies:
  - Ampere
  namespace: Ampere.Statistics
  summary: "\nA generic overload of the <xref href=\"Ampere.Statistics.EnumerableStats.Range(System.Collections.Generic.IEnumerable%7bSystem.Double%7d)\" data-throw-if-not-resolved=\"false\"></xref> method. This method will call\nthe <xref href=\"Ampere.Statistics.EnumerableStats.Range(System.Collections.Generic.IEnumerable%7bSystem.Double%7d)\" data-throw-if-not-resolved=\"false\"></xref> overload.\n"
  example: []
  syntax:
    content: public static double Range<T>(this IEnumerable<T> numbers, Func<T, double> selector)
    parameters:
    - id: numbers
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The specified enumerable
    - id: selector
      type: System.Func{{T},System.Double}
      description: The numeral specifier
    typeParameters:
    - id: T
      description: The type of the enumerable
    return:
      type: System.Double
      description: The range of the source
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Range(Of T)(numbers As IEnumerable(Of T), selector As Func(Of T, Double)) As Double
  overload: Ampere.Statistics.EnumerableStats.Range*
  nameWithType.vb: EnumerableStats.Range(Of T)(IEnumerable(Of T), Func(Of T, Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Ampere.Statistics.EnumerableStats.Range(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Double))
  name.vb: Range(Of T)(IEnumerable(Of T), Func(Of T, Double))
- uid: Ampere.Statistics.EnumerableStats.LowerQuartile(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.LowerQuartile(System.Collections.Generic.IEnumerable{System.Double})
  id: LowerQuartile(System.Collections.Generic.IEnumerable{System.Double})
  isExtensionMethod: true
  parent: Ampere.Statistics.EnumerableStats
  langs:
  - csharp
  - vb
  name: LowerQuartile(IEnumerable<Double>)
  nameWithType: EnumerableStats.LowerQuartile(IEnumerable<Double>)
  fullName: Ampere.Statistics.EnumerableStats.LowerQuartile(System.Collections.Generic.IEnumerable<System.Double>)
  type: Method
  source:
    remote:
      path: Ampere/Statistics/EnumerableStats.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: LowerQuartile
    path: ../Ampere/Statistics/EnumerableStats.cs
    startLine: 352
  assemblies:
  - Ampere
  namespace: Ampere.Statistics
  summary: "\nFinds the lower quartile of the enumerable.\n"
  example: []
  syntax:
    content: public static double LowerQuartile(this IEnumerable<double> src)
    parameters:
    - id: src
      type: System.Collections.Generic.IEnumerable{System.Double}
      description: The IEnumerable of type double
    return:
      type: System.Double
      description: The lower quartile of the source
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LowerQuartile(src As IEnumerable(Of Double)) As Double
  overload: Ampere.Statistics.EnumerableStats.LowerQuartile*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when the source is null
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown when the source is of size 0
  - type: Ampere.Statistics.InsufficientDataSetException
    commentId: T:Ampere.Statistics.InsufficientDataSetException
    description: Thrown when the data set is not large enough to calculate a lower quartile
  nameWithType.vb: EnumerableStats.LowerQuartile(IEnumerable(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Ampere.Statistics.EnumerableStats.LowerQuartile(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: LowerQuartile(IEnumerable(Of Double))
- uid: Ampere.Statistics.EnumerableStats.LowerQuartile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.LowerQuartile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  id: LowerQuartile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: Ampere.Statistics.EnumerableStats
  langs:
  - csharp
  - vb
  name: LowerQuartile<T>(IEnumerable<T>, Func<T, Double>)
  nameWithType: EnumerableStats.LowerQuartile<T>(IEnumerable<T>, Func<T, Double>)
  fullName: Ampere.Statistics.EnumerableStats.LowerQuartile<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Double>)
  type: Method
  source:
    remote:
      path: Ampere/Statistics/EnumerableStats.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: LowerQuartile
    path: ../Ampere/Statistics/EnumerableStats.cs
    startLine: 379
  assemblies:
  - Ampere
  namespace: Ampere.Statistics
  summary: "\nA generic overload of the <xref href=\"Ampere.Statistics.EnumerableStats.LowerQuartile(System.Collections.Generic.IEnumerable%7bSystem.Double%7d)\" data-throw-if-not-resolved=\"false\"></xref> method. This method will call\nthe <xref href=\"Ampere.Statistics.EnumerableStats.LowerQuartile(System.Collections.Generic.IEnumerable%7bSystem.Double%7d)\" data-throw-if-not-resolved=\"false\"></xref> overload.\n"
  example: []
  syntax:
    content: public static double LowerQuartile<T>(this IEnumerable<T> numbers, Func<T, double> selector)
    parameters:
    - id: numbers
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The specified enumerable
    - id: selector
      type: System.Func{{T},System.Double}
      description: The numeral specifier
    typeParameters:
    - id: T
      description: The type of the enumerable
    return:
      type: System.Double
      description: The lower quartile of the source
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LowerQuartile(Of T)(numbers As IEnumerable(Of T), selector As Func(Of T, Double)) As Double
  overload: Ampere.Statistics.EnumerableStats.LowerQuartile*
  nameWithType.vb: EnumerableStats.LowerQuartile(Of T)(IEnumerable(Of T), Func(Of T, Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Ampere.Statistics.EnumerableStats.LowerQuartile(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Double))
  name.vb: LowerQuartile(Of T)(IEnumerable(Of T), Func(Of T, Double))
- uid: Ampere.Statistics.EnumerableStats.UpperQuartile(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.UpperQuartile(System.Collections.Generic.IEnumerable{System.Double})
  id: UpperQuartile(System.Collections.Generic.IEnumerable{System.Double})
  isExtensionMethod: true
  parent: Ampere.Statistics.EnumerableStats
  langs:
  - csharp
  - vb
  name: UpperQuartile(IEnumerable<Double>)
  nameWithType: EnumerableStats.UpperQuartile(IEnumerable<Double>)
  fullName: Ampere.Statistics.EnumerableStats.UpperQuartile(System.Collections.Generic.IEnumerable<System.Double>)
  type: Method
  source:
    remote:
      path: Ampere/Statistics/EnumerableStats.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: UpperQuartile
    path: ../Ampere/Statistics/EnumerableStats.cs
    startLine: 392
  assemblies:
  - Ampere
  namespace: Ampere.Statistics
  summary: "\nFinds the upper quartile of the enumerable.\n"
  example: []
  syntax:
    content: public static double UpperQuartile(this IEnumerable<double> src)
    parameters:
    - id: src
      type: System.Collections.Generic.IEnumerable{System.Double}
      description: The IEnumerable of type double
    return:
      type: System.Double
      description: The upper quartile of the source
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpperQuartile(src As IEnumerable(Of Double)) As Double
  overload: Ampere.Statistics.EnumerableStats.UpperQuartile*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when the source is null
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown when the source is of size 0
  - type: Ampere.Statistics.InsufficientDataSetException
    commentId: T:Ampere.Statistics.InsufficientDataSetException
    description: Thrown when the data set is not large enough to calculate an upper quartile
  nameWithType.vb: EnumerableStats.UpperQuartile(IEnumerable(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Ampere.Statistics.EnumerableStats.UpperQuartile(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: UpperQuartile(IEnumerable(Of Double))
- uid: Ampere.Statistics.EnumerableStats.UpperQuartile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.UpperQuartile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  id: UpperQuartile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: Ampere.Statistics.EnumerableStats
  langs:
  - csharp
  - vb
  name: UpperQuartile<T>(IEnumerable<T>, Func<T, Double>)
  nameWithType: EnumerableStats.UpperQuartile<T>(IEnumerable<T>, Func<T, Double>)
  fullName: Ampere.Statistics.EnumerableStats.UpperQuartile<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Double>)
  type: Method
  source:
    remote:
      path: Ampere/Statistics/EnumerableStats.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: UpperQuartile
    path: ../Ampere/Statistics/EnumerableStats.cs
    startLine: 418
  assemblies:
  - Ampere
  namespace: Ampere.Statistics
  summary: "\nA generic overload of the <xref href=\"Ampere.Statistics.EnumerableStats.UpperQuartile(System.Collections.Generic.IEnumerable%7bSystem.Double%7d)\" data-throw-if-not-resolved=\"false\"></xref> method. This method will call\nthe <xref href=\"Ampere.Statistics.EnumerableStats.UpperQuartile(System.Collections.Generic.IEnumerable%7bSystem.Double%7d)\" data-throw-if-not-resolved=\"false\"></xref> overload.\n"
  example: []
  syntax:
    content: public static double UpperQuartile<T>(this IEnumerable<T> numbers, Func<T, double> selector)
    parameters:
    - id: numbers
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The specified enumerable
    - id: selector
      type: System.Func{{T},System.Double}
      description: The numeral specifier
    typeParameters:
    - id: T
      description: The type of the enumerable
    return:
      type: System.Double
      description: The upper quartile of the source
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpperQuartile(Of T)(numbers As IEnumerable(Of T), selector As Func(Of T, Double)) As Double
  overload: Ampere.Statistics.EnumerableStats.UpperQuartile*
  nameWithType.vb: EnumerableStats.UpperQuartile(Of T)(IEnumerable(Of T), Func(Of T, Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Ampere.Statistics.EnumerableStats.UpperQuartile(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Double))
  name.vb: UpperQuartile(Of T)(IEnumerable(Of T), Func(Of T, Double))
- uid: Ampere.Statistics.EnumerableStats.InterQuartileRange(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.InterQuartileRange(System.Collections.Generic.IEnumerable{System.Double})
  id: InterQuartileRange(System.Collections.Generic.IEnumerable{System.Double})
  isExtensionMethod: true
  parent: Ampere.Statistics.EnumerableStats
  langs:
  - csharp
  - vb
  name: InterQuartileRange(IEnumerable<Double>)
  nameWithType: EnumerableStats.InterQuartileRange(IEnumerable<Double>)
  fullName: Ampere.Statistics.EnumerableStats.InterQuartileRange(System.Collections.Generic.IEnumerable<System.Double>)
  type: Method
  source:
    remote:
      path: Ampere/Statistics/EnumerableStats.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: InterQuartileRange
    path: ../Ampere/Statistics/EnumerableStats.cs
    startLine: 430
  assemblies:
  - Ampere
  namespace: Ampere.Statistics
  summary: "\nFinds the inter-quartile range of the enumerable.\n"
  example: []
  syntax:
    content: public static double InterQuartileRange(this IEnumerable<double> src)
    parameters:
    - id: src
      type: System.Collections.Generic.IEnumerable{System.Double}
      description: The IEnumerable of type double
    return:
      type: System.Double
      description: The inter-quartile range of the source
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function InterQuartileRange(src As IEnumerable(Of Double)) As Double
  overload: Ampere.Statistics.EnumerableStats.InterQuartileRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when the source is null
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown when the source is of length 0
  nameWithType.vb: EnumerableStats.InterQuartileRange(IEnumerable(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Ampere.Statistics.EnumerableStats.InterQuartileRange(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: InterQuartileRange(IEnumerable(Of Double))
- uid: Ampere.Statistics.EnumerableStats.InterQuartileRange``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.InterQuartileRange``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  id: InterQuartileRange``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: Ampere.Statistics.EnumerableStats
  langs:
  - csharp
  - vb
  name: InterQuartileRange<T>(IEnumerable<T>, Func<T, Double>)
  nameWithType: EnumerableStats.InterQuartileRange<T>(IEnumerable<T>, Func<T, Double>)
  fullName: Ampere.Statistics.EnumerableStats.InterQuartileRange<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Double>)
  type: Method
  source:
    remote:
      path: Ampere/Statistics/EnumerableStats.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: InterQuartileRange
    path: ../Ampere/Statistics/EnumerableStats.cs
    startLine: 450
  assemblies:
  - Ampere
  namespace: Ampere.Statistics
  summary: "\nA generic overload of the <xref href=\"Ampere.Statistics.EnumerableStats.InterQuartileRange(System.Collections.Generic.IEnumerable%7bSystem.Double%7d)\" data-throw-if-not-resolved=\"false\"></xref> method. This method will call\nthe <xref href=\"Ampere.Statistics.EnumerableStats.InterQuartileRange(System.Collections.Generic.IEnumerable%7bSystem.Double%7d)\" data-throw-if-not-resolved=\"false\"></xref> overload.\n"
  example: []
  syntax:
    content: public static double InterQuartileRange<T>(this IEnumerable<T> numbers, Func<T, double> selector)
    parameters:
    - id: numbers
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The specified enumerable
    - id: selector
      type: System.Func{{T},System.Double}
      description: The numeral specifier
    typeParameters:
    - id: T
      description: The type of the enumerable
    return:
      type: System.Double
      description: The inter-quartile range of the source
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function InterQuartileRange(Of T)(numbers As IEnumerable(Of T), selector As Func(Of T, Double)) As Double
  overload: Ampere.Statistics.EnumerableStats.InterQuartileRange*
  nameWithType.vb: EnumerableStats.InterQuartileRange(Of T)(IEnumerable(Of T), Func(Of T, Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Ampere.Statistics.EnumerableStats.InterQuartileRange(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Double))
  name.vb: InterQuartileRange(Of T)(IEnumerable(Of T), Func(Of T, Double))
- uid: Ampere.Statistics.EnumerableStats.IsNormalProportion(System.Collections.Generic.IEnumerable{System.Double},System.Double)
  commentId: M:Ampere.Statistics.EnumerableStats.IsNormalProportion(System.Collections.Generic.IEnumerable{System.Double},System.Double)
  id: IsNormalProportion(System.Collections.Generic.IEnumerable{System.Double},System.Double)
  isExtensionMethod: true
  parent: Ampere.Statistics.EnumerableStats
  langs:
  - csharp
  - vb
  name: IsNormalProportion(IEnumerable<Double>, Double)
  nameWithType: EnumerableStats.IsNormalProportion(IEnumerable<Double>, Double)
  fullName: Ampere.Statistics.EnumerableStats.IsNormalProportion(System.Collections.Generic.IEnumerable<System.Double>, System.Double)
  type: Method
  source:
    remote:
      path: Ampere/Statistics/EnumerableStats.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: IsNormalProportion
    path: ../Ampere/Statistics/EnumerableStats.cs
    startLine: 463
  assemblies:
  - Ampere
  namespace: Ampere.Statistics
  summary: "\nReturns whether if the data set is normally distributed for a proportion.\n"
  example: []
  syntax:
    content: public static bool IsNormalProportion(this IEnumerable<double> src, double samstat)
    parameters:
    - id: src
      type: System.Collections.Generic.IEnumerable{System.Double}
      description: The IEnumerable of type double
    - id: samstat
      type: System.Double
      description: The sample statistic
    return:
      type: System.Boolean
      description: Returns if the data set is normally distributed for a proportion.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsNormalProportion(src As IEnumerable(Of Double), samstat As Double) As Boolean
  overload: Ampere.Statistics.EnumerableStats.IsNormalProportion*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when the source is null
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown when the source is of length 0
  nameWithType.vb: EnumerableStats.IsNormalProportion(IEnumerable(Of Double), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Ampere.Statistics.EnumerableStats.IsNormalProportion(System.Collections.Generic.IEnumerable(Of System.Double), System.Double)
  name.vb: IsNormalProportion(IEnumerable(Of Double), Double)
- uid: Ampere.Statistics.EnumerableStats.IsNormalProportion``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Double)
  commentId: M:Ampere.Statistics.EnumerableStats.IsNormalProportion``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Double)
  id: IsNormalProportion``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Double)
  isExtensionMethod: true
  parent: Ampere.Statistics.EnumerableStats
  langs:
  - csharp
  - vb
  name: IsNormalProportion<T>(IEnumerable<T>, Func<T, Double>, Double)
  nameWithType: EnumerableStats.IsNormalProportion<T>(IEnumerable<T>, Func<T, Double>, Double)
  fullName: Ampere.Statistics.EnumerableStats.IsNormalProportion<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Double>, System.Double)
  type: Method
  source:
    remote:
      path: Ampere/Statistics/EnumerableStats.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: IsNormalProportion
    path: ../Ampere/Statistics/EnumerableStats.cs
    startLine: 483
  assemblies:
  - Ampere
  namespace: Ampere.Statistics
  summary: "\nA generic overload of the <xref href=\"Ampere.Statistics.EnumerableStats.IsNormalProportion(System.Collections.Generic.IEnumerable%7bSystem.Double%7d%2cSystem.Double)\" data-throw-if-not-resolved=\"false\"></xref> method. This method will call\nthe <xref href=\"Ampere.Statistics.EnumerableStats.IsNormalProportion(System.Collections.Generic.IEnumerable%7bSystem.Double%7d%2cSystem.Double)\" data-throw-if-not-resolved=\"false\"></xref> overload.\n"
  example: []
  syntax:
    content: public static bool IsNormalProportion<T>(this IEnumerable<T> numbers, Func<T, double> selector, double samstat)
    parameters:
    - id: numbers
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The specified enumerable
    - id: selector
      type: System.Func{{T},System.Double}
      description: The numeral specifier
    - id: samstat
      type: System.Double
      description: The sample statistic>
    typeParameters:
    - id: T
      description: The type of the enumerable
    return:
      type: System.Boolean
      description: Returns if the data set is normally distributed for a proportion.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsNormalProportion(Of T)(numbers As IEnumerable(Of T), selector As Func(Of T, Double), samstat As Double) As Boolean
  overload: Ampere.Statistics.EnumerableStats.IsNormalProportion*
  nameWithType.vb: EnumerableStats.IsNormalProportion(Of T)(IEnumerable(Of T), Func(Of T, Double), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Ampere.Statistics.EnumerableStats.IsNormalProportion(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Double), System.Double)
  name.vb: IsNormalProportion(Of T)(IEnumerable(Of T), Func(Of T, Double), Double)
- uid: Ampere.Statistics.EnumerableStats.IsNormalMean(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.IsNormalMean(System.Collections.Generic.IEnumerable{System.Double})
  id: IsNormalMean(System.Collections.Generic.IEnumerable{System.Double})
  isExtensionMethod: true
  parent: Ampere.Statistics.EnumerableStats
  langs:
  - csharp
  - vb
  name: IsNormalMean(IEnumerable<Double>)
  nameWithType: EnumerableStats.IsNormalMean(IEnumerable<Double>)
  fullName: Ampere.Statistics.EnumerableStats.IsNormalMean(System.Collections.Generic.IEnumerable<System.Double>)
  type: Method
  source:
    remote:
      path: Ampere/Statistics/EnumerableStats.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: IsNormalMean
    path: ../Ampere/Statistics/EnumerableStats.cs
    startLine: 495
  assemblies:
  - Ampere
  namespace: Ampere.Statistics
  summary: "\nReturns whether if the data set is normally distributed for a mean.\n"
  example: []
  syntax:
    content: public static bool IsNormalMean(this IEnumerable<double> src)
    parameters:
    - id: src
      type: System.Collections.Generic.IEnumerable{System.Double}
      description: The IEnumerable of type double
    return:
      type: System.Boolean
      description: Returns whether if the data set is normally distributed for a mean.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsNormalMean(src As IEnumerable(Of Double)) As Boolean
  overload: Ampere.Statistics.EnumerableStats.IsNormalMean*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when the source is null
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown when the source is of length 0
  nameWithType.vb: EnumerableStats.IsNormalMean(IEnumerable(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Ampere.Statistics.EnumerableStats.IsNormalMean(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: IsNormalMean(IEnumerable(Of Double))
- uid: Ampere.Statistics.EnumerableStats.IsNormalMean``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.IsNormalMean``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  id: IsNormalMean``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: Ampere.Statistics.EnumerableStats
  langs:
  - csharp
  - vb
  name: IsNormalMean<T>(IEnumerable<T>, Func<T, Double>)
  nameWithType: EnumerableStats.IsNormalMean<T>(IEnumerable<T>, Func<T, Double>)
  fullName: Ampere.Statistics.EnumerableStats.IsNormalMean<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Double>)
  type: Method
  source:
    remote:
      path: Ampere/Statistics/EnumerableStats.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: IsNormalMean
    path: ../Ampere/Statistics/EnumerableStats.cs
    startLine: 512
  assemblies:
  - Ampere
  namespace: Ampere.Statistics
  summary: "\nA generic overload of the <xref href=\"Ampere.Statistics.EnumerableStats.IsNormalMean(System.Collections.Generic.IEnumerable%7bSystem.Double%7d)\" data-throw-if-not-resolved=\"false\"></xref> method. This method will call\nthe <xref href=\"Ampere.Statistics.EnumerableStats.IsNormalMean(System.Collections.Generic.IEnumerable%7bSystem.Double%7d)\" data-throw-if-not-resolved=\"false\"></xref> overload.\n"
  example: []
  syntax:
    content: public static bool IsNormalMean<T>(this IEnumerable<T> numbers, Func<T, double> selector)
    parameters:
    - id: numbers
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The specified enumerable
    - id: selector
      type: System.Func{{T},System.Double}
      description: The numeral specifier
    typeParameters:
    - id: T
      description: The type of the enumerable
    return:
      type: System.Boolean
      description: Returns if the data set is normally distributed for a proportion.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsNormalMean(Of T)(numbers As IEnumerable(Of T), selector As Func(Of T, Double)) As Boolean
  overload: Ampere.Statistics.EnumerableStats.IsNormalMean*
  nameWithType.vb: EnumerableStats.IsNormalMean(Of T)(IEnumerable(Of T), Func(Of T, Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Ampere.Statistics.EnumerableStats.IsNormalMean(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Double))
  name.vb: IsNormalMean(Of T)(IEnumerable(Of T), Func(Of T, Double))
- uid: Ampere.Statistics.EnumerableStats.StandardizedScore(System.Collections.Generic.IEnumerable{System.Double},System.Double)
  commentId: M:Ampere.Statistics.EnumerableStats.StandardizedScore(System.Collections.Generic.IEnumerable{System.Double},System.Double)
  id: StandardizedScore(System.Collections.Generic.IEnumerable{System.Double},System.Double)
  isExtensionMethod: true
  parent: Ampere.Statistics.EnumerableStats
  langs:
  - csharp
  - vb
  name: StandardizedScore(IEnumerable<Double>, Double)
  nameWithType: EnumerableStats.StandardizedScore(IEnumerable<Double>, Double)
  fullName: Ampere.Statistics.EnumerableStats.StandardizedScore(System.Collections.Generic.IEnumerable<System.Double>, System.Double)
  type: Method
  source:
    remote:
      path: Ampere/Statistics/EnumerableStats.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: StandardizedScore
    path: ../Ampere/Statistics/EnumerableStats.cs
    startLine: 525
  assemblies:
  - Ampere
  namespace: Ampere.Statistics
  summary: "\nCalculates the standardized score (z-score or standard score) of the enumerable.\n"
  example: []
  syntax:
    content: public static double StandardizedScore(this IEnumerable<double> src, double elem)
    parameters:
    - id: src
      type: System.Collections.Generic.IEnumerable{System.Double}
      description: The IEnumerable of type double
    - id: elem
      type: System.Double
      description: The value of the element
    return:
      type: System.Double
      description: The standardized score of the source
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function StandardizedScore(src As IEnumerable(Of Double), elem As Double) As Double
  overload: Ampere.Statistics.EnumerableStats.StandardizedScore*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when the source is null
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown when the source if of length 0
  nameWithType.vb: EnumerableStats.StandardizedScore(IEnumerable(Of Double), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Ampere.Statistics.EnumerableStats.StandardizedScore(System.Collections.Generic.IEnumerable(Of System.Double), System.Double)
  name.vb: StandardizedScore(IEnumerable(Of Double), Double)
- uid: Ampere.Statistics.EnumerableStats.StandardizedScore``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Double)
  commentId: M:Ampere.Statistics.EnumerableStats.StandardizedScore``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Double)
  id: StandardizedScore``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Double)
  isExtensionMethod: true
  parent: Ampere.Statistics.EnumerableStats
  langs:
  - csharp
  - vb
  name: StandardizedScore<T>(IEnumerable<T>, Func<T, Double>, Double)
  nameWithType: EnumerableStats.StandardizedScore<T>(IEnumerable<T>, Func<T, Double>, Double)
  fullName: Ampere.Statistics.EnumerableStats.StandardizedScore<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Double>, System.Double)
  type: Method
  source:
    remote:
      path: Ampere/Statistics/EnumerableStats.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: StandardizedScore
    path: ../Ampere/Statistics/EnumerableStats.cs
    startLine: 543
  assemblies:
  - Ampere
  namespace: Ampere.Statistics
  summary: "\nA generic overload of the <xref href=\"Ampere.Statistics.EnumerableStats.StandardizedScore(System.Collections.Generic.IEnumerable%7bSystem.Double%7d%2cSystem.Double)\" data-throw-if-not-resolved=\"false\"></xref> method. \nThis method will call the <xref href=\"Ampere.Statistics.EnumerableStats.StandardizedScore(System.Collections.Generic.IEnumerable%7bSystem.Double%7d%2cSystem.Double)\" data-throw-if-not-resolved=\"false\"></xref> overload.\n"
  example: []
  syntax:
    content: public static double StandardizedScore<T>(this IEnumerable<T> numbers, Func<T, double> selector, double elem)
    parameters:
    - id: numbers
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The specified enumerable
    - id: selector
      type: System.Func{{T},System.Double}
      description: The numeral specifier
    - id: elem
      type: System.Double
      description: The value of the element
    typeParameters:
    - id: T
      description: The type of the enumerable
    return:
      type: System.Double
      description: The standardized score of the source
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function StandardizedScore(Of T)(numbers As IEnumerable(Of T), selector As Func(Of T, Double), elem As Double) As Double
  overload: Ampere.Statistics.EnumerableStats.StandardizedScore*
  nameWithType.vb: EnumerableStats.StandardizedScore(Of T)(IEnumerable(Of T), Func(Of T, Double), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Ampere.Statistics.EnumerableStats.StandardizedScore(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Double), System.Double)
  name.vb: StandardizedScore(Of T)(IEnumerable(Of T), Func(Of T, Double), Double)
- uid: Ampere.Statistics.EnumerableStats.CreateConfidenceInterval(System.Double,System.Double,System.Double)
  commentId: M:Ampere.Statistics.EnumerableStats.CreateConfidenceInterval(System.Double,System.Double,System.Double)
  id: CreateConfidenceInterval(System.Double,System.Double,System.Double)
  parent: Ampere.Statistics.EnumerableStats
  langs:
  - csharp
  - vb
  name: CreateConfidenceInterval(Double, Double, Double)
  nameWithType: EnumerableStats.CreateConfidenceInterval(Double, Double, Double)
  fullName: Ampere.Statistics.EnumerableStats.CreateConfidenceInterval(System.Double, System.Double, System.Double)
  type: Method
  source:
    remote:
      path: Ampere/Statistics/EnumerableStats.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: CreateConfidenceInterval
    path: ../Ampere/Statistics/EnumerableStats.cs
    startLine: 555
  assemblies:
  - Ampere
  namespace: Ampere.Statistics
  summary: "\nCreates confidence interval for the given data set.\n"
  example: []
  syntax:
    content: public static IEnumerable<double> CreateConfidenceInterval(double mean, double cv, double se)
    parameters:
    - id: mean
      type: System.Double
      description: The mean of the data set
    - id: cv
      type: System.Double
      description: The critical value of the data set
    - id: se
      type: System.Double
      description: The standard error of the data set
    return:
      type: System.Collections.Generic.IEnumerable{System.Double}
      description: Returns a confidence interval of the data set.
    content.vb: Public Shared Function CreateConfidenceInterval(mean As Double, cv As Double, se As Double) As IEnumerable(Of Double)
  overload: Ampere.Statistics.EnumerableStats.CreateConfidenceInterval*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Ampere.Statistics.EnumerableStats.ConstructTValue(System.Double,System.Double,System.Double,System.Double)
  commentId: M:Ampere.Statistics.EnumerableStats.ConstructTValue(System.Double,System.Double,System.Double,System.Double)
  id: ConstructTValue(System.Double,System.Double,System.Double,System.Double)
  parent: Ampere.Statistics.EnumerableStats
  langs:
  - csharp
  - vb
  name: ConstructTValue(Double, Double, Double, Double)
  nameWithType: EnumerableStats.ConstructTValue(Double, Double, Double, Double)
  fullName: Ampere.Statistics.EnumerableStats.ConstructTValue(System.Double, System.Double, System.Double, System.Double)
  type: Method
  source:
    remote:
      path: Ampere/Statistics/EnumerableStats.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: ConstructTValue
    path: ../Ampere/Statistics/EnumerableStats.cs
    startLine: 573
  assemblies:
  - Ampere
  namespace: Ampere.Statistics
  summary: "\nReturns whether if the data set is normally distributed for a mean.\n"
  example: []
  syntax:
    content: public static double ConstructTValue(double mean, double popMean, double stdDev, double size)
    parameters:
    - id: mean
      type: System.Double
      description: The mean of the data set
    - id: popMean
      type: System.Double
      description: The population mean
    - id: stdDev
      type: System.Double
      description: The standard deviation of the data set
    - id: size
      type: System.Double
      description: The size of the data set
    return:
      type: System.Double
      description: Constructs the t-critical value
    content.vb: Public Shared Function ConstructTValue(mean As Double, popMean As Double, stdDev As Double, size As Double) As Double
  overload: Ampere.Statistics.EnumerableStats.ConstructTValue*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Ampere.Statistics
  commentId: N:Ampere.Statistics
  name: Ampere.Statistics
  nameWithType: Ampere.Statistics
  fullName: Ampere.Statistics
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Ampere.Statistics.EnumerableStats.Mean(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.Mean(System.Collections.Generic.IEnumerable{System.Double})
  isExternal: true
- uid: Ampere.Statistics.EnumerableStats.Mean*
  commentId: Overload:Ampere.Statistics.EnumerableStats.Mean
  name: Mean
  nameWithType: EnumerableStats.Mean
  fullName: Ampere.Statistics.EnumerableStats.Mean
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T},System.Double}
  commentId: T:System.Func{``0,System.Double}
  parent: System
  definition: System.Func`2
  name: Func<T, Double>
  nameWithType: Func<T, Double>
  fullName: System.Func<T, System.Double>
  nameWithType.vb: Func(Of T, Double)
  fullName.vb: System.Func(Of T, System.Double)
  name.vb: Func(Of T, Double)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Ampere.Statistics.EnumerableStats.Median(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.Median(System.Collections.Generic.IEnumerable{System.Double})
  isExternal: true
- uid: Ampere.Statistics.EnumerableStats.Median*
  commentId: Overload:Ampere.Statistics.EnumerableStats.Median
  name: Median
  nameWithType: EnumerableStats.Median
  fullName: Ampere.Statistics.EnumerableStats.Median
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: Ampere.Statistics.NoModeException
  commentId: T:Ampere.Statistics.NoModeException
  name: NoModeException
  nameWithType: NoModeException
  fullName: Ampere.Statistics.NoModeException
- uid: Ampere.Statistics.EnumerableStats.Mode*
  commentId: Overload:Ampere.Statistics.EnumerableStats.Mode
  name: Mode
  nameWithType: EnumerableStats.Mode
  fullName: Ampere.Statistics.EnumerableStats.Mode
- uid: System.Collections.Generic.IEnumerable{System.Double}
  commentId: T:System.Collections.Generic.IEnumerable{System.Double}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Double>
  nameWithType: IEnumerable<Double>
  fullName: System.Collections.Generic.IEnumerable<System.Double>
  nameWithType.vb: IEnumerable(Of Double)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Double)
  name.vb: IEnumerable(Of Double)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Ampere.Statistics.EnumerableStats.Mode(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.Mode(System.Collections.Generic.IEnumerable{System.Double})
  isExternal: true
  name: Mode(IEnumerable<Double>)
  nameWithType: EnumerableStats.Mode(IEnumerable<Double>)
  fullName: Ampere.Statistics.EnumerableStats.Mode(System.Collections.Generic.IEnumerable<System.Double>)
  nameWithType.vb: EnumerableStats.Mode(IEnumerable(Of Double))
  fullName.vb: Ampere.Statistics.EnumerableStats.Mode(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: Mode(IEnumerable(Of Double))
  spec.csharp:
  - uid: Ampere.Statistics.EnumerableStats.Mode(System.Collections.Generic.IEnumerable{System.Double})
    name: Mode
    nameWithType: EnumerableStats.Mode
    fullName: Ampere.Statistics.EnumerableStats.Mode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ampere.Statistics.EnumerableStats.Mode(System.Collections.Generic.IEnumerable{System.Double})
    name: Mode
    nameWithType: EnumerableStats.Mode
    fullName: Ampere.Statistics.EnumerableStats.Mode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Ampere.Statistics.EnumerableStats.SampleVariance*
  commentId: Overload:Ampere.Statistics.EnumerableStats.SampleVariance
  name: SampleVariance
  nameWithType: EnumerableStats.SampleVariance
  fullName: Ampere.Statistics.EnumerableStats.SampleVariance
- uid: Ampere.Statistics.EnumerableStats.SampleVariance(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.SampleVariance(System.Collections.Generic.IEnumerable{System.Double})
  isExternal: true
  name: SampleVariance(IEnumerable<Double>)
  nameWithType: EnumerableStats.SampleVariance(IEnumerable<Double>)
  fullName: Ampere.Statistics.EnumerableStats.SampleVariance(System.Collections.Generic.IEnumerable<System.Double>)
  nameWithType.vb: EnumerableStats.SampleVariance(IEnumerable(Of Double))
  fullName.vb: Ampere.Statistics.EnumerableStats.SampleVariance(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: SampleVariance(IEnumerable(Of Double))
  spec.csharp:
  - uid: Ampere.Statistics.EnumerableStats.SampleVariance(System.Collections.Generic.IEnumerable{System.Double})
    name: SampleVariance
    nameWithType: EnumerableStats.SampleVariance
    fullName: Ampere.Statistics.EnumerableStats.SampleVariance
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ampere.Statistics.EnumerableStats.SampleVariance(System.Collections.Generic.IEnumerable{System.Double})
    name: SampleVariance
    nameWithType: EnumerableStats.SampleVariance
    fullName: Ampere.Statistics.EnumerableStats.SampleVariance
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Ampere.Statistics.EnumerableStats.PopulationVariance*
  commentId: Overload:Ampere.Statistics.EnumerableStats.PopulationVariance
  name: PopulationVariance
  nameWithType: EnumerableStats.PopulationVariance
  fullName: Ampere.Statistics.EnumerableStats.PopulationVariance
- uid: Ampere.Statistics.EnumerableStats.PopulationVariance(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.PopulationVariance(System.Collections.Generic.IEnumerable{System.Double})
  isExternal: true
  name: PopulationVariance(IEnumerable<Double>)
  nameWithType: EnumerableStats.PopulationVariance(IEnumerable<Double>)
  fullName: Ampere.Statistics.EnumerableStats.PopulationVariance(System.Collections.Generic.IEnumerable<System.Double>)
  nameWithType.vb: EnumerableStats.PopulationVariance(IEnumerable(Of Double))
  fullName.vb: Ampere.Statistics.EnumerableStats.PopulationVariance(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: PopulationVariance(IEnumerable(Of Double))
  spec.csharp:
  - uid: Ampere.Statistics.EnumerableStats.PopulationVariance(System.Collections.Generic.IEnumerable{System.Double})
    name: PopulationVariance
    nameWithType: EnumerableStats.PopulationVariance
    fullName: Ampere.Statistics.EnumerableStats.PopulationVariance
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ampere.Statistics.EnumerableStats.PopulationVariance(System.Collections.Generic.IEnumerable{System.Double})
    name: PopulationVariance
    nameWithType: EnumerableStats.PopulationVariance
    fullName: Ampere.Statistics.EnumerableStats.PopulationVariance
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Ampere.Statistics.EnumerableStats.SampleStandardDeviation*
  commentId: Overload:Ampere.Statistics.EnumerableStats.SampleStandardDeviation
  name: SampleStandardDeviation
  nameWithType: EnumerableStats.SampleStandardDeviation
  fullName: Ampere.Statistics.EnumerableStats.SampleStandardDeviation
- uid: Ampere.Statistics.EnumerableStats.SampleStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.SampleStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})
  isExternal: true
  name: SampleStandardDeviation(IEnumerable<Double>)
  nameWithType: EnumerableStats.SampleStandardDeviation(IEnumerable<Double>)
  fullName: Ampere.Statistics.EnumerableStats.SampleStandardDeviation(System.Collections.Generic.IEnumerable<System.Double>)
  nameWithType.vb: EnumerableStats.SampleStandardDeviation(IEnumerable(Of Double))
  fullName.vb: Ampere.Statistics.EnumerableStats.SampleStandardDeviation(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: SampleStandardDeviation(IEnumerable(Of Double))
  spec.csharp:
  - uid: Ampere.Statistics.EnumerableStats.SampleStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})
    name: SampleStandardDeviation
    nameWithType: EnumerableStats.SampleStandardDeviation
    fullName: Ampere.Statistics.EnumerableStats.SampleStandardDeviation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ampere.Statistics.EnumerableStats.SampleStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})
    name: SampleStandardDeviation
    nameWithType: EnumerableStats.SampleStandardDeviation
    fullName: Ampere.Statistics.EnumerableStats.SampleStandardDeviation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Ampere.Statistics.EnumerableStats.PopulationStandardDeviation*
  commentId: Overload:Ampere.Statistics.EnumerableStats.PopulationStandardDeviation
  name: PopulationStandardDeviation
  nameWithType: EnumerableStats.PopulationStandardDeviation
  fullName: Ampere.Statistics.EnumerableStats.PopulationStandardDeviation
- uid: Ampere.Statistics.EnumerableStats.PopulationStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.PopulationStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})
  isExternal: true
  name: PopulationStandardDeviation(IEnumerable<Double>)
  nameWithType: EnumerableStats.PopulationStandardDeviation(IEnumerable<Double>)
  fullName: Ampere.Statistics.EnumerableStats.PopulationStandardDeviation(System.Collections.Generic.IEnumerable<System.Double>)
  nameWithType.vb: EnumerableStats.PopulationStandardDeviation(IEnumerable(Of Double))
  fullName.vb: Ampere.Statistics.EnumerableStats.PopulationStandardDeviation(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: PopulationStandardDeviation(IEnumerable(Of Double))
  spec.csharp:
  - uid: Ampere.Statistics.EnumerableStats.PopulationStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})
    name: PopulationStandardDeviation
    nameWithType: EnumerableStats.PopulationStandardDeviation
    fullName: Ampere.Statistics.EnumerableStats.PopulationStandardDeviation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ampere.Statistics.EnumerableStats.PopulationStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})
    name: PopulationStandardDeviation
    nameWithType: EnumerableStats.PopulationStandardDeviation
    fullName: Ampere.Statistics.EnumerableStats.PopulationStandardDeviation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Ampere.Statistics.EnumerableStats.Range*
  commentId: Overload:Ampere.Statistics.EnumerableStats.Range
  name: Range
  nameWithType: EnumerableStats.Range
  fullName: Ampere.Statistics.EnumerableStats.Range
- uid: Ampere.Statistics.EnumerableStats.Range(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.Range(System.Collections.Generic.IEnumerable{System.Double})
  isExternal: true
  name: Range(IEnumerable<Double>)
  nameWithType: EnumerableStats.Range(IEnumerable<Double>)
  fullName: Ampere.Statistics.EnumerableStats.Range(System.Collections.Generic.IEnumerable<System.Double>)
  nameWithType.vb: EnumerableStats.Range(IEnumerable(Of Double))
  fullName.vb: Ampere.Statistics.EnumerableStats.Range(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: Range(IEnumerable(Of Double))
  spec.csharp:
  - uid: Ampere.Statistics.EnumerableStats.Range(System.Collections.Generic.IEnumerable{System.Double})
    name: Range
    nameWithType: EnumerableStats.Range
    fullName: Ampere.Statistics.EnumerableStats.Range
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ampere.Statistics.EnumerableStats.Range(System.Collections.Generic.IEnumerable{System.Double})
    name: Range
    nameWithType: EnumerableStats.Range
    fullName: Ampere.Statistics.EnumerableStats.Range
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Ampere.Statistics.InsufficientDataSetException
  commentId: T:Ampere.Statistics.InsufficientDataSetException
  name: InsufficientDataSetException
  nameWithType: InsufficientDataSetException
  fullName: Ampere.Statistics.InsufficientDataSetException
- uid: Ampere.Statistics.EnumerableStats.LowerQuartile*
  commentId: Overload:Ampere.Statistics.EnumerableStats.LowerQuartile
  name: LowerQuartile
  nameWithType: EnumerableStats.LowerQuartile
  fullName: Ampere.Statistics.EnumerableStats.LowerQuartile
- uid: Ampere.Statistics.EnumerableStats.LowerQuartile(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.LowerQuartile(System.Collections.Generic.IEnumerable{System.Double})
  isExternal: true
  name: LowerQuartile(IEnumerable<Double>)
  nameWithType: EnumerableStats.LowerQuartile(IEnumerable<Double>)
  fullName: Ampere.Statistics.EnumerableStats.LowerQuartile(System.Collections.Generic.IEnumerable<System.Double>)
  nameWithType.vb: EnumerableStats.LowerQuartile(IEnumerable(Of Double))
  fullName.vb: Ampere.Statistics.EnumerableStats.LowerQuartile(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: LowerQuartile(IEnumerable(Of Double))
  spec.csharp:
  - uid: Ampere.Statistics.EnumerableStats.LowerQuartile(System.Collections.Generic.IEnumerable{System.Double})
    name: LowerQuartile
    nameWithType: EnumerableStats.LowerQuartile
    fullName: Ampere.Statistics.EnumerableStats.LowerQuartile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ampere.Statistics.EnumerableStats.LowerQuartile(System.Collections.Generic.IEnumerable{System.Double})
    name: LowerQuartile
    nameWithType: EnumerableStats.LowerQuartile
    fullName: Ampere.Statistics.EnumerableStats.LowerQuartile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Ampere.Statistics.EnumerableStats.UpperQuartile*
  commentId: Overload:Ampere.Statistics.EnumerableStats.UpperQuartile
  name: UpperQuartile
  nameWithType: EnumerableStats.UpperQuartile
  fullName: Ampere.Statistics.EnumerableStats.UpperQuartile
- uid: Ampere.Statistics.EnumerableStats.UpperQuartile(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.UpperQuartile(System.Collections.Generic.IEnumerable{System.Double})
  isExternal: true
  name: UpperQuartile(IEnumerable<Double>)
  nameWithType: EnumerableStats.UpperQuartile(IEnumerable<Double>)
  fullName: Ampere.Statistics.EnumerableStats.UpperQuartile(System.Collections.Generic.IEnumerable<System.Double>)
  nameWithType.vb: EnumerableStats.UpperQuartile(IEnumerable(Of Double))
  fullName.vb: Ampere.Statistics.EnumerableStats.UpperQuartile(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: UpperQuartile(IEnumerable(Of Double))
  spec.csharp:
  - uid: Ampere.Statistics.EnumerableStats.UpperQuartile(System.Collections.Generic.IEnumerable{System.Double})
    name: UpperQuartile
    nameWithType: EnumerableStats.UpperQuartile
    fullName: Ampere.Statistics.EnumerableStats.UpperQuartile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ampere.Statistics.EnumerableStats.UpperQuartile(System.Collections.Generic.IEnumerable{System.Double})
    name: UpperQuartile
    nameWithType: EnumerableStats.UpperQuartile
    fullName: Ampere.Statistics.EnumerableStats.UpperQuartile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Ampere.Statistics.EnumerableStats.InterQuartileRange*
  commentId: Overload:Ampere.Statistics.EnumerableStats.InterQuartileRange
  name: InterQuartileRange
  nameWithType: EnumerableStats.InterQuartileRange
  fullName: Ampere.Statistics.EnumerableStats.InterQuartileRange
- uid: Ampere.Statistics.EnumerableStats.InterQuartileRange(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.InterQuartileRange(System.Collections.Generic.IEnumerable{System.Double})
  isExternal: true
  name: InterQuartileRange(IEnumerable<Double>)
  nameWithType: EnumerableStats.InterQuartileRange(IEnumerable<Double>)
  fullName: Ampere.Statistics.EnumerableStats.InterQuartileRange(System.Collections.Generic.IEnumerable<System.Double>)
  nameWithType.vb: EnumerableStats.InterQuartileRange(IEnumerable(Of Double))
  fullName.vb: Ampere.Statistics.EnumerableStats.InterQuartileRange(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: InterQuartileRange(IEnumerable(Of Double))
  spec.csharp:
  - uid: Ampere.Statistics.EnumerableStats.InterQuartileRange(System.Collections.Generic.IEnumerable{System.Double})
    name: InterQuartileRange
    nameWithType: EnumerableStats.InterQuartileRange
    fullName: Ampere.Statistics.EnumerableStats.InterQuartileRange
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ampere.Statistics.EnumerableStats.InterQuartileRange(System.Collections.Generic.IEnumerable{System.Double})
    name: InterQuartileRange
    nameWithType: EnumerableStats.InterQuartileRange
    fullName: Ampere.Statistics.EnumerableStats.InterQuartileRange
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Ampere.Statistics.EnumerableStats.IsNormalProportion*
  commentId: Overload:Ampere.Statistics.EnumerableStats.IsNormalProportion
  name: IsNormalProportion
  nameWithType: EnumerableStats.IsNormalProportion
  fullName: Ampere.Statistics.EnumerableStats.IsNormalProportion
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Ampere.Statistics.EnumerableStats.IsNormalProportion(System.Collections.Generic.IEnumerable{System.Double},System.Double)
  commentId: M:Ampere.Statistics.EnumerableStats.IsNormalProportion(System.Collections.Generic.IEnumerable{System.Double},System.Double)
  isExternal: true
  name: IsNormalProportion(IEnumerable<Double>, Double)
  nameWithType: EnumerableStats.IsNormalProportion(IEnumerable<Double>, Double)
  fullName: Ampere.Statistics.EnumerableStats.IsNormalProportion(System.Collections.Generic.IEnumerable<System.Double>, System.Double)
  nameWithType.vb: EnumerableStats.IsNormalProportion(IEnumerable(Of Double), Double)
  fullName.vb: Ampere.Statistics.EnumerableStats.IsNormalProportion(System.Collections.Generic.IEnumerable(Of System.Double), System.Double)
  name.vb: IsNormalProportion(IEnumerable(Of Double), Double)
  spec.csharp:
  - uid: Ampere.Statistics.EnumerableStats.IsNormalProportion(System.Collections.Generic.IEnumerable{System.Double},System.Double)
    name: IsNormalProportion
    nameWithType: EnumerableStats.IsNormalProportion
    fullName: Ampere.Statistics.EnumerableStats.IsNormalProportion
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ampere.Statistics.EnumerableStats.IsNormalProportion(System.Collections.Generic.IEnumerable{System.Double},System.Double)
    name: IsNormalProportion
    nameWithType: EnumerableStats.IsNormalProportion
    fullName: Ampere.Statistics.EnumerableStats.IsNormalProportion
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Ampere.Statistics.EnumerableStats.IsNormalMean*
  commentId: Overload:Ampere.Statistics.EnumerableStats.IsNormalMean
  name: IsNormalMean
  nameWithType: EnumerableStats.IsNormalMean
  fullName: Ampere.Statistics.EnumerableStats.IsNormalMean
- uid: Ampere.Statistics.EnumerableStats.IsNormalMean(System.Collections.Generic.IEnumerable{System.Double})
  commentId: M:Ampere.Statistics.EnumerableStats.IsNormalMean(System.Collections.Generic.IEnumerable{System.Double})
  isExternal: true
  name: IsNormalMean(IEnumerable<Double>)
  nameWithType: EnumerableStats.IsNormalMean(IEnumerable<Double>)
  fullName: Ampere.Statistics.EnumerableStats.IsNormalMean(System.Collections.Generic.IEnumerable<System.Double>)
  nameWithType.vb: EnumerableStats.IsNormalMean(IEnumerable(Of Double))
  fullName.vb: Ampere.Statistics.EnumerableStats.IsNormalMean(System.Collections.Generic.IEnumerable(Of System.Double))
  name.vb: IsNormalMean(IEnumerable(Of Double))
  spec.csharp:
  - uid: Ampere.Statistics.EnumerableStats.IsNormalMean(System.Collections.Generic.IEnumerable{System.Double})
    name: IsNormalMean
    nameWithType: EnumerableStats.IsNormalMean
    fullName: Ampere.Statistics.EnumerableStats.IsNormalMean
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ampere.Statistics.EnumerableStats.IsNormalMean(System.Collections.Generic.IEnumerable{System.Double})
    name: IsNormalMean
    nameWithType: EnumerableStats.IsNormalMean
    fullName: Ampere.Statistics.EnumerableStats.IsNormalMean
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Ampere.Statistics.EnumerableStats.StandardizedScore*
  commentId: Overload:Ampere.Statistics.EnumerableStats.StandardizedScore
  name: StandardizedScore
  nameWithType: EnumerableStats.StandardizedScore
  fullName: Ampere.Statistics.EnumerableStats.StandardizedScore
- uid: Ampere.Statistics.EnumerableStats.StandardizedScore(System.Collections.Generic.IEnumerable{System.Double},System.Double)
  commentId: M:Ampere.Statistics.EnumerableStats.StandardizedScore(System.Collections.Generic.IEnumerable{System.Double},System.Double)
  isExternal: true
  name: StandardizedScore(IEnumerable<Double>, Double)
  nameWithType: EnumerableStats.StandardizedScore(IEnumerable<Double>, Double)
  fullName: Ampere.Statistics.EnumerableStats.StandardizedScore(System.Collections.Generic.IEnumerable<System.Double>, System.Double)
  nameWithType.vb: EnumerableStats.StandardizedScore(IEnumerable(Of Double), Double)
  fullName.vb: Ampere.Statistics.EnumerableStats.StandardizedScore(System.Collections.Generic.IEnumerable(Of System.Double), System.Double)
  name.vb: StandardizedScore(IEnumerable(Of Double), Double)
  spec.csharp:
  - uid: Ampere.Statistics.EnumerableStats.StandardizedScore(System.Collections.Generic.IEnumerable{System.Double},System.Double)
    name: StandardizedScore
    nameWithType: EnumerableStats.StandardizedScore
    fullName: Ampere.Statistics.EnumerableStats.StandardizedScore
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Ampere.Statistics.EnumerableStats.StandardizedScore(System.Collections.Generic.IEnumerable{System.Double},System.Double)
    name: StandardizedScore
    nameWithType: EnumerableStats.StandardizedScore
    fullName: Ampere.Statistics.EnumerableStats.StandardizedScore
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Ampere.Statistics.EnumerableStats.CreateConfidenceInterval*
  commentId: Overload:Ampere.Statistics.EnumerableStats.CreateConfidenceInterval
  name: CreateConfidenceInterval
  nameWithType: EnumerableStats.CreateConfidenceInterval
  fullName: Ampere.Statistics.EnumerableStats.CreateConfidenceInterval
- uid: Ampere.Statistics.EnumerableStats.ConstructTValue*
  commentId: Overload:Ampere.Statistics.EnumerableStats.ConstructTValue
  name: ConstructTValue
  nameWithType: EnumerableStats.ConstructTValue
  fullName: Ampere.Statistics.EnumerableStats.ConstructTValue

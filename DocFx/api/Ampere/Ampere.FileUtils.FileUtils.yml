### YamlMime:ManagedReference
items:
- uid: Ampere.FileUtils.FileUtils
  commentId: T:Ampere.FileUtils.FileUtils
  id: FileUtils
  parent: Ampere.FileUtils
  children:
  - Ampere.FileUtils.FileUtils.FindInFile(System.IO.FileInfo,System.Func{System.String,System.Boolean})
  - Ampere.FileUtils.FileUtils.GetDirectorySize(System.String)
  - Ampere.FileUtils.FileUtils.GetFileSize(System.String)
  - Ampere.FileUtils.FileUtils.GetRootPath
  - Ampere.FileUtils.FileUtils.GetUserPath
  - Ampere.FileUtils.FileUtils.GetValueAtLine(System.IO.FileInfo,System.Int32)
  - Ampere.FileUtils.FileUtils.RemoveFromEachLine(System.IO.FileInfo,System.String)
  - Ampere.FileUtils.FileUtils.RemoveLine(System.IO.FileInfo,System.Int32)
  - Ampere.FileUtils.FileUtils.RemoveLines(System.IO.FileInfo,System.Int32[])
  - Ampere.FileUtils.FileUtils.ReplaceAll(System.IO.FileInfo,System.String,System.String)
  - Ampere.FileUtils.FileUtils.ReplaceAllByLine(System.IO.FileInfo,System.String,System.String)
  - Ampere.FileUtils.FileUtils.ReplaceAllInLine(System.IO.FileInfo,System.String,System.String,System.Int32)
  - Ampere.FileUtils.FileUtils.ReplaceInLines(System.IO.FileInfo,System.Collections.Generic.Dictionary{System.Collections.Generic.KeyValuePair{System.String,System.String},System.Int32})
  - Ampere.FileUtils.FileUtils.ReplaceLine(System.IO.FileInfo,System.String,System.Int32)
  - Ampere.FileUtils.FileUtils.ReplaceLines(System.IO.FileInfo,System.Collections.Generic.Dictionary{System.String,System.Int32})
  - Ampere.FileUtils.FileUtils.WriteLine(System.IO.FileInfo,System.String)
  langs:
  - csharp
  - vb
  name: FileUtils
  nameWithType: FileUtils
  fullName: Ampere.FileUtils.FileUtils
  type: Class
  source:
    remote:
      path: Ampere/FileUtils/FileUtils.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: FileUtils
    path: ../Ampere/FileUtils/FileUtils.cs
    startLine: 11
  assemblies:
  - Ampere
  namespace: Ampere.FileUtils
  summary: "\nA static class for File utility functions\n"
  example: []
  syntax:
    content: public static class FileUtils
    content.vb: Public Module FileUtils
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Ampere.FileUtils.FileUtils.WriteLine(System.IO.FileInfo,System.String)
  commentId: M:Ampere.FileUtils.FileUtils.WriteLine(System.IO.FileInfo,System.String)
  id: WriteLine(System.IO.FileInfo,System.String)
  parent: Ampere.FileUtils.FileUtils
  langs:
  - csharp
  - vb
  name: WriteLine(FileInfo, String)
  nameWithType: FileUtils.WriteLine(FileInfo, String)
  fullName: Ampere.FileUtils.FileUtils.WriteLine(System.IO.FileInfo, System.String)
  type: Method
  source:
    remote:
      path: Ampere/FileUtils/FileUtils.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: WriteLine
    path: ../Ampere/FileUtils/FileUtils.cs
    startLine: 18
  assemblies:
  - Ampere
  namespace: Ampere.FileUtils
  summary: "\nAppends a string value into the file.\n"
  example: []
  syntax:
    content: public static void WriteLine(FileInfo fileInfo, string value)
    parameters:
    - id: fileInfo
      type: System.IO.FileInfo
      description: The FileInfo instance to write the value to
    - id: value
      type: System.String
      description: The string value to write
    content.vb: Public Shared Sub WriteLine(fileInfo As FileInfo, value As String)
  overload: Ampere.FileUtils.FileUtils.WriteLine*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Ampere.FileUtils.FileUtils.ReplaceAll(System.IO.FileInfo,System.String,System.String)
  commentId: M:Ampere.FileUtils.FileUtils.ReplaceAll(System.IO.FileInfo,System.String,System.String)
  id: ReplaceAll(System.IO.FileInfo,System.String,System.String)
  parent: Ampere.FileUtils.FileUtils
  langs:
  - csharp
  - vb
  name: ReplaceAll(FileInfo, String, String)
  nameWithType: FileUtils.ReplaceAll(FileInfo, String, String)
  fullName: Ampere.FileUtils.FileUtils.ReplaceAll(System.IO.FileInfo, System.String, System.String)
  type: Method
  source:
    remote:
      path: Ampere/FileUtils/FileUtils.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: ReplaceAll
    path: ../Ampere/FileUtils/FileUtils.cs
    startLine: 37
  assemblies:
  - Ampere
  namespace: Ampere.FileUtils
  summary: "\nReplaces all instances of a specific value from a file with another replacement value.\n"
  example: []
  syntax:
    content: public static void ReplaceAll(FileInfo fileInfo, string oldValue, string replacementValue)
    parameters:
    - id: fileInfo
      type: System.IO.FileInfo
      description: The FileInfo instance to write the value to
    - id: oldValue
      type: System.String
      description: The value to replace
    - id: replacementValue
      type: System.String
      description: The replacement value
    content.vb: Public Shared Sub ReplaceAll(fileInfo As FileInfo, oldValue As String, replacementValue As String)
  overload: Ampere.FileUtils.FileUtils.ReplaceAll*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Ampere.FileUtils.FileUtils.ReplaceAllByLine(System.IO.FileInfo,System.String,System.String)
  commentId: M:Ampere.FileUtils.FileUtils.ReplaceAllByLine(System.IO.FileInfo,System.String,System.String)
  id: ReplaceAllByLine(System.IO.FileInfo,System.String,System.String)
  parent: Ampere.FileUtils.FileUtils
  langs:
  - csharp
  - vb
  name: ReplaceAllByLine(FileInfo, String, String)
  nameWithType: FileUtils.ReplaceAllByLine(FileInfo, String, String)
  fullName: Ampere.FileUtils.FileUtils.ReplaceAllByLine(System.IO.FileInfo, System.String, System.String)
  type: Method
  source:
    remote:
      path: Ampere/FileUtils/FileUtils.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: ReplaceAllByLine
    path: ../Ampere/FileUtils/FileUtils.cs
    startLine: 51
  assemblies:
  - Ampere
  namespace: Ampere.FileUtils
  summary: "\nReplaces all instances of a specific value from a file with another replacement value if and only if\nthe old value is solely in one line.\n"
  example: []
  syntax:
    content: public static void ReplaceAllByLine(FileInfo fileInfo, string oldValue, string replacementValue)
    parameters:
    - id: fileInfo
      type: System.IO.FileInfo
      description: The FileInfo instance to write the value to
    - id: oldValue
      type: System.String
      description: The value to replace
    - id: replacementValue
      type: System.String
      description: The replacement value
    content.vb: Public Shared Sub ReplaceAllByLine(fileInfo As FileInfo, oldValue As String, replacementValue As String)
  overload: Ampere.FileUtils.FileUtils.ReplaceAllByLine*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Ampere.FileUtils.FileUtils.ReplaceAllInLine(System.IO.FileInfo,System.String,System.String,System.Int32)
  commentId: M:Ampere.FileUtils.FileUtils.ReplaceAllInLine(System.IO.FileInfo,System.String,System.String,System.Int32)
  id: ReplaceAllInLine(System.IO.FileInfo,System.String,System.String,System.Int32)
  parent: Ampere.FileUtils.FileUtils
  langs:
  - csharp
  - vb
  name: ReplaceAllInLine(FileInfo, String, String, Int32)
  nameWithType: FileUtils.ReplaceAllInLine(FileInfo, String, String, Int32)
  fullName: Ampere.FileUtils.FileUtils.ReplaceAllInLine(System.IO.FileInfo, System.String, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: Ampere/FileUtils/FileUtils.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: ReplaceAllInLine
    path: ../Ampere/FileUtils/FileUtils.cs
    startLine: 66
  assemblies:
  - Ampere
  namespace: Ampere.FileUtils
  summary: "\nReplaces all instances of a specific value from a file with another replacement value from a specified line\n"
  example: []
  syntax:
    content: public static void ReplaceAllInLine(FileInfo fileInfo, string oldValue, string replacementValue, int line)
    parameters:
    - id: fileInfo
      type: System.IO.FileInfo
      description: The FileInfo instance to write the value to
    - id: oldValue
      type: System.String
      description: The value to replace
    - id: replacementValue
      type: System.String
      description: The replacement value
    - id: line
      type: System.Int32
      description: The line number to replace from
    content.vb: Public Shared Sub ReplaceAllInLine(fileInfo As FileInfo, oldValue As String, replacementValue As String, line As Integer)
  overload: Ampere.FileUtils.FileUtils.ReplaceAllInLine*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Ampere.FileUtils.FileUtils.ReplaceInLines(System.IO.FileInfo,System.Collections.Generic.Dictionary{System.Collections.Generic.KeyValuePair{System.String,System.String},System.Int32})
  commentId: M:Ampere.FileUtils.FileUtils.ReplaceInLines(System.IO.FileInfo,System.Collections.Generic.Dictionary{System.Collections.Generic.KeyValuePair{System.String,System.String},System.Int32})
  id: ReplaceInLines(System.IO.FileInfo,System.Collections.Generic.Dictionary{System.Collections.Generic.KeyValuePair{System.String,System.String},System.Int32})
  parent: Ampere.FileUtils.FileUtils
  langs:
  - csharp
  - vb
  name: ReplaceInLines(FileInfo, Dictionary<KeyValuePair<String, String>, Int32>)
  nameWithType: FileUtils.ReplaceInLines(FileInfo, Dictionary<KeyValuePair<String, String>, Int32>)
  fullName: Ampere.FileUtils.FileUtils.ReplaceInLines(System.IO.FileInfo, System.Collections.Generic.Dictionary<System.Collections.Generic.KeyValuePair<System.String, System.String>, System.Int32>)
  type: Method
  source:
    remote:
      path: Ampere/FileUtils/FileUtils.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: ReplaceInLines
    path: ../Ampere/FileUtils/FileUtils.cs
    startLine: 86
  assemblies:
  - Ampere
  namespace: Ampere.FileUtils
  summary: "\nReplaces all instances of a specific value from a file with another replacement value from a specified line.\nThis overload facilitates the replacement through a Dictionary where the key&apos;s is an instance of\n<xref href=\"System.Collections.Generic.KeyValuePair%602\" data-throw-if-not-resolved=\"false\"></xref> and the value is an int. This allows for unique replacements to occur\nin more than one line\n"
  example: []
  syntax:
    content: public static void ReplaceInLines(FileInfo fileInfo, Dictionary<KeyValuePair<string, string>, int> replacementDict)
    parameters:
    - id: fileInfo
      type: System.IO.FileInfo
      description: The FileInfo instance to write the value to
    - id: replacementDict
      type: System.Collections.Generic.Dictionary{System.Collections.Generic.KeyValuePair{System.String,System.String},System.Int32}
      description: A Dictionary of replacement values and line numbers
    content.vb: Public Shared Sub ReplaceInLines(fileInfo As FileInfo, replacementDict As Dictionary(Of KeyValuePair(Of String, String), Integer))
  overload: Ampere.FileUtils.FileUtils.ReplaceInLines*
  nameWithType.vb: FileUtils.ReplaceInLines(FileInfo, Dictionary(Of KeyValuePair(Of String, String), Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Ampere.FileUtils.FileUtils.ReplaceInLines(System.IO.FileInfo, System.Collections.Generic.Dictionary(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String), System.Int32))
  name.vb: ReplaceInLines(FileInfo, Dictionary(Of KeyValuePair(Of String, String), Int32))
- uid: Ampere.FileUtils.FileUtils.ReplaceLine(System.IO.FileInfo,System.String,System.Int32)
  commentId: M:Ampere.FileUtils.FileUtils.ReplaceLine(System.IO.FileInfo,System.String,System.Int32)
  id: ReplaceLine(System.IO.FileInfo,System.String,System.Int32)
  parent: Ampere.FileUtils.FileUtils
  langs:
  - csharp
  - vb
  name: ReplaceLine(FileInfo, String, Int32)
  nameWithType: FileUtils.ReplaceLine(FileInfo, String, Int32)
  fullName: Ampere.FileUtils.FileUtils.ReplaceLine(System.IO.FileInfo, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: Ampere/FileUtils/FileUtils.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: ReplaceLine
    path: ../Ampere/FileUtils/FileUtils.cs
    startLine: 103
  assemblies:
  - Ampere
  namespace: Ampere.FileUtils
  summary: "\nReplaces an entire line with a replacement value.\n"
  example: []
  syntax:
    content: public static void ReplaceLine(FileInfo fileInfo, string replacementValue, int line)
    parameters:
    - id: fileInfo
      type: System.IO.FileInfo
      description: The FileInfo instance to write the value to
    - id: replacementValue
      type: System.String
      description: The replacement value
    - id: line
      type: System.Int32
      description: The line number to replace from
    content.vb: Public Shared Sub ReplaceLine(fileInfo As FileInfo, replacementValue As String, line As Integer)
  overload: Ampere.FileUtils.FileUtils.ReplaceLine*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Ampere.FileUtils.FileUtils.ReplaceLines(System.IO.FileInfo,System.Collections.Generic.Dictionary{System.String,System.Int32})
  commentId: M:Ampere.FileUtils.FileUtils.ReplaceLines(System.IO.FileInfo,System.Collections.Generic.Dictionary{System.String,System.Int32})
  id: ReplaceLines(System.IO.FileInfo,System.Collections.Generic.Dictionary{System.String,System.Int32})
  parent: Ampere.FileUtils.FileUtils
  langs:
  - csharp
  - vb
  name: ReplaceLines(FileInfo, Dictionary<String, Int32>)
  nameWithType: FileUtils.ReplaceLines(FileInfo, Dictionary<String, Int32>)
  fullName: Ampere.FileUtils.FileUtils.ReplaceLines(System.IO.FileInfo, System.Collections.Generic.Dictionary<System.String, System.Int32>)
  type: Method
  source:
    remote:
      path: Ampere/FileUtils/FileUtils.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: ReplaceLines
    path: ../Ampere/FileUtils/FileUtils.cs
    startLine: 114
  assemblies:
  - Ampere
  namespace: Ampere.FileUtils
  summary: "\nReplace an entire line with a replacement value. This overload uses a Dictionary of replacement values\nand line numbers to replace more than one line. \n"
  example: []
  syntax:
    content: public static void ReplaceLines(FileInfo fileInfo, Dictionary<string, int> replacementValueLine)
    parameters:
    - id: fileInfo
      type: System.IO.FileInfo
      description: The FileInfo instance to write the value to
    - id: replacementValueLine
      type: System.Collections.Generic.Dictionary{System.String,System.Int32}
      description: A Dictionary of replacement values and line number
    content.vb: Public Shared Sub ReplaceLines(fileInfo As FileInfo, replacementValueLine As Dictionary(Of String, Integer))
  overload: Ampere.FileUtils.FileUtils.ReplaceLines*
  nameWithType.vb: FileUtils.ReplaceLines(FileInfo, Dictionary(Of String, Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Ampere.FileUtils.FileUtils.ReplaceLines(System.IO.FileInfo, System.Collections.Generic.Dictionary(Of System.String, System.Int32))
  name.vb: ReplaceLines(FileInfo, Dictionary(Of String, Int32))
- uid: Ampere.FileUtils.FileUtils.RemoveFromEachLine(System.IO.FileInfo,System.String)
  commentId: M:Ampere.FileUtils.FileUtils.RemoveFromEachLine(System.IO.FileInfo,System.String)
  id: RemoveFromEachLine(System.IO.FileInfo,System.String)
  parent: Ampere.FileUtils.FileUtils
  langs:
  - csharp
  - vb
  name: RemoveFromEachLine(FileInfo, String)
  nameWithType: FileUtils.RemoveFromEachLine(FileInfo, String)
  fullName: Ampere.FileUtils.FileUtils.RemoveFromEachLine(System.IO.FileInfo, System.String)
  type: Method
  source:
    remote:
      path: Ampere/FileUtils/FileUtils.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: RemoveFromEachLine
    path: ../Ampere/FileUtils/FileUtils.cs
    startLine: 129
  assemblies:
  - Ampere
  namespace: Ampere.FileUtils
  summary: "\nRemoves all instances of a specific value from a file if and only if the value is solely in one line.\n"
  example: []
  syntax:
    content: public static void RemoveFromEachLine(FileInfo fileInfo, string valToRemove)
    parameters:
    - id: fileInfo
      type: System.IO.FileInfo
      description: The FileInfo instance to write the value to
    - id: valToRemove
      type: System.String
      description: The value to remove
    content.vb: Public Shared Sub RemoveFromEachLine(fileInfo As FileInfo, valToRemove As String)
  overload: Ampere.FileUtils.FileUtils.RemoveFromEachLine*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Ampere.FileUtils.FileUtils.RemoveLine(System.IO.FileInfo,System.Int32)
  commentId: M:Ampere.FileUtils.FileUtils.RemoveLine(System.IO.FileInfo,System.Int32)
  id: RemoveLine(System.IO.FileInfo,System.Int32)
  parent: Ampere.FileUtils.FileUtils
  langs:
  - csharp
  - vb
  name: RemoveLine(FileInfo, Int32)
  nameWithType: FileUtils.RemoveLine(FileInfo, Int32)
  fullName: Ampere.FileUtils.FileUtils.RemoveLine(System.IO.FileInfo, System.Int32)
  type: Method
  source:
    remote:
      path: Ampere/FileUtils/FileUtils.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: RemoveLine
    path: ../Ampere/FileUtils/FileUtils.cs
    startLine: 142
  assemblies:
  - Ampere
  namespace: Ampere.FileUtils
  summary: "\nRemoves a specific line number from a file.\n"
  example: []
  syntax:
    content: public static void RemoveLine(FileInfo fileInfo, int line)
    parameters:
    - id: fileInfo
      type: System.IO.FileInfo
      description: The FileInfo instance to write the value to
    - id: line
      type: System.Int32
      description: The line number to remove
    content.vb: Public Shared Sub RemoveLine(fileInfo As FileInfo, line As Integer)
  overload: Ampere.FileUtils.FileUtils.RemoveLine*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Ampere.FileUtils.FileUtils.RemoveLines(System.IO.FileInfo,System.Int32[])
  commentId: M:Ampere.FileUtils.FileUtils.RemoveLines(System.IO.FileInfo,System.Int32[])
  id: RemoveLines(System.IO.FileInfo,System.Int32[])
  parent: Ampere.FileUtils.FileUtils
  langs:
  - csharp
  - vb
  name: RemoveLines(FileInfo, Int32[])
  nameWithType: FileUtils.RemoveLines(FileInfo, Int32[])
  fullName: Ampere.FileUtils.FileUtils.RemoveLines(System.IO.FileInfo, System.Int32[])
  type: Method
  source:
    remote:
      path: Ampere/FileUtils/FileUtils.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: RemoveLines
    path: ../Ampere/FileUtils/FileUtils.cs
    startLine: 152
  assemblies:
  - Ampere
  namespace: Ampere.FileUtils
  summary: "\nRemoves a variable argument number of lines from a file.\n"
  example: []
  syntax:
    content: public static void RemoveLines(FileInfo fileInfo, params int[] lines)
    parameters:
    - id: fileInfo
      type: System.IO.FileInfo
      description: The FileInfo instance to write the value to
    - id: lines
      type: System.Int32[]
      description: The line numbers to remove
    content.vb: Public Shared Sub RemoveLines(fileInfo As FileInfo, ParamArray lines As Integer())
  overload: Ampere.FileUtils.FileUtils.RemoveLines*
  nameWithType.vb: FileUtils.RemoveLines(FileInfo, Int32())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Ampere.FileUtils.FileUtils.RemoveLines(System.IO.FileInfo, System.Int32())
  name.vb: RemoveLines(FileInfo, Int32())
- uid: Ampere.FileUtils.FileUtils.FindInFile(System.IO.FileInfo,System.Func{System.String,System.Boolean})
  commentId: M:Ampere.FileUtils.FileUtils.FindInFile(System.IO.FileInfo,System.Func{System.String,System.Boolean})
  id: FindInFile(System.IO.FileInfo,System.Func{System.String,System.Boolean})
  parent: Ampere.FileUtils.FileUtils
  langs:
  - csharp
  - vb
  name: FindInFile(FileInfo, Func<String, Boolean>)
  nameWithType: FileUtils.FindInFile(FileInfo, Func<String, Boolean>)
  fullName: Ampere.FileUtils.FileUtils.FindInFile(System.IO.FileInfo, System.Func<System.String, System.Boolean>)
  type: Method
  source:
    remote:
      path: Ampere/FileUtils/FileUtils.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: FindInFile
    path: ../Ampere/FileUtils/FileUtils.cs
    startLine: 169
  assemblies:
  - Ampere
  namespace: Ampere.FileUtils
  summary: "\nReturns the line of the matched predicate in the file. If the predicate is not found,\n-1 is returned.\n"
  example: []
  syntax:
    content: public static int FindInFile(FileInfo fileInfo, Func<string, bool> predicate)
    parameters:
    - id: fileInfo
      type: System.IO.FileInfo
      description: The FileInfo instance to read from
    - id: predicate
      type: System.Func{System.String,System.Boolean}
      description: The function predicate to find in the file
    return:
      type: System.Int32
      description: ''
    content.vb: Public Shared Function FindInFile(fileInfo As FileInfo, predicate As Func(Of String, Boolean)) As Integer
  overload: Ampere.FileUtils.FileUtils.FindInFile*
  nameWithType.vb: FileUtils.FindInFile(FileInfo, Func(Of String, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Ampere.FileUtils.FileUtils.FindInFile(System.IO.FileInfo, System.Func(Of System.String, System.Boolean))
  name.vb: FindInFile(FileInfo, Func(Of String, Boolean))
- uid: Ampere.FileUtils.FileUtils.GetValueAtLine(System.IO.FileInfo,System.Int32)
  commentId: M:Ampere.FileUtils.FileUtils.GetValueAtLine(System.IO.FileInfo,System.Int32)
  id: GetValueAtLine(System.IO.FileInfo,System.Int32)
  parent: Ampere.FileUtils.FileUtils
  langs:
  - csharp
  - vb
  name: GetValueAtLine(FileInfo, Int32)
  nameWithType: FileUtils.GetValueAtLine(FileInfo, Int32)
  fullName: Ampere.FileUtils.FileUtils.GetValueAtLine(System.IO.FileInfo, System.Int32)
  type: Method
  source:
    remote:
      path: Ampere/FileUtils/FileUtils.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: GetValueAtLine
    path: ../Ampere/FileUtils/FileUtils.cs
    startLine: 193
  assemblies:
  - Ampere
  namespace: Ampere.FileUtils
  summary: "\nReturns the value found at a line number.\n"
  example: []
  syntax:
    content: public static string GetValueAtLine(FileInfo fileInfo, int line)
    parameters:
    - id: fileInfo
      type: System.IO.FileInfo
      description: The FileInfo instance to read from
    - id: line
      type: System.Int32
      description: The line number to find
    return:
      type: System.String
      description: ''
    content.vb: Public Shared Function GetValueAtLine(fileInfo As FileInfo, line As Integer) As String
  overload: Ampere.FileUtils.FileUtils.GetValueAtLine*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Ampere.FileUtils.FileUtils.GetDirectorySize(System.String)
  commentId: M:Ampere.FileUtils.FileUtils.GetDirectorySize(System.String)
  id: GetDirectorySize(System.String)
  isExtensionMethod: true
  parent: Ampere.FileUtils.FileUtils
  langs:
  - csharp
  - vb
  name: GetDirectorySize(String)
  nameWithType: FileUtils.GetDirectorySize(String)
  fullName: Ampere.FileUtils.FileUtils.GetDirectorySize(System.String)
  type: Method
  source:
    remote:
      path: Ampere/FileUtils/FileUtils.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: GetDirectorySize
    path: ../Ampere/FileUtils/FileUtils.cs
    startLine: 201
  assemblies:
  - Ampere
  namespace: Ampere.FileUtils
  summary: "\nReturns the size of a directory in bytes, given an abstract file path.\n"
  example: []
  syntax:
    content: public static long GetDirectorySize(this string dirPath)
    parameters:
    - id: dirPath
      type: System.String
      description: The path to the directory
    return:
      type: System.Int64
      description: The size of the directory in bytes
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDirectorySize(dirPath As String) As Long
  overload: Ampere.FileUtils.FileUtils.GetDirectorySize*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Ampere.FileUtils.FileUtils.GetFileSize(System.String)
  commentId: M:Ampere.FileUtils.FileUtils.GetFileSize(System.String)
  id: GetFileSize(System.String)
  isExtensionMethod: true
  parent: Ampere.FileUtils.FileUtils
  langs:
  - csharp
  - vb
  name: GetFileSize(String)
  nameWithType: FileUtils.GetFileSize(String)
  fullName: Ampere.FileUtils.FileUtils.GetFileSize(System.String)
  type: Method
  source:
    remote:
      path: Ampere/FileUtils/FileUtils.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: GetFileSize
    path: ../Ampere/FileUtils/FileUtils.cs
    startLine: 218
  assemblies:
  - Ampere
  namespace: Ampere.FileUtils
  summary: "\nReturns the size of file in bytes, given an abstract file path.\n"
  example: []
  syntax:
    content: public static long GetFileSize(this string filePath)
    parameters:
    - id: filePath
      type: System.String
      description: The path to the file
    return:
      type: System.Int64
      description: The size of the file in bytes
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetFileSize(filePath As String) As Long
  overload: Ampere.FileUtils.FileUtils.GetFileSize*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Ampere.FileUtils.FileUtils.GetRootPath
  commentId: M:Ampere.FileUtils.FileUtils.GetRootPath
  id: GetRootPath
  parent: Ampere.FileUtils.FileUtils
  langs:
  - csharp
  - vb
  name: GetRootPath()
  nameWithType: FileUtils.GetRootPath()
  fullName: Ampere.FileUtils.FileUtils.GetRootPath()
  type: Method
  source:
    remote:
      path: Ampere/FileUtils/FileUtils.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: GetRootPath
    path: ../Ampere/FileUtils/FileUtils.cs
    startLine: 225
  assemblies:
  - Ampere
  namespace: Ampere.FileUtils
  summary: "\nReturns a pathname to the root directory of the System.\n"
  example: []
  syntax:
    content: public static string GetRootPath()
    return:
      type: System.String
      description: A pathname to the root directory of the System
    content.vb: Public Shared Function GetRootPath As String
  overload: Ampere.FileUtils.FileUtils.GetRootPath*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Ampere.FileUtils.FileUtils.GetUserPath
  commentId: M:Ampere.FileUtils.FileUtils.GetUserPath
  id: GetUserPath
  parent: Ampere.FileUtils.FileUtils
  langs:
  - csharp
  - vb
  name: GetUserPath()
  nameWithType: FileUtils.GetUserPath()
  fullName: Ampere.FileUtils.FileUtils.GetUserPath()
  type: Method
  source:
    remote:
      path: Ampere/FileUtils/FileUtils.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: GetUserPath
    path: ../Ampere/FileUtils/FileUtils.cs
    startLine: 232
  assemblies:
  - Ampere
  namespace: Ampere.FileUtils
  summary: "\nReturns a pathname to the user&apos;s profile folder.\n"
  example: []
  syntax:
    content: public static string GetUserPath()
    return:
      type: System.String
      description: A pathname to the user&apos;s profile folder
    content.vb: Public Shared Function GetUserPath As String
  overload: Ampere.FileUtils.FileUtils.GetUserPath*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Ampere.FileUtils
  commentId: N:Ampere.FileUtils
  name: Ampere.FileUtils
  nameWithType: Ampere.FileUtils
  fullName: Ampere.FileUtils
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Ampere.FileUtils.FileUtils.WriteLine*
  commentId: Overload:Ampere.FileUtils.FileUtils.WriteLine
  name: WriteLine
  nameWithType: FileUtils.WriteLine
  fullName: Ampere.FileUtils.FileUtils.WriteLine
- uid: System.IO.FileInfo
  commentId: T:System.IO.FileInfo
  parent: System.IO
  isExternal: true
  name: FileInfo
  nameWithType: FileInfo
  fullName: System.IO.FileInfo
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Ampere.FileUtils.FileUtils.ReplaceAll*
  commentId: Overload:Ampere.FileUtils.FileUtils.ReplaceAll
  name: ReplaceAll
  nameWithType: FileUtils.ReplaceAll
  fullName: Ampere.FileUtils.FileUtils.ReplaceAll
- uid: Ampere.FileUtils.FileUtils.ReplaceAllByLine*
  commentId: Overload:Ampere.FileUtils.FileUtils.ReplaceAllByLine
  name: ReplaceAllByLine
  nameWithType: FileUtils.ReplaceAllByLine
  fullName: Ampere.FileUtils.FileUtils.ReplaceAllByLine
- uid: Ampere.FileUtils.FileUtils.ReplaceAllInLine*
  commentId: Overload:Ampere.FileUtils.FileUtils.ReplaceAllInLine
  name: ReplaceAllInLine
  nameWithType: FileUtils.ReplaceAllInLine
  fullName: Ampere.FileUtils.FileUtils.ReplaceAllInLine
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.KeyValuePair`2
  commentId: T:System.Collections.Generic.KeyValuePair`2
  isExternal: true
- uid: Ampere.FileUtils.FileUtils.ReplaceInLines*
  commentId: Overload:Ampere.FileUtils.FileUtils.ReplaceInLines
  name: ReplaceInLines
  nameWithType: FileUtils.ReplaceInLines
  fullName: Ampere.FileUtils.FileUtils.ReplaceInLines
- uid: System.Collections.Generic.Dictionary{System.Collections.Generic.KeyValuePair{System.String,System.String},System.Int32}
  commentId: T:System.Collections.Generic.Dictionary{System.Collections.Generic.KeyValuePair{System.String,System.String},System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<KeyValuePair<String, String>, Int32>
  nameWithType: Dictionary<KeyValuePair<String, String>, Int32>
  fullName: System.Collections.Generic.Dictionary<System.Collections.Generic.KeyValuePair<System.String, System.String>, System.Int32>
  nameWithType.vb: Dictionary(Of KeyValuePair(Of String, String), Int32)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String), System.Int32)
  name.vb: Dictionary(Of KeyValuePair(Of String, String), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Ampere.FileUtils.FileUtils.ReplaceLine*
  commentId: Overload:Ampere.FileUtils.FileUtils.ReplaceLine
  name: ReplaceLine
  nameWithType: FileUtils.ReplaceLine
  fullName: Ampere.FileUtils.FileUtils.ReplaceLine
- uid: Ampere.FileUtils.FileUtils.ReplaceLines*
  commentId: Overload:Ampere.FileUtils.FileUtils.ReplaceLines
  name: ReplaceLines
  nameWithType: FileUtils.ReplaceLines
  fullName: Ampere.FileUtils.FileUtils.ReplaceLines
- uid: System.Collections.Generic.Dictionary{System.String,System.Int32}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Int32>
  nameWithType: Dictionary<String, Int32>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Int32>
  nameWithType.vb: Dictionary(Of String, Int32)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Int32)
  name.vb: Dictionary(Of String, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Ampere.FileUtils.FileUtils.RemoveFromEachLine*
  commentId: Overload:Ampere.FileUtils.FileUtils.RemoveFromEachLine
  name: RemoveFromEachLine
  nameWithType: FileUtils.RemoveFromEachLine
  fullName: Ampere.FileUtils.FileUtils.RemoveFromEachLine
- uid: Ampere.FileUtils.FileUtils.RemoveLine*
  commentId: Overload:Ampere.FileUtils.FileUtils.RemoveLine
  name: RemoveLine
  nameWithType: FileUtils.RemoveLine
  fullName: Ampere.FileUtils.FileUtils.RemoveLine
- uid: Ampere.FileUtils.FileUtils.RemoveLines*
  commentId: Overload:Ampere.FileUtils.FileUtils.RemoveLines
  name: RemoveLines
  nameWithType: FileUtils.RemoveLines
  fullName: Ampere.FileUtils.FileUtils.RemoveLines
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Ampere.FileUtils.FileUtils.FindInFile*
  commentId: Overload:Ampere.FileUtils.FileUtils.FindInFile
  name: FindInFile
  nameWithType: FileUtils.FindInFile
  fullName: Ampere.FileUtils.FileUtils.FindInFile
- uid: System.Func{System.String,System.Boolean}
  commentId: T:System.Func{System.String,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<String, Boolean>
  nameWithType: Func<String, Boolean>
  fullName: System.Func<System.String, System.Boolean>
  nameWithType.vb: Func(Of String, Boolean)
  fullName.vb: System.Func(Of System.String, System.Boolean)
  name.vb: Func(Of String, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Ampere.FileUtils.FileUtils.GetValueAtLine*
  commentId: Overload:Ampere.FileUtils.FileUtils.GetValueAtLine
  name: GetValueAtLine
  nameWithType: FileUtils.GetValueAtLine
  fullName: Ampere.FileUtils.FileUtils.GetValueAtLine
- uid: Ampere.FileUtils.FileUtils.GetDirectorySize*
  commentId: Overload:Ampere.FileUtils.FileUtils.GetDirectorySize
  name: GetDirectorySize
  nameWithType: FileUtils.GetDirectorySize
  fullName: Ampere.FileUtils.FileUtils.GetDirectorySize
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Ampere.FileUtils.FileUtils.GetFileSize*
  commentId: Overload:Ampere.FileUtils.FileUtils.GetFileSize
  name: GetFileSize
  nameWithType: FileUtils.GetFileSize
  fullName: Ampere.FileUtils.FileUtils.GetFileSize
- uid: Ampere.FileUtils.FileUtils.GetRootPath*
  commentId: Overload:Ampere.FileUtils.FileUtils.GetRootPath
  name: GetRootPath
  nameWithType: FileUtils.GetRootPath
  fullName: Ampere.FileUtils.FileUtils.GetRootPath
- uid: Ampere.FileUtils.FileUtils.GetUserPath*
  commentId: Overload:Ampere.FileUtils.FileUtils.GetUserPath
  name: GetUserPath
  nameWithType: FileUtils.GetUserPath
  fullName: Ampere.FileUtils.FileUtils.GetUserPath

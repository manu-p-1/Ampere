### YamlMime:ManagedReference
items:
- uid: PowerPlug.Base.Profile
  commentId: T:PowerPlug.Base.Profile
  id: Profile
  parent: PowerPlug.Base
  children:
  - PowerPlug.Base.Profile.#ctor(System.IO.FileInfo)
  - PowerPlug.Base.Profile.#ctor(System.String)
  - PowerPlug.Base.Profile.GetProfile
  - PowerPlug.Base.Profile.ProfileExists
  langs:
  - csharp
  - vb
  name: Profile
  nameWithType: Profile
  fullName: PowerPlug.Base.Profile
  type: Class
  source:
    remote:
      path: PowerPlug/Base/Profile.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: Profile
    path: ../PowerPlug/Base/Profile.cs
    startLine: 9
  assemblies:
  - PowerPlug
  namespace: PowerPlug.Base
  summary: "\nAn abstracted representation of the location of a user&apos;s PowerShell $PROFILE path\n"
  example: []
  syntax:
    content: 'public class Profile : PowerPlugFileBase'
    content.vb: >-
      Public Class Profile

          Inherits PowerPlugFileBase
  inheritance:
  - System.Object
  - PowerPlug.Base.PowerPlugFileBase
  inheritedMembers:
  - PowerPlug.Base.PowerPlugFileBase.FileInfo
  - PowerPlug.Base.PowerPlugFileBase.FileParentDir
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: PowerPlug.Base.Profile.#ctor(System.String)
  commentId: M:PowerPlug.Base.Profile.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: PowerPlug.Base.Profile
  langs:
  - csharp
  - vb
  name: Profile(String)
  nameWithType: Profile.Profile(String)
  fullName: PowerPlug.Base.Profile.Profile(System.String)
  type: Constructor
  source:
    remote:
      path: PowerPlug/Base/Profile.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: .ctor
    path: ../PowerPlug/Base/Profile.cs
    startLine: 12
  assemblies:
  - PowerPlug
  namespace: PowerPlug.Base
  example: []
  syntax:
    content: public Profile(string path)
    parameters:
    - id: path
      type: System.String
    content.vb: Public Sub New(path As String)
  overload: PowerPlug.Base.Profile.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PowerPlug.Base.Profile.#ctor(System.IO.FileInfo)
  commentId: M:PowerPlug.Base.Profile.#ctor(System.IO.FileInfo)
  id: '#ctor(System.IO.FileInfo)'
  parent: PowerPlug.Base.Profile
  langs:
  - csharp
  - vb
  name: Profile(FileInfo)
  nameWithType: Profile.Profile(FileInfo)
  fullName: PowerPlug.Base.Profile.Profile(System.IO.FileInfo)
  type: Constructor
  source:
    remote:
      path: PowerPlug/Base/Profile.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: .ctor
    path: ../PowerPlug/Base/Profile.cs
    startLine: 15
  assemblies:
  - PowerPlug
  namespace: PowerPlug.Base
  example: []
  syntax:
    content: public Profile(FileInfo fileInfo)
    parameters:
    - id: fileInfo
      type: System.IO.FileInfo
    content.vb: Public Sub New(fileInfo As FileInfo)
  overload: PowerPlug.Base.Profile.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PowerPlug.Base.Profile.ProfileExists
  commentId: M:PowerPlug.Base.Profile.ProfileExists
  id: ProfileExists
  parent: PowerPlug.Base.Profile
  langs:
  - csharp
  - vb
  name: ProfileExists()
  nameWithType: Profile.ProfileExists()
  fullName: PowerPlug.Base.Profile.ProfileExists()
  type: Method
  source:
    remote:
      path: PowerPlug/Base/Profile.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: ProfileExists
    path: ../PowerPlug/Base/Profile.cs
    startLine: 22
  assemblies:
  - PowerPlug
  namespace: PowerPlug.Base
  summary: "\nRuns a PowerShell script to check if the user&apos;s $PROFILE path exists. The command run internally\nis <pre><code>Test-Path $PROFILE</code></pre>\n"
  example: []
  syntax:
    content: public static bool ProfileExists()
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function ProfileExists As Boolean
  overload: PowerPlug.Base.Profile.ProfileExists*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: PowerPlug.Base.Profile.GetProfile
  commentId: M:PowerPlug.Base.Profile.GetProfile
  id: GetProfile
  parent: PowerPlug.Base.Profile
  langs:
  - csharp
  - vb
  name: GetProfile()
  nameWithType: Profile.GetProfile()
  fullName: PowerPlug.Base.Profile.GetProfile()
  type: Method
  source:
    remote:
      path: PowerPlug/Base/Profile.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: GetProfile
    path: ../PowerPlug/Base/Profile.cs
    startLine: 33
  assemblies:
  - PowerPlug
  namespace: PowerPlug.Base
  summary: "\nReturn&apos;s a new <xref href=\"PowerPlug.Base.Profile\" data-throw-if-not-resolved=\"false\"></xref> object containing information about the user&apos;s $PROFILE path\n"
  example: []
  syntax:
    content: public static Profile GetProfile()
    return:
      type: PowerPlug.Base.Profile
      description: ''
    content.vb: Public Shared Function GetProfile As Profile
  overload: PowerPlug.Base.Profile.GetProfile*
  exceptions:
  - type: System.Management.Automation.SessionStateException
    commentId: T:System.Management.Automation.SessionStateException
    description: A SessionStateException is thrown if the user&apos;s $PROFILE cannot be found
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: PowerPlug.Base
  commentId: N:PowerPlug.Base
  name: PowerPlug.Base
  nameWithType: PowerPlug.Base
  fullName: PowerPlug.Base
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: PowerPlug.Base.PowerPlugFileBase
  commentId: T:PowerPlug.Base.PowerPlugFileBase
  parent: PowerPlug.Base
  name: PowerPlugFileBase
  nameWithType: PowerPlugFileBase
  fullName: PowerPlug.Base.PowerPlugFileBase
- uid: PowerPlug.Base.PowerPlugFileBase.FileInfo
  commentId: P:PowerPlug.Base.PowerPlugFileBase.FileInfo
  parent: PowerPlug.Base.PowerPlugFileBase
  name: FileInfo
  nameWithType: PowerPlugFileBase.FileInfo
  fullName: PowerPlug.Base.PowerPlugFileBase.FileInfo
- uid: PowerPlug.Base.PowerPlugFileBase.FileParentDir
  commentId: P:PowerPlug.Base.PowerPlugFileBase.FileParentDir
  parent: PowerPlug.Base.PowerPlugFileBase
  name: FileParentDir
  nameWithType: PowerPlugFileBase.FileParentDir
  fullName: PowerPlug.Base.PowerPlugFileBase.FileParentDir
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: PowerPlug.Base.Profile.#ctor*
  commentId: Overload:PowerPlug.Base.Profile.#ctor
  name: Profile
  nameWithType: Profile.Profile
  fullName: PowerPlug.Base.Profile.Profile
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.FileInfo
  commentId: T:System.IO.FileInfo
  parent: System.IO
  isExternal: true
  name: FileInfo
  nameWithType: FileInfo
  fullName: System.IO.FileInfo
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: PowerPlug.Base.Profile.ProfileExists*
  commentId: Overload:PowerPlug.Base.Profile.ProfileExists
  name: ProfileExists
  nameWithType: Profile.ProfileExists
  fullName: PowerPlug.Base.Profile.ProfileExists
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: PowerPlug.Base.Profile
  commentId: T:PowerPlug.Base.Profile
  parent: PowerPlug.Base
  name: Profile
  nameWithType: Profile
  fullName: PowerPlug.Base.Profile
- uid: System.Management.Automation.SessionStateException
  commentId: T:System.Management.Automation.SessionStateException
  isExternal: true
- uid: PowerPlug.Base.Profile.GetProfile*
  commentId: Overload:PowerPlug.Base.Profile.GetProfile
  name: GetProfile
  nameWithType: Profile.GetProfile
  fullName: PowerPlug.Base.Profile.GetProfile

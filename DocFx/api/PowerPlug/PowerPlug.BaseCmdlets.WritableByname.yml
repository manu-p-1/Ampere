### YamlMime:ManagedReference
items:
- uid: PowerPlug.BaseCmdlets.WritableByname
  commentId: T:PowerPlug.BaseCmdlets.WritableByname
  id: WritableByname
  parent: PowerPlug.BaseCmdlets
  children:
  - PowerPlug.BaseCmdlets.WritableByname.Confirm
  - PowerPlug.BaseCmdlets.WritableByname.Description
  - PowerPlug.BaseCmdlets.WritableByname.Force
  - PowerPlug.BaseCmdlets.WritableByname.Name
  - PowerPlug.BaseCmdlets.WritableByname.Option
  - PowerPlug.BaseCmdlets.WritableByname.PassThru
  - PowerPlug.BaseCmdlets.WritableByname.Scope
  - PowerPlug.BaseCmdlets.WritableByname.ToString
  - PowerPlug.BaseCmdlets.WritableByname.Value
  - PowerPlug.BaseCmdlets.WritableByname.WhatIf
  langs:
  - csharp
  - vb
  name: WritableByname
  nameWithType: WritableByname
  fullName: PowerPlug.BaseCmdlets.WritableByname
  type: Class
  source:
    remote:
      path: PowerPlug/BaseCmdlets/WritableByname.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: WritableByname
    path: ../PowerPlug/BaseCmdlets/WritableByname.cs
    startLine: 7
  assemblies:
  - PowerPlug
  namespace: PowerPlug.BaseCmdlets
  summary: "\nRepresents a Byname that can be written or modified to the user&apos;s $PROFILE.\n"
  example: []
  syntax:
    content: 'public abstract class WritableByname : BynameBase'
    content.vb: >-
      Public MustInherit Class WritableByname

          Inherits BynameBase
  inheritance:
  - System.Object
  - System.Management.Automation.Internal.InternalCommand
  - System.Management.Automation.Cmdlet
  - System.Management.Automation.PSCmdlet
  - PowerPlug.BaseCmdlets.BynameBase
  derivedClasses:
  - PowerPlug.Cmdlets.Byname.NewBynameCmdlet
  - PowerPlug.Cmdlets.Byname.SetBynameCmdlet
  inheritedMembers:
  - System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String)
  - System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String,System.Management.Automation.ProviderInfo@)
  - System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String)
  - System.Management.Automation.PSCmdlet.GetVariableValue(System.String)
  - System.Management.Automation.PSCmdlet.GetVariableValue(System.String,System.Object)
  - System.Management.Automation.PSCmdlet.Events
  - System.Management.Automation.PSCmdlet.Host
  - System.Management.Automation.PSCmdlet.InvokeCommand
  - System.Management.Automation.PSCmdlet.InvokeProvider
  - System.Management.Automation.PSCmdlet.JobManager
  - System.Management.Automation.PSCmdlet.JobRepository
  - System.Management.Automation.PSCmdlet.MyInvocation
  - System.Management.Automation.PSCmdlet.PagingParameters
  - System.Management.Automation.PSCmdlet.ParameterSetName
  - System.Management.Automation.PSCmdlet.SessionState
  - System.Management.Automation.Cmdlet.BeginProcessing
  - System.Management.Automation.Cmdlet.EndProcessing
  - System.Management.Automation.Cmdlet.GetResourceString(System.String,System.String)
  - System.Management.Automation.Cmdlet.Invoke
  - System.Management.Automation.Cmdlet.Invoke``1
  - System.Management.Automation.Cmdlet.ProcessRecord
  - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String,System.Boolean,System.Boolean@,System.Boolean@)
  - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String,System.Boolean@,System.Boolean@)
  - System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String)
  - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String,System.Management.Automation.ShouldProcessReason@)
  - System.Management.Automation.Cmdlet.ShouldProcess(System.String)
  - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String)
  - System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String)
  - System.Management.Automation.Cmdlet.StopProcessing
  - System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord)
  - System.Management.Automation.Cmdlet.TransactionAvailable
  - System.Management.Automation.Cmdlet.WriteCommandDetail(System.String)
  - System.Management.Automation.Cmdlet.WriteDebug(System.String)
  - System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord)
  - System.Management.Automation.Cmdlet.WriteInformation(System.Object,System.String[])
  - System.Management.Automation.Cmdlet.WriteInformation(System.Management.Automation.InformationRecord)
  - System.Management.Automation.Cmdlet.WriteObject(System.Object,System.Boolean)
  - System.Management.Automation.Cmdlet.WriteObject(System.Object)
  - System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord)
  - System.Management.Automation.Cmdlet.WriteVerbose(System.String)
  - System.Management.Automation.Cmdlet.WriteWarning(System.String)
  - System.Management.Automation.Cmdlet.CommandRuntime
  - System.Management.Automation.Cmdlet.CommonParameters
  - System.Management.Automation.Cmdlet.OptionalCommonParameters
  - System.Management.Automation.Cmdlet.Stopping
  - System.Management.Automation.Internal.InternalCommand.CommandOrigin
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: PowerPlug.BaseCmdlets.WritableByname.Name
  commentId: P:PowerPlug.BaseCmdlets.WritableByname.Name
  id: Name
  parent: PowerPlug.BaseCmdlets.WritableByname
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: WritableByname.Name
  fullName: PowerPlug.BaseCmdlets.WritableByname.Name
  type: Property
  source:
    remote:
      path: PowerPlug/BaseCmdlets/WritableByname.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: Name
    path: ../PowerPlug/BaseCmdlets/WritableByname.cs
    startLine: 12
  assemblies:
  - PowerPlug
  namespace: PowerPlug.BaseCmdlets
  summary: "\nThe Name parameter for the command.\n"
  example: []
  syntax:
    content: >-
      [Parameter(Position = 0, Mandatory = true, ValueFromPipelineByPropertyName = true)]

      public override string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <Parameter(Position:=0, Mandatory:=True, ValueFromPipelineByPropertyName:=True)>

      Public Overrides Property Name As String
  overridden: PowerPlug.BaseCmdlets.BynameBase.Name
  overload: PowerPlug.BaseCmdlets.WritableByname.Name*
  attributes:
  - type: System.Management.Automation.ParameterAttribute
    ctor: System.Management.Automation.ParameterAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Position
      type: System.Int32
      value: 0
    - name: Mandatory
      type: System.Boolean
      value: true
    - name: ValueFromPipelineByPropertyName
      type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: PowerPlug.BaseCmdlets.WritableByname.Scope
  commentId: P:PowerPlug.BaseCmdlets.WritableByname.Scope
  id: Scope
  parent: PowerPlug.BaseCmdlets.WritableByname
  langs:
  - csharp
  - vb
  name: Scope
  nameWithType: WritableByname.Scope
  fullName: PowerPlug.BaseCmdlets.WritableByname.Scope
  type: Property
  source:
    remote:
      path: PowerPlug/BaseCmdlets/WritableByname.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: Scope
    path: ../PowerPlug/BaseCmdlets/WritableByname.cs
    startLine: 18
  assemblies:
  - PowerPlug
  namespace: PowerPlug.BaseCmdlets
  summary: "\nThe scope parameter for the command determines which scope the alias is set in.\n"
  example: []
  syntax:
    content: >-
      [Parameter]

      [ValidateSet(new string[]{"Global", "Local", "Private", "Numbered scopes", "Script"})]

      public string Scope { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <Parameter>

      <ValidateSet(New String() {"Global", "Local", "Private", "Numbered scopes", "Script"})>

      Public Property Scope As String
  overload: PowerPlug.BaseCmdlets.WritableByname.Scope*
  attributes:
  - type: System.Management.Automation.ParameterAttribute
    ctor: System.Management.Automation.ParameterAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: PowerPlug.BaseCmdlets.WritableByname.Force
  commentId: P:PowerPlug.BaseCmdlets.WritableByname.Force
  id: Force
  parent: PowerPlug.BaseCmdlets.WritableByname
  langs:
  - csharp
  - vb
  name: Force
  nameWithType: WritableByname.Force
  fullName: PowerPlug.BaseCmdlets.WritableByname.Force
  type: Property
  source:
    remote:
      path: PowerPlug/BaseCmdlets/WritableByname.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: Force
    path: ../PowerPlug/BaseCmdlets/WritableByname.cs
    startLine: 27
  assemblies:
  - PowerPlug
  namespace: PowerPlug.BaseCmdlets
  summary: "\nIf set to true and an existing alias of the same name exists\nand is ReadOnly, the alias will be overwritten.\n"
  example: []
  syntax:
    content: >-
      [Parameter]

      public SwitchParameter Force { get; set; }
    parameters: []
    return:
      type: System.Management.Automation.SwitchParameter
    content.vb: >-
      <Parameter>

      Public Property Force As SwitchParameter
  overload: PowerPlug.BaseCmdlets.WritableByname.Force*
  attributes:
  - type: System.Management.Automation.ParameterAttribute
    ctor: System.Management.Automation.ParameterAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: PowerPlug.BaseCmdlets.WritableByname.Value
  commentId: P:PowerPlug.BaseCmdlets.WritableByname.Value
  id: Value
  parent: PowerPlug.BaseCmdlets.WritableByname
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: WritableByname.Value
  fullName: PowerPlug.BaseCmdlets.WritableByname.Value
  type: Property
  source:
    remote:
      path: PowerPlug/BaseCmdlets/WritableByname.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: Value
    path: ../PowerPlug/BaseCmdlets/WritableByname.cs
    startLine: 40
  assemblies:
  - PowerPlug
  namespace: PowerPlug.BaseCmdlets
  summary: "\nThe Value parameter for the command.\n"
  example: []
  syntax:
    content: >-
      [Parameter(Position = 1, Mandatory = true, ValueFromPipelineByPropertyName = true)]

      public string Value { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <Parameter(Position:=1, Mandatory:=True, ValueFromPipelineByPropertyName:=True)>

      Public Property Value As String
  overload: PowerPlug.BaseCmdlets.WritableByname.Value*
  attributes:
  - type: System.Management.Automation.ParameterAttribute
    ctor: System.Management.Automation.ParameterAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Position
      type: System.Int32
      value: 1
    - name: Mandatory
      type: System.Boolean
      value: true
    - name: ValueFromPipelineByPropertyName
      type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: PowerPlug.BaseCmdlets.WritableByname.Description
  commentId: P:PowerPlug.BaseCmdlets.WritableByname.Description
  id: Description
  parent: PowerPlug.BaseCmdlets.WritableByname
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: WritableByname.Description
  fullName: PowerPlug.BaseCmdlets.WritableByname.Description
  type: Property
  source:
    remote:
      path: PowerPlug/BaseCmdlets/WritableByname.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: Description
    path: ../PowerPlug/BaseCmdlets/WritableByname.cs
    startLine: 46
  assemblies:
  - PowerPlug
  namespace: PowerPlug.BaseCmdlets
  summary: "\nThe description for the alias.\n"
  example: []
  syntax:
    content: >-
      [Parameter]

      public string Description { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <Parameter>

      Public Property Description As String
  overload: PowerPlug.BaseCmdlets.WritableByname.Description*
  attributes:
  - type: System.Management.Automation.ParameterAttribute
    ctor: System.Management.Automation.ParameterAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: PowerPlug.BaseCmdlets.WritableByname.Option
  commentId: P:PowerPlug.BaseCmdlets.WritableByname.Option
  id: Option
  parent: PowerPlug.BaseCmdlets.WritableByname
  langs:
  - csharp
  - vb
  name: Option
  nameWithType: WritableByname.Option
  fullName: PowerPlug.BaseCmdlets.WritableByname.Option
  type: Property
  source:
    remote:
      path: PowerPlug/BaseCmdlets/WritableByname.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: Option
    path: ../PowerPlug/BaseCmdlets/WritableByname.cs
    startLine: 54
  assemblies:
  - PowerPlug
  namespace: PowerPlug.BaseCmdlets
  summary: "\nThe Option parameter allows the alias to be set to\nReadOnly (for existing aliases) and/or Constant (only\nfor new aliases).\n"
  example: []
  syntax:
    content: >-
      [Parameter]

      public ScopedItemOptions Option { get; set; }
    parameters: []
    return:
      type: System.Management.Automation.ScopedItemOptions
    content.vb: >-
      <Parameter>

      Public Property Option As ScopedItemOptions
  overload: PowerPlug.BaseCmdlets.WritableByname.Option*
  attributes:
  - type: System.Management.Automation.ParameterAttribute
    ctor: System.Management.Automation.ParameterAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: PowerPlug.BaseCmdlets.WritableByname.PassThru
  commentId: P:PowerPlug.BaseCmdlets.WritableByname.PassThru
  id: PassThru
  parent: PowerPlug.BaseCmdlets.WritableByname
  langs:
  - csharp
  - vb
  name: PassThru
  nameWithType: WritableByname.PassThru
  fullName: PowerPlug.BaseCmdlets.WritableByname.PassThru
  type: Property
  source:
    remote:
      path: PowerPlug/BaseCmdlets/WritableByname.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: PassThru
    path: ../PowerPlug/BaseCmdlets/WritableByname.cs
    startLine: 60
  assemblies:
  - PowerPlug
  namespace: PowerPlug.BaseCmdlets
  summary: "\nIf set to true, the alias that is set is passed to the pipeline.\n"
  example: []
  syntax:
    content: >-
      [Parameter]

      public SwitchParameter PassThru { get; set; }
    parameters: []
    return:
      type: System.Management.Automation.SwitchParameter
    content.vb: >-
      <Parameter>

      Public Property PassThru As SwitchParameter
  overload: PowerPlug.BaseCmdlets.WritableByname.PassThru*
  attributes:
  - type: System.Management.Automation.ParameterAttribute
    ctor: System.Management.Automation.ParameterAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: PowerPlug.BaseCmdlets.WritableByname.WhatIf
  commentId: P:PowerPlug.BaseCmdlets.WritableByname.WhatIf
  id: WhatIf
  parent: PowerPlug.BaseCmdlets.WritableByname
  langs:
  - csharp
  - vb
  name: WhatIf
  nameWithType: WritableByname.WhatIf
  fullName: PowerPlug.BaseCmdlets.WritableByname.WhatIf
  type: Property
  source:
    remote:
      path: PowerPlug/BaseCmdlets/WritableByname.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: WhatIf
    path: ../PowerPlug/BaseCmdlets/WritableByname.cs
    startLine: 73
  assemblies:
  - PowerPlug
  namespace: PowerPlug.BaseCmdlets
  summary: "\nShows what would happen if the cmdlet runs. The cmdlet is not run.\n"
  example: []
  syntax:
    content: >-
      [Parameter]

      [Alias(new string[]{"wi"})]

      public SwitchParameter WhatIf { get; set; }
    parameters: []
    return:
      type: System.Management.Automation.SwitchParameter
    content.vb: >-
      <Parameter>

      <Alias(New String() {"wi"})>

      Public Property WhatIf As SwitchParameter
  overload: PowerPlug.BaseCmdlets.WritableByname.WhatIf*
  attributes:
  - type: System.Management.Automation.ParameterAttribute
    ctor: System.Management.Automation.ParameterAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: PowerPlug.BaseCmdlets.WritableByname.Confirm
  commentId: P:PowerPlug.BaseCmdlets.WritableByname.Confirm
  id: Confirm
  parent: PowerPlug.BaseCmdlets.WritableByname
  langs:
  - csharp
  - vb
  name: Confirm
  nameWithType: WritableByname.Confirm
  fullName: PowerPlug.BaseCmdlets.WritableByname.Confirm
  type: Property
  source:
    remote:
      path: PowerPlug/BaseCmdlets/WritableByname.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: Confirm
    path: ../PowerPlug/BaseCmdlets/WritableByname.cs
    startLine: 86
  assemblies:
  - PowerPlug
  namespace: PowerPlug.BaseCmdlets
  summary: "\nDisplays a confirmation dialog to require user input to execute the command.\n"
  example: []
  syntax:
    content: >-
      [Parameter]

      public SwitchParameter Confirm { get; set; }
    parameters: []
    return:
      type: System.Management.Automation.SwitchParameter
    content.vb: >-
      <Parameter>

      Public Property Confirm As SwitchParameter
  overload: PowerPlug.BaseCmdlets.WritableByname.Confirm*
  attributes:
  - type: System.Management.Automation.ParameterAttribute
    ctor: System.Management.Automation.ParameterAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: PowerPlug.BaseCmdlets.WritableByname.ToString
  commentId: M:PowerPlug.BaseCmdlets.WritableByname.ToString
  id: ToString
  parent: PowerPlug.BaseCmdlets.WritableByname
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: WritableByname.ToString()
  fullName: PowerPlug.BaseCmdlets.WritableByname.ToString()
  type: Method
  source:
    remote:
      path: PowerPlug/BaseCmdlets/WritableByname.cs
      branch: volt
      repo: https://github.com/manu-p-1/PowerShell-Cmdlet-Utils.git
    id: ToString
    path: ../PowerPlug/BaseCmdlets/WritableByname.cs
    startLine: 101
  assemblies:
  - PowerPlug
  namespace: PowerPlug.BaseCmdlets
  summary: "\nEvery WritableByname must have ToString overriden. This is because a Byname is simply a wrapper for\nthe &quot;New-Alias&quot; or &quot;Set-Alias&quot; command. Therefore, the ToString method represents the either of the\npreviously mentioned alias commands as a string in it&apos;s fully qualified form.\n"
  example: []
  syntax:
    content: public abstract override string ToString()
    return:
      type: System.String
      description: A string representing the entire command with all options included in the string
    content.vb: Public MustOverride Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: PowerPlug.BaseCmdlets.WritableByname.ToString*
  modifiers.csharp:
  - public
  - abstract
  - override
  modifiers.vb:
  - Public
  - MustOverride
  - Overrides
references:
- uid: PowerPlug.BaseCmdlets
  commentId: N:PowerPlug.BaseCmdlets
  name: PowerPlug.BaseCmdlets
  nameWithType: PowerPlug.BaseCmdlets
  fullName: PowerPlug.BaseCmdlets
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Management.Automation.Internal.InternalCommand
  commentId: T:System.Management.Automation.Internal.InternalCommand
  parent: System.Management.Automation.Internal
  isExternal: true
  name: InternalCommand
  nameWithType: InternalCommand
  fullName: System.Management.Automation.Internal.InternalCommand
- uid: System.Management.Automation.Cmdlet
  commentId: T:System.Management.Automation.Cmdlet
  parent: System.Management.Automation
  isExternal: true
  name: Cmdlet
  nameWithType: Cmdlet
  fullName: System.Management.Automation.Cmdlet
- uid: System.Management.Automation.PSCmdlet
  commentId: T:System.Management.Automation.PSCmdlet
  parent: System.Management.Automation
  isExternal: true
  name: PSCmdlet
  nameWithType: PSCmdlet
  fullName: System.Management.Automation.PSCmdlet
- uid: PowerPlug.BaseCmdlets.BynameBase
  commentId: T:PowerPlug.BaseCmdlets.BynameBase
  parent: PowerPlug.BaseCmdlets
  name: BynameBase
  nameWithType: BynameBase
  fullName: PowerPlug.BaseCmdlets.BynameBase
- uid: System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String)
  commentId: M:System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String)
  parent: System.Management.Automation.PSCmdlet
  isExternal: true
  name: CurrentProviderLocation(String)
  nameWithType: PSCmdlet.CurrentProviderLocation(String)
  fullName: System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String)
  spec.csharp:
  - uid: System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String)
    name: CurrentProviderLocation
    nameWithType: PSCmdlet.CurrentProviderLocation
    fullName: System.Management.Automation.PSCmdlet.CurrentProviderLocation
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Management.Automation.PSCmdlet.CurrentProviderLocation(System.String)
    name: CurrentProviderLocation
    nameWithType: PSCmdlet.CurrentProviderLocation
    fullName: System.Management.Automation.PSCmdlet.CurrentProviderLocation
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String,System.Management.Automation.ProviderInfo@)
  commentId: M:System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String,System.Management.Automation.ProviderInfo@)
  parent: System.Management.Automation.PSCmdlet
  isExternal: true
  name: GetResolvedProviderPathFromPSPath(String, ProviderInfo)
  nameWithType: PSCmdlet.GetResolvedProviderPathFromPSPath(String, ProviderInfo)
  fullName: System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String, System.Management.Automation.ProviderInfo)
  spec.csharp:
  - uid: System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String,System.Management.Automation.ProviderInfo@)
    name: GetResolvedProviderPathFromPSPath
    nameWithType: PSCmdlet.GetResolvedProviderPathFromPSPath
    fullName: System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Management.Automation.ProviderInfo
    name: ProviderInfo
    nameWithType: ProviderInfo
    fullName: System.Management.Automation.ProviderInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath(System.String,System.Management.Automation.ProviderInfo@)
    name: GetResolvedProviderPathFromPSPath
    nameWithType: PSCmdlet.GetResolvedProviderPathFromPSPath
    fullName: System.Management.Automation.PSCmdlet.GetResolvedProviderPathFromPSPath
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Management.Automation.ProviderInfo
    name: ProviderInfo
    nameWithType: ProviderInfo
    fullName: System.Management.Automation.ProviderInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String)
  commentId: M:System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String)
  parent: System.Management.Automation.PSCmdlet
  isExternal: true
  name: GetUnresolvedProviderPathFromPSPath(String)
  nameWithType: PSCmdlet.GetUnresolvedProviderPathFromPSPath(String)
  fullName: System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String)
  spec.csharp:
  - uid: System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String)
    name: GetUnresolvedProviderPathFromPSPath
    nameWithType: PSCmdlet.GetUnresolvedProviderPathFromPSPath
    fullName: System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath(System.String)
    name: GetUnresolvedProviderPathFromPSPath
    nameWithType: PSCmdlet.GetUnresolvedProviderPathFromPSPath
    fullName: System.Management.Automation.PSCmdlet.GetUnresolvedProviderPathFromPSPath
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Management.Automation.PSCmdlet.GetVariableValue(System.String)
  commentId: M:System.Management.Automation.PSCmdlet.GetVariableValue(System.String)
  parent: System.Management.Automation.PSCmdlet
  isExternal: true
  name: GetVariableValue(String)
  nameWithType: PSCmdlet.GetVariableValue(String)
  fullName: System.Management.Automation.PSCmdlet.GetVariableValue(System.String)
  spec.csharp:
  - uid: System.Management.Automation.PSCmdlet.GetVariableValue(System.String)
    name: GetVariableValue
    nameWithType: PSCmdlet.GetVariableValue
    fullName: System.Management.Automation.PSCmdlet.GetVariableValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Management.Automation.PSCmdlet.GetVariableValue(System.String)
    name: GetVariableValue
    nameWithType: PSCmdlet.GetVariableValue
    fullName: System.Management.Automation.PSCmdlet.GetVariableValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Management.Automation.PSCmdlet.GetVariableValue(System.String,System.Object)
  commentId: M:System.Management.Automation.PSCmdlet.GetVariableValue(System.String,System.Object)
  parent: System.Management.Automation.PSCmdlet
  isExternal: true
  name: GetVariableValue(String, Object)
  nameWithType: PSCmdlet.GetVariableValue(String, Object)
  fullName: System.Management.Automation.PSCmdlet.GetVariableValue(System.String, System.Object)
  spec.csharp:
  - uid: System.Management.Automation.PSCmdlet.GetVariableValue(System.String,System.Object)
    name: GetVariableValue
    nameWithType: PSCmdlet.GetVariableValue
    fullName: System.Management.Automation.PSCmdlet.GetVariableValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Management.Automation.PSCmdlet.GetVariableValue(System.String,System.Object)
    name: GetVariableValue
    nameWithType: PSCmdlet.GetVariableValue
    fullName: System.Management.Automation.PSCmdlet.GetVariableValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Management.Automation.PSCmdlet.Events
  commentId: P:System.Management.Automation.PSCmdlet.Events
  parent: System.Management.Automation.PSCmdlet
  isExternal: true
  name: Events
  nameWithType: PSCmdlet.Events
  fullName: System.Management.Automation.PSCmdlet.Events
- uid: System.Management.Automation.PSCmdlet.Host
  commentId: P:System.Management.Automation.PSCmdlet.Host
  parent: System.Management.Automation.PSCmdlet
  isExternal: true
  name: Host
  nameWithType: PSCmdlet.Host
  fullName: System.Management.Automation.PSCmdlet.Host
- uid: System.Management.Automation.PSCmdlet.InvokeCommand
  commentId: P:System.Management.Automation.PSCmdlet.InvokeCommand
  parent: System.Management.Automation.PSCmdlet
  isExternal: true
  name: InvokeCommand
  nameWithType: PSCmdlet.InvokeCommand
  fullName: System.Management.Automation.PSCmdlet.InvokeCommand
- uid: System.Management.Automation.PSCmdlet.InvokeProvider
  commentId: P:System.Management.Automation.PSCmdlet.InvokeProvider
  parent: System.Management.Automation.PSCmdlet
  isExternal: true
  name: InvokeProvider
  nameWithType: PSCmdlet.InvokeProvider
  fullName: System.Management.Automation.PSCmdlet.InvokeProvider
- uid: System.Management.Automation.PSCmdlet.JobManager
  commentId: P:System.Management.Automation.PSCmdlet.JobManager
  parent: System.Management.Automation.PSCmdlet
  isExternal: true
  name: JobManager
  nameWithType: PSCmdlet.JobManager
  fullName: System.Management.Automation.PSCmdlet.JobManager
- uid: System.Management.Automation.PSCmdlet.JobRepository
  commentId: P:System.Management.Automation.PSCmdlet.JobRepository
  parent: System.Management.Automation.PSCmdlet
  isExternal: true
  name: JobRepository
  nameWithType: PSCmdlet.JobRepository
  fullName: System.Management.Automation.PSCmdlet.JobRepository
- uid: System.Management.Automation.PSCmdlet.MyInvocation
  commentId: P:System.Management.Automation.PSCmdlet.MyInvocation
  parent: System.Management.Automation.PSCmdlet
  isExternal: true
  name: MyInvocation
  nameWithType: PSCmdlet.MyInvocation
  fullName: System.Management.Automation.PSCmdlet.MyInvocation
- uid: System.Management.Automation.PSCmdlet.PagingParameters
  commentId: P:System.Management.Automation.PSCmdlet.PagingParameters
  parent: System.Management.Automation.PSCmdlet
  isExternal: true
  name: PagingParameters
  nameWithType: PSCmdlet.PagingParameters
  fullName: System.Management.Automation.PSCmdlet.PagingParameters
- uid: System.Management.Automation.PSCmdlet.ParameterSetName
  commentId: P:System.Management.Automation.PSCmdlet.ParameterSetName
  parent: System.Management.Automation.PSCmdlet
  isExternal: true
  name: ParameterSetName
  nameWithType: PSCmdlet.ParameterSetName
  fullName: System.Management.Automation.PSCmdlet.ParameterSetName
- uid: System.Management.Automation.PSCmdlet.SessionState
  commentId: P:System.Management.Automation.PSCmdlet.SessionState
  parent: System.Management.Automation.PSCmdlet
  isExternal: true
  name: SessionState
  nameWithType: PSCmdlet.SessionState
  fullName: System.Management.Automation.PSCmdlet.SessionState
- uid: System.Management.Automation.Cmdlet.BeginProcessing
  commentId: M:System.Management.Automation.Cmdlet.BeginProcessing
  parent: System.Management.Automation.Cmdlet
  isExternal: true
  name: BeginProcessing()
  nameWithType: Cmdlet.BeginProcessing()
  fullName: System.Management.Automation.Cmdlet.BeginProcessing()
  spec.csharp:
  - uid: System.Management.Automation.Cmdlet.BeginProcessing
    name: BeginProcessing
    nameWithType: Cmdlet.BeginProcessing
    fullName: System.Management.Automation.Cmdlet.BeginProcessing
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Management.Automation.Cmdlet.BeginProcessing
    name: BeginProcessing
    nameWithType: Cmdlet.BeginProcessing
    fullName: System.Management.Automation.Cmdlet.BeginProcessing
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Management.Automation.Cmdlet.EndProcessing
  commentId: M:System.Management.Automation.Cmdlet.EndProcessing
  parent: System.Management.Automation.Cmdlet
  isExternal: true
  name: EndProcessing()
  nameWithType: Cmdlet.EndProcessing()
  fullName: System.Management.Automation.Cmdlet.EndProcessing()
  spec.csharp:
  - uid: System.Management.Automation.Cmdlet.EndProcessing
    name: EndProcessing
    nameWithType: Cmdlet.EndProcessing
    fullName: System.Management.Automation.Cmdlet.EndProcessing
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Management.Automation.Cmdlet.EndProcessing
    name: EndProcessing
    nameWithType: Cmdlet.EndProcessing
    fullName: System.Management.Automation.Cmdlet.EndProcessing
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Management.Automation.Cmdlet.GetResourceString(System.String,System.String)
  commentId: M:System.Management.Automation.Cmdlet.GetResourceString(System.String,System.String)
  parent: System.Management.Automation.Cmdlet
  isExternal: true
  name: GetResourceString(String, String)
  nameWithType: Cmdlet.GetResourceString(String, String)
  fullName: System.Management.Automation.Cmdlet.GetResourceString(System.String, System.String)
  spec.csharp:
  - uid: System.Management.Automation.Cmdlet.GetResourceString(System.String,System.String)
    name: GetResourceString
    nameWithType: Cmdlet.GetResourceString
    fullName: System.Management.Automation.Cmdlet.GetResourceString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Management.Automation.Cmdlet.GetResourceString(System.String,System.String)
    name: GetResourceString
    nameWithType: Cmdlet.GetResourceString
    fullName: System.Management.Automation.Cmdlet.GetResourceString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Management.Automation.Cmdlet.Invoke
  commentId: M:System.Management.Automation.Cmdlet.Invoke
  parent: System.Management.Automation.Cmdlet
  isExternal: true
  name: Invoke()
  nameWithType: Cmdlet.Invoke()
  fullName: System.Management.Automation.Cmdlet.Invoke()
  spec.csharp:
  - uid: System.Management.Automation.Cmdlet.Invoke
    name: Invoke
    nameWithType: Cmdlet.Invoke
    fullName: System.Management.Automation.Cmdlet.Invoke
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Management.Automation.Cmdlet.Invoke
    name: Invoke
    nameWithType: Cmdlet.Invoke
    fullName: System.Management.Automation.Cmdlet.Invoke
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Management.Automation.Cmdlet.Invoke``1
  commentId: M:System.Management.Automation.Cmdlet.Invoke``1
  parent: System.Management.Automation.Cmdlet
  isExternal: true
  name: Invoke<T>()
  nameWithType: Cmdlet.Invoke<T>()
  fullName: System.Management.Automation.Cmdlet.Invoke<T>()
  nameWithType.vb: Cmdlet.Invoke(Of T)()
  fullName.vb: System.Management.Automation.Cmdlet.Invoke(Of T)()
  name.vb: Invoke(Of T)()
  spec.csharp:
  - uid: System.Management.Automation.Cmdlet.Invoke``1
    name: Invoke<T>
    nameWithType: Cmdlet.Invoke<T>
    fullName: System.Management.Automation.Cmdlet.Invoke<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Management.Automation.Cmdlet.Invoke``1
    name: Invoke(Of T)
    nameWithType: Cmdlet.Invoke(Of T)
    fullName: System.Management.Automation.Cmdlet.Invoke(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Management.Automation.Cmdlet.ProcessRecord
  commentId: M:System.Management.Automation.Cmdlet.ProcessRecord
  parent: System.Management.Automation.Cmdlet
  isExternal: true
  name: ProcessRecord()
  nameWithType: Cmdlet.ProcessRecord()
  fullName: System.Management.Automation.Cmdlet.ProcessRecord()
  spec.csharp:
  - uid: System.Management.Automation.Cmdlet.ProcessRecord
    name: ProcessRecord
    nameWithType: Cmdlet.ProcessRecord
    fullName: System.Management.Automation.Cmdlet.ProcessRecord
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Management.Automation.Cmdlet.ProcessRecord
    name: ProcessRecord
    nameWithType: Cmdlet.ProcessRecord
    fullName: System.Management.Automation.Cmdlet.ProcessRecord
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String,System.Boolean,System.Boolean@,System.Boolean@)
  commentId: M:System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String,System.Boolean,System.Boolean@,System.Boolean@)
  parent: System.Management.Automation.Cmdlet
  isExternal: true
  name: ShouldContinue(String, String, Boolean, Boolean, Boolean)
  nameWithType: Cmdlet.ShouldContinue(String, String, Boolean, Boolean, Boolean)
  fullName: System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String, System.Boolean, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String,System.Boolean,System.Boolean@,System.Boolean@)
    name: ShouldContinue
    nameWithType: Cmdlet.ShouldContinue
    fullName: System.Management.Automation.Cmdlet.ShouldContinue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String,System.Boolean,System.Boolean@,System.Boolean@)
    name: ShouldContinue
    nameWithType: Cmdlet.ShouldContinue
    fullName: System.Management.Automation.Cmdlet.ShouldContinue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String,System.Boolean@,System.Boolean@)
  commentId: M:System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String,System.Boolean@,System.Boolean@)
  parent: System.Management.Automation.Cmdlet
  isExternal: true
  name: ShouldContinue(String, String, Boolean, Boolean)
  nameWithType: Cmdlet.ShouldContinue(String, String, Boolean, Boolean)
  fullName: System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String,System.Boolean@,System.Boolean@)
    name: ShouldContinue
    nameWithType: Cmdlet.ShouldContinue
    fullName: System.Management.Automation.Cmdlet.ShouldContinue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String,System.Boolean@,System.Boolean@)
    name: ShouldContinue
    nameWithType: Cmdlet.ShouldContinue
    fullName: System.Management.Automation.Cmdlet.ShouldContinue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String)
  commentId: M:System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String)
  parent: System.Management.Automation.Cmdlet
  isExternal: true
  name: ShouldContinue(String, String)
  nameWithType: Cmdlet.ShouldContinue(String, String)
  fullName: System.Management.Automation.Cmdlet.ShouldContinue(System.String, System.String)
  spec.csharp:
  - uid: System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String)
    name: ShouldContinue
    nameWithType: Cmdlet.ShouldContinue
    fullName: System.Management.Automation.Cmdlet.ShouldContinue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Management.Automation.Cmdlet.ShouldContinue(System.String,System.String)
    name: ShouldContinue
    nameWithType: Cmdlet.ShouldContinue
    fullName: System.Management.Automation.Cmdlet.ShouldContinue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String,System.Management.Automation.ShouldProcessReason@)
  commentId: M:System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String,System.Management.Automation.ShouldProcessReason@)
  parent: System.Management.Automation.Cmdlet
  isExternal: true
  name: ShouldProcess(String, String, String, ShouldProcessReason)
  nameWithType: Cmdlet.ShouldProcess(String, String, String, ShouldProcessReason)
  fullName: System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String, System.String, System.Management.Automation.ShouldProcessReason)
  spec.csharp:
  - uid: System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String,System.Management.Automation.ShouldProcessReason@)
    name: ShouldProcess
    nameWithType: Cmdlet.ShouldProcess
    fullName: System.Management.Automation.Cmdlet.ShouldProcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Management.Automation.ShouldProcessReason
    name: ShouldProcessReason
    nameWithType: ShouldProcessReason
    fullName: System.Management.Automation.ShouldProcessReason
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String,System.Management.Automation.ShouldProcessReason@)
    name: ShouldProcess
    nameWithType: Cmdlet.ShouldProcess
    fullName: System.Management.Automation.Cmdlet.ShouldProcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Management.Automation.ShouldProcessReason
    name: ShouldProcessReason
    nameWithType: ShouldProcessReason
    fullName: System.Management.Automation.ShouldProcessReason
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Management.Automation.Cmdlet.ShouldProcess(System.String)
  commentId: M:System.Management.Automation.Cmdlet.ShouldProcess(System.String)
  parent: System.Management.Automation.Cmdlet
  isExternal: true
  name: ShouldProcess(String)
  nameWithType: Cmdlet.ShouldProcess(String)
  fullName: System.Management.Automation.Cmdlet.ShouldProcess(System.String)
  spec.csharp:
  - uid: System.Management.Automation.Cmdlet.ShouldProcess(System.String)
    name: ShouldProcess
    nameWithType: Cmdlet.ShouldProcess
    fullName: System.Management.Automation.Cmdlet.ShouldProcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Management.Automation.Cmdlet.ShouldProcess(System.String)
    name: ShouldProcess
    nameWithType: Cmdlet.ShouldProcess
    fullName: System.Management.Automation.Cmdlet.ShouldProcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String)
  commentId: M:System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String)
  parent: System.Management.Automation.Cmdlet
  isExternal: true
  name: ShouldProcess(String, String)
  nameWithType: Cmdlet.ShouldProcess(String, String)
  fullName: System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String)
  spec.csharp:
  - uid: System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String)
    name: ShouldProcess
    nameWithType: Cmdlet.ShouldProcess
    fullName: System.Management.Automation.Cmdlet.ShouldProcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String)
    name: ShouldProcess
    nameWithType: Cmdlet.ShouldProcess
    fullName: System.Management.Automation.Cmdlet.ShouldProcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String)
  commentId: M:System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String)
  parent: System.Management.Automation.Cmdlet
  isExternal: true
  name: ShouldProcess(String, String, String)
  nameWithType: Cmdlet.ShouldProcess(String, String, String)
  fullName: System.Management.Automation.Cmdlet.ShouldProcess(System.String, System.String, System.String)
  spec.csharp:
  - uid: System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String)
    name: ShouldProcess
    nameWithType: Cmdlet.ShouldProcess
    fullName: System.Management.Automation.Cmdlet.ShouldProcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Management.Automation.Cmdlet.ShouldProcess(System.String,System.String,System.String)
    name: ShouldProcess
    nameWithType: Cmdlet.ShouldProcess
    fullName: System.Management.Automation.Cmdlet.ShouldProcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Management.Automation.Cmdlet.StopProcessing
  commentId: M:System.Management.Automation.Cmdlet.StopProcessing
  parent: System.Management.Automation.Cmdlet
  isExternal: true
  name: StopProcessing()
  nameWithType: Cmdlet.StopProcessing()
  fullName: System.Management.Automation.Cmdlet.StopProcessing()
  spec.csharp:
  - uid: System.Management.Automation.Cmdlet.StopProcessing
    name: StopProcessing
    nameWithType: Cmdlet.StopProcessing
    fullName: System.Management.Automation.Cmdlet.StopProcessing
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Management.Automation.Cmdlet.StopProcessing
    name: StopProcessing
    nameWithType: Cmdlet.StopProcessing
    fullName: System.Management.Automation.Cmdlet.StopProcessing
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord)
  commentId: M:System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord)
  parent: System.Management.Automation.Cmdlet
  isExternal: true
  name: ThrowTerminatingError(ErrorRecord)
  nameWithType: Cmdlet.ThrowTerminatingError(ErrorRecord)
  fullName: System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord)
  spec.csharp:
  - uid: System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord)
    name: ThrowTerminatingError
    nameWithType: Cmdlet.ThrowTerminatingError
    fullName: System.Management.Automation.Cmdlet.ThrowTerminatingError
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Management.Automation.ErrorRecord
    name: ErrorRecord
    nameWithType: ErrorRecord
    fullName: System.Management.Automation.ErrorRecord
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Management.Automation.Cmdlet.ThrowTerminatingError(System.Management.Automation.ErrorRecord)
    name: ThrowTerminatingError
    nameWithType: Cmdlet.ThrowTerminatingError
    fullName: System.Management.Automation.Cmdlet.ThrowTerminatingError
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Management.Automation.ErrorRecord
    name: ErrorRecord
    nameWithType: ErrorRecord
    fullName: System.Management.Automation.ErrorRecord
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Management.Automation.Cmdlet.TransactionAvailable
  commentId: M:System.Management.Automation.Cmdlet.TransactionAvailable
  parent: System.Management.Automation.Cmdlet
  isExternal: true
  name: TransactionAvailable()
  nameWithType: Cmdlet.TransactionAvailable()
  fullName: System.Management.Automation.Cmdlet.TransactionAvailable()
  spec.csharp:
  - uid: System.Management.Automation.Cmdlet.TransactionAvailable
    name: TransactionAvailable
    nameWithType: Cmdlet.TransactionAvailable
    fullName: System.Management.Automation.Cmdlet.TransactionAvailable
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Management.Automation.Cmdlet.TransactionAvailable
    name: TransactionAvailable
    nameWithType: Cmdlet.TransactionAvailable
    fullName: System.Management.Automation.Cmdlet.TransactionAvailable
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Management.Automation.Cmdlet.WriteCommandDetail(System.String)
  commentId: M:System.Management.Automation.Cmdlet.WriteCommandDetail(System.String)
  parent: System.Management.Automation.Cmdlet
  isExternal: true
  name: WriteCommandDetail(String)
  nameWithType: Cmdlet.WriteCommandDetail(String)
  fullName: System.Management.Automation.Cmdlet.WriteCommandDetail(System.String)
  spec.csharp:
  - uid: System.Management.Automation.Cmdlet.WriteCommandDetail(System.String)
    name: WriteCommandDetail
    nameWithType: Cmdlet.WriteCommandDetail
    fullName: System.Management.Automation.Cmdlet.WriteCommandDetail
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Management.Automation.Cmdlet.WriteCommandDetail(System.String)
    name: WriteCommandDetail
    nameWithType: Cmdlet.WriteCommandDetail
    fullName: System.Management.Automation.Cmdlet.WriteCommandDetail
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Management.Automation.Cmdlet.WriteDebug(System.String)
  commentId: M:System.Management.Automation.Cmdlet.WriteDebug(System.String)
  parent: System.Management.Automation.Cmdlet
  isExternal: true
  name: WriteDebug(String)
  nameWithType: Cmdlet.WriteDebug(String)
  fullName: System.Management.Automation.Cmdlet.WriteDebug(System.String)
  spec.csharp:
  - uid: System.Management.Automation.Cmdlet.WriteDebug(System.String)
    name: WriteDebug
    nameWithType: Cmdlet.WriteDebug
    fullName: System.Management.Automation.Cmdlet.WriteDebug
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Management.Automation.Cmdlet.WriteDebug(System.String)
    name: WriteDebug
    nameWithType: Cmdlet.WriteDebug
    fullName: System.Management.Automation.Cmdlet.WriteDebug
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord)
  commentId: M:System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord)
  parent: System.Management.Automation.Cmdlet
  isExternal: true
  name: WriteError(ErrorRecord)
  nameWithType: Cmdlet.WriteError(ErrorRecord)
  fullName: System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord)
  spec.csharp:
  - uid: System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord)
    name: WriteError
    nameWithType: Cmdlet.WriteError
    fullName: System.Management.Automation.Cmdlet.WriteError
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Management.Automation.ErrorRecord
    name: ErrorRecord
    nameWithType: ErrorRecord
    fullName: System.Management.Automation.ErrorRecord
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Management.Automation.Cmdlet.WriteError(System.Management.Automation.ErrorRecord)
    name: WriteError
    nameWithType: Cmdlet.WriteError
    fullName: System.Management.Automation.Cmdlet.WriteError
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Management.Automation.ErrorRecord
    name: ErrorRecord
    nameWithType: ErrorRecord
    fullName: System.Management.Automation.ErrorRecord
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Management.Automation.Cmdlet.WriteInformation(System.Object,System.String[])
  commentId: M:System.Management.Automation.Cmdlet.WriteInformation(System.Object,System.String[])
  parent: System.Management.Automation.Cmdlet
  isExternal: true
  name: WriteInformation(Object, String[])
  nameWithType: Cmdlet.WriteInformation(Object, String[])
  fullName: System.Management.Automation.Cmdlet.WriteInformation(System.Object, System.String[])
  nameWithType.vb: Cmdlet.WriteInformation(Object, String())
  fullName.vb: System.Management.Automation.Cmdlet.WriteInformation(System.Object, System.String())
  name.vb: WriteInformation(Object, String())
  spec.csharp:
  - uid: System.Management.Automation.Cmdlet.WriteInformation(System.Object,System.String[])
    name: WriteInformation
    nameWithType: Cmdlet.WriteInformation
    fullName: System.Management.Automation.Cmdlet.WriteInformation
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Management.Automation.Cmdlet.WriteInformation(System.Object,System.String[])
    name: WriteInformation
    nameWithType: Cmdlet.WriteInformation
    fullName: System.Management.Automation.Cmdlet.WriteInformation
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Management.Automation.Cmdlet.WriteInformation(System.Management.Automation.InformationRecord)
  commentId: M:System.Management.Automation.Cmdlet.WriteInformation(System.Management.Automation.InformationRecord)
  parent: System.Management.Automation.Cmdlet
  isExternal: true
  name: WriteInformation(InformationRecord)
  nameWithType: Cmdlet.WriteInformation(InformationRecord)
  fullName: System.Management.Automation.Cmdlet.WriteInformation(System.Management.Automation.InformationRecord)
  spec.csharp:
  - uid: System.Management.Automation.Cmdlet.WriteInformation(System.Management.Automation.InformationRecord)
    name: WriteInformation
    nameWithType: Cmdlet.WriteInformation
    fullName: System.Management.Automation.Cmdlet.WriteInformation
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Management.Automation.InformationRecord
    name: InformationRecord
    nameWithType: InformationRecord
    fullName: System.Management.Automation.InformationRecord
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Management.Automation.Cmdlet.WriteInformation(System.Management.Automation.InformationRecord)
    name: WriteInformation
    nameWithType: Cmdlet.WriteInformation
    fullName: System.Management.Automation.Cmdlet.WriteInformation
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Management.Automation.InformationRecord
    name: InformationRecord
    nameWithType: InformationRecord
    fullName: System.Management.Automation.InformationRecord
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Management.Automation.Cmdlet.WriteObject(System.Object,System.Boolean)
  commentId: M:System.Management.Automation.Cmdlet.WriteObject(System.Object,System.Boolean)
  parent: System.Management.Automation.Cmdlet
  isExternal: true
  name: WriteObject(Object, Boolean)
  nameWithType: Cmdlet.WriteObject(Object, Boolean)
  fullName: System.Management.Automation.Cmdlet.WriteObject(System.Object, System.Boolean)
  spec.csharp:
  - uid: System.Management.Automation.Cmdlet.WriteObject(System.Object,System.Boolean)
    name: WriteObject
    nameWithType: Cmdlet.WriteObject
    fullName: System.Management.Automation.Cmdlet.WriteObject
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Management.Automation.Cmdlet.WriteObject(System.Object,System.Boolean)
    name: WriteObject
    nameWithType: Cmdlet.WriteObject
    fullName: System.Management.Automation.Cmdlet.WriteObject
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Management.Automation.Cmdlet.WriteObject(System.Object)
  commentId: M:System.Management.Automation.Cmdlet.WriteObject(System.Object)
  parent: System.Management.Automation.Cmdlet
  isExternal: true
  name: WriteObject(Object)
  nameWithType: Cmdlet.WriteObject(Object)
  fullName: System.Management.Automation.Cmdlet.WriteObject(System.Object)
  spec.csharp:
  - uid: System.Management.Automation.Cmdlet.WriteObject(System.Object)
    name: WriteObject
    nameWithType: Cmdlet.WriteObject
    fullName: System.Management.Automation.Cmdlet.WriteObject
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Management.Automation.Cmdlet.WriteObject(System.Object)
    name: WriteObject
    nameWithType: Cmdlet.WriteObject
    fullName: System.Management.Automation.Cmdlet.WriteObject
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord)
  commentId: M:System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord)
  parent: System.Management.Automation.Cmdlet
  isExternal: true
  name: WriteProgress(ProgressRecord)
  nameWithType: Cmdlet.WriteProgress(ProgressRecord)
  fullName: System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord)
  spec.csharp:
  - uid: System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord)
    name: WriteProgress
    nameWithType: Cmdlet.WriteProgress
    fullName: System.Management.Automation.Cmdlet.WriteProgress
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Management.Automation.ProgressRecord
    name: ProgressRecord
    nameWithType: ProgressRecord
    fullName: System.Management.Automation.ProgressRecord
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Management.Automation.Cmdlet.WriteProgress(System.Management.Automation.ProgressRecord)
    name: WriteProgress
    nameWithType: Cmdlet.WriteProgress
    fullName: System.Management.Automation.Cmdlet.WriteProgress
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Management.Automation.ProgressRecord
    name: ProgressRecord
    nameWithType: ProgressRecord
    fullName: System.Management.Automation.ProgressRecord
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Management.Automation.Cmdlet.WriteVerbose(System.String)
  commentId: M:System.Management.Automation.Cmdlet.WriteVerbose(System.String)
  parent: System.Management.Automation.Cmdlet
  isExternal: true
  name: WriteVerbose(String)
  nameWithType: Cmdlet.WriteVerbose(String)
  fullName: System.Management.Automation.Cmdlet.WriteVerbose(System.String)
  spec.csharp:
  - uid: System.Management.Automation.Cmdlet.WriteVerbose(System.String)
    name: WriteVerbose
    nameWithType: Cmdlet.WriteVerbose
    fullName: System.Management.Automation.Cmdlet.WriteVerbose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Management.Automation.Cmdlet.WriteVerbose(System.String)
    name: WriteVerbose
    nameWithType: Cmdlet.WriteVerbose
    fullName: System.Management.Automation.Cmdlet.WriteVerbose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Management.Automation.Cmdlet.WriteWarning(System.String)
  commentId: M:System.Management.Automation.Cmdlet.WriteWarning(System.String)
  parent: System.Management.Automation.Cmdlet
  isExternal: true
  name: WriteWarning(String)
  nameWithType: Cmdlet.WriteWarning(String)
  fullName: System.Management.Automation.Cmdlet.WriteWarning(System.String)
  spec.csharp:
  - uid: System.Management.Automation.Cmdlet.WriteWarning(System.String)
    name: WriteWarning
    nameWithType: Cmdlet.WriteWarning
    fullName: System.Management.Automation.Cmdlet.WriteWarning
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Management.Automation.Cmdlet.WriteWarning(System.String)
    name: WriteWarning
    nameWithType: Cmdlet.WriteWarning
    fullName: System.Management.Automation.Cmdlet.WriteWarning
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Management.Automation.Cmdlet.CommandRuntime
  commentId: P:System.Management.Automation.Cmdlet.CommandRuntime
  parent: System.Management.Automation.Cmdlet
  isExternal: true
  name: CommandRuntime
  nameWithType: Cmdlet.CommandRuntime
  fullName: System.Management.Automation.Cmdlet.CommandRuntime
- uid: System.Management.Automation.Cmdlet.CommonParameters
  commentId: P:System.Management.Automation.Cmdlet.CommonParameters
  parent: System.Management.Automation.Cmdlet
  isExternal: true
  name: CommonParameters
  nameWithType: Cmdlet.CommonParameters
  fullName: System.Management.Automation.Cmdlet.CommonParameters
- uid: System.Management.Automation.Cmdlet.OptionalCommonParameters
  commentId: P:System.Management.Automation.Cmdlet.OptionalCommonParameters
  parent: System.Management.Automation.Cmdlet
  isExternal: true
  name: OptionalCommonParameters
  nameWithType: Cmdlet.OptionalCommonParameters
  fullName: System.Management.Automation.Cmdlet.OptionalCommonParameters
- uid: System.Management.Automation.Cmdlet.Stopping
  commentId: P:System.Management.Automation.Cmdlet.Stopping
  parent: System.Management.Automation.Cmdlet
  isExternal: true
  name: Stopping
  nameWithType: Cmdlet.Stopping
  fullName: System.Management.Automation.Cmdlet.Stopping
- uid: System.Management.Automation.Internal.InternalCommand.CommandOrigin
  commentId: P:System.Management.Automation.Internal.InternalCommand.CommandOrigin
  parent: System.Management.Automation.Internal.InternalCommand
  isExternal: true
  name: CommandOrigin
  nameWithType: InternalCommand.CommandOrigin
  fullName: System.Management.Automation.Internal.InternalCommand.CommandOrigin
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Management.Automation.Internal
  commentId: N:System.Management.Automation.Internal
  isExternal: true
  name: System.Management.Automation.Internal
  nameWithType: System.Management.Automation.Internal
  fullName: System.Management.Automation.Internal
- uid: System.Management.Automation
  commentId: N:System.Management.Automation
  isExternal: true
  name: System.Management.Automation
  nameWithType: System.Management.Automation
  fullName: System.Management.Automation
- uid: PowerPlug.BaseCmdlets.BynameBase.Name
  commentId: P:PowerPlug.BaseCmdlets.BynameBase.Name
  parent: PowerPlug.BaseCmdlets.BynameBase
  name: Name
  nameWithType: BynameBase.Name
  fullName: PowerPlug.BaseCmdlets.BynameBase.Name
- uid: PowerPlug.BaseCmdlets.WritableByname.Name*
  commentId: Overload:PowerPlug.BaseCmdlets.WritableByname.Name
  name: Name
  nameWithType: WritableByname.Name
  fullName: PowerPlug.BaseCmdlets.WritableByname.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: PowerPlug.BaseCmdlets.WritableByname.Scope*
  commentId: Overload:PowerPlug.BaseCmdlets.WritableByname.Scope
  name: Scope
  nameWithType: WritableByname.Scope
  fullName: PowerPlug.BaseCmdlets.WritableByname.Scope
- uid: PowerPlug.BaseCmdlets.WritableByname.Force*
  commentId: Overload:PowerPlug.BaseCmdlets.WritableByname.Force
  name: Force
  nameWithType: WritableByname.Force
  fullName: PowerPlug.BaseCmdlets.WritableByname.Force
- uid: System.Management.Automation.SwitchParameter
  commentId: T:System.Management.Automation.SwitchParameter
  parent: System.Management.Automation
  isExternal: true
  name: SwitchParameter
  nameWithType: SwitchParameter
  fullName: System.Management.Automation.SwitchParameter
- uid: PowerPlug.BaseCmdlets.WritableByname.Value*
  commentId: Overload:PowerPlug.BaseCmdlets.WritableByname.Value
  name: Value
  nameWithType: WritableByname.Value
  fullName: PowerPlug.BaseCmdlets.WritableByname.Value
- uid: PowerPlug.BaseCmdlets.WritableByname.Description*
  commentId: Overload:PowerPlug.BaseCmdlets.WritableByname.Description
  name: Description
  nameWithType: WritableByname.Description
  fullName: PowerPlug.BaseCmdlets.WritableByname.Description
- uid: PowerPlug.BaseCmdlets.WritableByname.Option*
  commentId: Overload:PowerPlug.BaseCmdlets.WritableByname.Option
  name: Option
  nameWithType: WritableByname.Option
  fullName: PowerPlug.BaseCmdlets.WritableByname.Option
- uid: System.Management.Automation.ScopedItemOptions
  commentId: T:System.Management.Automation.ScopedItemOptions
  parent: System.Management.Automation
  isExternal: true
  name: ScopedItemOptions
  nameWithType: ScopedItemOptions
  fullName: System.Management.Automation.ScopedItemOptions
- uid: PowerPlug.BaseCmdlets.WritableByname.PassThru*
  commentId: Overload:PowerPlug.BaseCmdlets.WritableByname.PassThru
  name: PassThru
  nameWithType: WritableByname.PassThru
  fullName: PowerPlug.BaseCmdlets.WritableByname.PassThru
- uid: PowerPlug.BaseCmdlets.WritableByname.WhatIf*
  commentId: Overload:PowerPlug.BaseCmdlets.WritableByname.WhatIf
  name: WhatIf
  nameWithType: WritableByname.WhatIf
  fullName: PowerPlug.BaseCmdlets.WritableByname.WhatIf
- uid: PowerPlug.BaseCmdlets.WritableByname.Confirm*
  commentId: Overload:PowerPlug.BaseCmdlets.WritableByname.Confirm
  name: Confirm
  nameWithType: WritableByname.Confirm
  fullName: PowerPlug.BaseCmdlets.WritableByname.Confirm
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: PowerPlug.BaseCmdlets.WritableByname.ToString*
  commentId: Overload:PowerPlug.BaseCmdlets.WritableByname.ToString
  name: ToString
  nameWithType: WritableByname.ToString
  fullName: PowerPlug.BaseCmdlets.WritableByname.ToString
